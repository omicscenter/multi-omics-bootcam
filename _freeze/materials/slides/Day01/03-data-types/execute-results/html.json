{
  "hash": "026ab626ecb275b58e985d8638f64cc7",
  "result": {
    "markdown": "# Data Types in R\n\n## R Data Types\n\n* A variable can store different types of values such as numbers, characters etc. \n\n* These different types of data that we can use in our code are called data types. For example,\n\n\n::: {.cell hash='03-data-types_cache/html/dtype-1_8ec8373454ea198e3308012e66033c8d'}\n\n```{.r .cell-code}\nx <- 123L\n```\n:::\n\n\n* Here, `123L` is an integer data. So the data type of the variable `x` is `integer.`\n\n## R Data Types\nWe can verify this by printing the class of `x` using `class()` function. \n\n\n::: {.cell hash='03-data-types_cache/html/dtype-2_77278fbdaed3852890cdcd52128611e3'}\n\n```{.r .cell-code}\nx <- 123L\n# print value of x\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123\n```\n:::\n\n```{.r .cell-code}\n# print type of x\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n## Different Types of Data Types\n\n| Data Type | Example        | Description                                                                                            |\n|------------|------------|------------------------------------------------|\n| Logical   | True, False    | It is a special data type for data with only two possible values which can be construed as true/false. |\n| Numeric   | 12,32,112,5432 | Decimal value is called numeric in R, and it is the default computational data type.                   |\n| Integer   | 3L, 66L, 2346L | Here, L tells R to store the value as an integer,                                                      |\n\n## Different Types of Data Types\n\n| Data Type | Example| Description|\n|--------------|--------------|--------------------------------------------|\n| Complex   | Z=1+2i, t=7+3i                | A complex value in R is defined as the pure imaginary value i.                                                                                         |\n| Character | 'a', '\"good'\", \"TRUE\", '35.4' | In R programming, a character is used to represent string values. We convert objects into character values with the help of `as.character()` function. |\n| Raw       |                               | A raw data type is used to holds raw bytes.|\n\n## Logical Data Type\nThe `logical` data type in R is also known as `boolean` data type. It can only have two values: `TRUE` and `FALSE.` For example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-1_3803bb6272101db4a6adee3d28228468'}\n\n```{.r .cell-code}\nbool1 <- TRUE\n# print bool1\nbool1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# print type of bool1\nclass(bool1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\n# print bool2\nbool2 <- FALSE\nbool2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# print type of bool2\nclass(bool2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Logical Data Type\nYou can also define `logical` variables with a single letter - `T` for `TRUE` or `F` for `FALSE.` For example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-2_e9dccad69f8aee96c6201335db1718f9'}\n\n```{.r .cell-code}\nis_weekend <- F\nclass(is_weekend)  # \"logical\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nis_weekday <- T\nclass(is_weekday)  # \"logical\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n\n## Numeric Data Type\nIn R, the `numeric` data type represents all real numbers with or without decimal values. For example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-3_c8ccb59886809301560076e29d17689f'}\n\n```{.r .cell-code}\n# floating point values\nweight <- 63.5\nweight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 63.5\n```\n:::\n\n```{.r .cell-code}\n# check variable types \nclass(weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# real numbers\nheight <- 182\nheight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 182\n```\n:::\n\n```{.r .cell-code}\n# check variable types \nclass(height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Integer Data Type\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-4_4d4b1187bef4315d738a871eda8b7143'}\n\n```{.r .cell-code}\ninteger_variable <- 186L\ninteger_variable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 186\n```\n:::\n\n```{.r .cell-code}\n# check variable types \nclass(integer_variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n## Complex Data Type\nThe `complex` data type is used to specify purely imaginary values in R. We use the suffix `i` to specify the imaginary part. For example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-5_a58ef3e02cc239bdd3b94474dba10dad'}\n\n```{.r .cell-code}\n# 2i represents imaginary part\ncomplex_value <- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n:::\n\n\n## Character Data Type\n* The `character` data type is used to specify character or string values in a variable.\n\n* In programming, a string is a set of characters. For example, `'A'` is a single character and `\"Apple\"` is a string.\n\n* You can use single quotes `''` or double quotes `\"\"` to represent strings. In general, we use:\n\n  * `''` for character variables\n  * `\"\"` for string variables\n\n## Character Data Type\nFor example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-6_4efb4c11615a8bcfaf6cee4e11dbdef5'}\n\n```{.r .cell-code}\n# create a string variable\nfruit <- \"Apple\"\nclass(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# create a character variable\nmy_char <- 'A'\nclass(my_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Raw Data Type\nA `raw` data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n  \n  * `charToRaw()` - converts character data to raw data\n  * `rawToChar()` - converts raw data to character data\n\n\n## Raw Data Type\nFor example,\n\n\n::: {.cell hash='03-data-types_cache/html/unnamed-chunk-7_9c010c9321e72ed97df084ce81d18261'}\n\n```{.r .cell-code}\n# convert character to raw\nraw_variable <- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n```\n:::\n\n```{.r .cell-code}\nprint(class(raw_variable))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"raw\"\n```\n:::\n\n```{.r .cell-code}\n# convert raw to character\nchar_variable <- rawToChar(raw_variable)\n\nprint(char_variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Welcome to Programiz\"\n```\n:::\n\n```{.r .cell-code}\nprint(class(char_variable))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}