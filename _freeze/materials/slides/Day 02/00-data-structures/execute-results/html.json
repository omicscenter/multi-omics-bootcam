{
  "hash": "7a43c592777002249836212343558931",
  "result": {
    "markdown": "## Agenda\n\n-   Data Structurs in R\n-   Subsetting R Objects\n-   Control Flow in R\n-   Functions\n-   Dates and Times\n-   Loop Functions\n-   Simulations - Generating Random Numbers\n\n## What is Data Structure?\n\n-   Data structures are ways of organizing and storing data in a computer system.\n-   They define the format, organization, and relationship between data elements.\n-   Data structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\n-   They provide a foundation for building algorithms and designing efficient programs.\n\n## Data Structures in R\n\n-   Vectors\n-   Matrix\n-   Lists\n-   Data Frame\n-   Factor\n\n## Types of Data Structures in R\n\n-   One-Dimensional Data Structures\n    -   One-dimensional data structures in R are used to store and manipulate data along a single dimension.\n    -   The main one-dimensional data structure in R is the `vector.`\n-   Two-Dimensional Data Structures\n    -   Two-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\n    -   The main two-dimensional data structures in R are `matrices` and `data frames`.\n\n## Strings\n\n-   A string is a sequence of characters. For example, `\"Programming\"` is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\n\n-   In R, we represent strings using quotation marks (double quotes, \" \" or single quotes, ' '). For example,\n\n\n::: {.cell hash='00-data-structures_cache/html/str-1_8e68b8f9f8758e070c1e479cba334e1d'}\n\n```{.r .cell-code}\n# string value using single quotes\n'Hello' \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"\n```\n:::\n\n```{.r .cell-code}\n# string value using double quotes \n\"Hello\" \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"\n```\n:::\n:::\n\n\n## String Operations in R\n\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\n-   Find the length of a string\n-   Join two strings\n-   Compare two strings\n-   Change the string case\n\n## Find Length of String\n\nWe use the `nchar()` method to find the length of a string. For example,\n\n\n::: {.cell hash='00-data-structures_cache/html/str-2_ec638d3cf9dc2944143159184acc753b'}\n\n```{.r .cell-code}\nmessage1 <- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n:::\n\n\nHere, `nchar()` returns the number of characters present inside the string.\n\n## Join Strings Together\n\nIn R, we can use the `paste()` function to join two or more strings together. For example,\n\n\n::: {.cell hash='00-data-structures_cache/html/str-3_3cb1dd4e788b3ab851d19d2c65d694c4'}\n\n```{.r .cell-code}\nmessage1 <- \"CHIRAL\"\nmessage2 <- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CHIRAL Bangladesh\"\n```\n:::\n:::\n\n\nHere, we have used the `paste()` function to join two strings: `message1` and `message2`.\n\n## Compare Two Strings in R Programming\n\nWe use the `==` operator to compare two strings. If two strings are equal, the operator returns `TRUE.` Otherwise, it returns `FALSE.` For example,\n\n\n::: {.cell hash='00-data-structures_cache/html/str-4_58ee32a2660ee483096f2a0974c8ba60'}\n\n```{.r .cell-code}\nmessage1 <- \"Hello, World!\"\nmessage2 <- \"Hi, Bangladesh!\"\nmessage3 <- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Change Case of R String\n\nIn R, we can change the case of a string using\n\n-   `toupper()` - convert string to uppercase\n-   `tolower()` - convert string to lowercase\n\n\n::: {.cell hash='00-data-structures_cache/html/str-5_9e37e777806bc0f83d716d52450a88e2'}\n\n```{.r .cell-code}\nmessage <- \"R Programming\"\n\n# change string to uppercase\nmessage_upper <- toupper(message)\nmessage_upper\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R PROGRAMMING\"\n```\n:::\n\n```{.r .cell-code}\n# change string to lowercase\nmessage_lower <- tolower(message)\nmessage_lower\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"r programming\"\n```\n:::\n:::\n\n\n## Vector\n\n-   Vector is a basic data structure in R.\n-   It contains element of the same type.\n-   The data types can be logical, integer, double, character, and complex.\n-   A vector's type can be checked with the `typeof()` function.\n\n## Creating Vectors - Using the c() Function\n\nThe `c()` function is used to concatenate or combine elements into a vector.\n\n\n::: {.cell hash='00-data-structures_cache/html/vector-1_cd2cc621d60019f13ac7984bf705e8c9'}\n\n```{.r .cell-code}\n# Numeric vector\nnumeric_vector <- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector <- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector <- c(TRUE, FALSE, TRUE)\n```\n:::\n\n\n## Creating Vectors - Using the `:` Operator\n\nThe `:` operator generates a sequence of numbers from the starting value to the ending value.\n\n\n::: {.cell hash='00-data-structures_cache/html/vector-2_9ad7db4afe47488d42702d18b0c2c035'}\n\n```{.r .cell-code}\n# Numeric sequence vector\nnumeric_sequence <- 1:10\n```\n:::\n\n\n## Creating Vectors - Using Sequence Generation Functions\n\nR provides functions like `seq()`, `rep()`, and `seq_len()` to generate sequences of numbers.\n\n\n::: {.cell hash='00-data-structures_cache/html/vector-3_b5fe94ca9c0645eb2b9e2168781aae01'}\n\n```{.r .cell-code}\n# Numeric sequence vector using seq()\nnumeric_sequence <- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values <- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence <- seq_len(10)\n```\n:::\n\n\n## Creating Vectors - Using Vectorized Operations\n\nVectors can be created by performing operations on existing vectors or values.\n\n\n::: {.cell hash='00-data-structures_cache/html/vector-4_24b4452222aa57948134c0d18accb34d'}\n\n```{.r .cell-code}\n# Vector created using vectorized operation\nnew_vector <- numeric_vector * 2\n```\n:::\n\n\n## Creating Vectors - Mixing Objects\n\n\n::: {.cell hash='00-data-structures_cache/html/vector-5_ee57f7bc2813870b940be157caa4b1fd'}\n\n```{.r .cell-code}\n# Character \nx <- c(1.7, \"a\")\n# Numeric \ny <- c(TRUE, 2)\n# Character \nz <- c(\"a\", TRUE)\n```\n:::\n\n\n## Matrix\n\n-   Matrix is a two dimensional data structure in R programming.\n-   Matrix is similar to vector but additionally contains the dimension attributes.\n-   All attributes of an object can be checked by `attributes()` function.\n-   Dimension can be checked by directly with the `dim()`function. We can check if a variable is a matrix or not with the `class()` function.\n\n## Creatinig Matrix\n\n-   Matrix can be created using the `matrix()` function. Here's the general syntax:\n\n\n::: {.cell hash='00-data-structures_cache/html/mat-1_32ea7580451ccd29cab45a6965467a0b'}\n\n```{.r .cell-code}\nmatrix(data, nrow, ncol, byrow, dimnames)\n```\n:::\n\n\n-   `data:` The data elements used to fill the matrix. It can be a vector or a combination of vectors.\n-   `nrow:` The number of rows in the matrix.\n-   `ncol:` The number of columns in the matrix.\n-   `byrow:` A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\n-   `dimnames:` Optional names for the rows and columns of the matrix.\n\n## Creatinig Matrix\n\n\n::: {.cell hash='00-data-structures_cache/html/mat-2_c44ed0c4315fd64f7dfeab4b03651eb7'}\n\n```{.r .cell-code}\n# Create a matrix using matrix function \nmat1 <- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 <- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 <- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 <- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n```\n:::\n\n\n## Matrix Properties\n\n\n::: {.cell hash='00-data-structures_cache/html/mat-3_7084f9686f30f9872a35e09a3dec6f42'}\n\n```{.r .cell-code}\n# Create a matrix using matrix function \nmat <- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\"\n```\n:::\n\n```{.r .cell-code}\n# Row Names \nrownames(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"X\" \"Y\" \"Z\"\n```\n:::\n\n```{.r .cell-code}\n# Dimension \ndim(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 3\n```\n:::\n:::\n\n\n## List\n\n-   List is a data structure having components of mixed data types.\n-   A vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\n-   We can check if it's a list with `typeof()` function and find its length using `length()` function.\n\n## Creating List\n\nList can be created using the list() function. Here's the general syntax:\n\n\n::: {.cell hash='00-data-structures_cache/html/list-1_e7a88f5d907df5785c809512715d4f57'}\n\n```{.r .cell-code}\nlist(..., recursive = FALSE)\n```\n:::\n\n\n-   `...`: The elements to be included in the list, separated by commas.\n-   `recursive`: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default).\n\n## Creating List\n\n\n::: {.cell hash='00-data-structures_cache/html/list-2_927829ff18a7d7451b521ac8e0e9e994'}\n\n```{.r .cell-code}\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list <- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)\n```\n:::\n\n\n## Factors\n\n-   In R, factors are used to represent categorical or discrete data with predefined levels or categories.\n-   Factors are useful when working with data that has distinct categories or when performing statistical analysis.\n-   Factors are used to represent categorical data and can be ordered and unordered.\n\n## Creating Factors\n\nFactors are created using the factor() function in R. Here's the general syntax:\n\n\n::: {.cell hash='00-data-structures_cache/html/factor-1_b03a2b39890cc500f8caa771613f578d'}\n\n```{.r .cell-code}\nfactor(x, levels, labels, ordered = FALSE)\n```\n:::\n\n\n-   `x`: A vector or column of data that represents the categorical variable.\n-   `levels`: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\n-   `labels`: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\n-   `ordered`: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default).\n\n## Creating Factors\n\n\n::: {.cell hash='00-data-structures_cache/html/factor-2_01bd0d7df8862b325f3675e8244424bc'}\n\n```{.r .cell-code}\n# Create a factor using factor() function \nf <- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"no\"  \"yes\"\n```\n:::\n:::\n\n\n## Data Frame\n\n-   In R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\n-   It consists of rows and columns, where each column can have a different data type.\n-   Data frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\n-   Data frames can be created using the `data.frame()` function or by importing data from external sources.\n\n## Create Data Frame\n\nData frames can be created using the data.frame() function or by importing data from external sources. Here's an example of creating a data frame in R:\n\n\n::: {.cell hash='00-data-structures_cache/html/df_927e9de02ef92104428436be27900ad5'}\n\n```{.r .cell-code}\n# Create a data frame\ndf <- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)\n```\n:::\n\n\n## Data Conversion Functions in R\n\n-   Conversion functions in R help transform data between different types and formats.\n-   `as.character()`, `as.numeric()`, `as.integer()`, `as.logical()`, and `as.factor()` are commonly used conversion functions.\n-   These functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types.\n\n## `as.character()`\n\n-   as.character() function converts an object to a character string representation.\n-   Syntax: as.character(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='00-data-structures_cache/html/unnamed-chunk-1_51ba1f7f52cee25d6330210ab4ef0987'}\n\n```{.r .cell-code}\n# Convert numeric values to character strings\nnumbers <- c(1, 2, 3)\ncharacter_numbers <- as.character(numbers)\n```\n:::\n\n\n## `as.numeric()`\n\n-   as.numeric() function converts an object to numeric (floating-point) values.\n-   Syntax: as.numeric(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='00-data-structures_cache/html/unnamed-chunk-2_c7c4c13f2e9e996fcdc081416bb1d126'}\n\n```{.r .cell-code}\n# Convert character strings to numeric values\ncharacter_numbers <- c(\"1\", \"2\", \"3\")\nnumeric_numbers <- as.numeric(character_numbers)\n```\n:::\n\n\n## `as.integer()`\n\n-   as.integer() function converts an object to integer values.\n-   Syntax: as.integer(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='00-data-structures_cache/html/unnamed-chunk-3_15726a06b12e23f9ee7084708679a091'}\n\n```{.r .cell-code}\n# Convert numeric values to integer values\nnumbers <- c(1.5, 2.7, 3.9)\ninteger_numbers <- as.integer(numbers)\n```\n:::\n\n\n## `as.logical()`\n\n-   as.logical() function converts an object to logical (boolean) values.\n-   Syntax: as.logical(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='00-data-structures_cache/html/unnamed-chunk-4_5bbe8e3fecc94359622ca48c54dae0b8'}\n\n```{.r .cell-code}\n# Convert numeric values to logical values\nnumbers <- c(0, 1, 2)\nlogical_values <- as.logical(numbers)\n```\n:::\n\n\n## `as.factor()`\n\n-   as.factor() function converts an object to a factor, which represents categorical data.\n-   Syntax: as.factor(x)\n-   x: The object to be converted.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}