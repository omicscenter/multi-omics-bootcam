{
  "hash": "13de7db3f21dc2e0c16e7971d458fd22",
  "result": {
    "markdown": "# Subsetting R Objects\n\n## Subsetting a Vector\n\n-   Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\n-   It is done using square brackets `[ ]` in R.\n-   Subsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\n-   Subsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition.\n\n## Subsetting Vector Elements by Index\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-vector-1_c5ef7677186c0b17be6648cbff36f220'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `vector[3]` retrieves the third element, which is `30`.\n-   `Result`: The third element (30) is displayed.\n\n## Subsetting Vector Elements by Logical Condition\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-vector-2_1a5c8b3a2775ef308f0f37fb0d63b48d'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[vector > 30]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40 50\n```\n:::\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `vector > 30` evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\n-   `vector[vector > 30]` retrieves elements where the condition is TRUE.\n-   `Result`: Elements greater than 30 (40, 50) are displayed.\n\n## Subsetting Vector Elements Using `:` Operator\n\nThe `:` operator allows you to specify a range of elements to subset from a vector.\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-vector-3_92e33089e707d5760602909527e013f3'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20 30 40\n```\n:::\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `2:4` creates a sequence of indices from 2 to 4.\n-   `vector[2:4]` retrieves elements at indices 2, 3, and 4.\n-   `Result`: Elements 20, 30, and 40 are displayed.\n\n## Subsetting Vector Elements Using `c()` Function\n\nThe `c()` function allows you to create a vector of specific indices to subset from a vector.\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-vector-4_868b2ec7c90458cd9c66aa7bed58987f'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 30 50\n```\n:::\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `c(1, 3, 5)` creates a vector of indices: 1, 3, 5.\n-   `vector[c(1, 3, 5)]` retrieves elements at indices 1, 3, and 5.\n-   `Result`: Elements 10, 30, and 50 are displayed.\n\n## Subsetting List\n\n-   Subsetting a list allows you to extract specific elements or subsets from a list in R.\n-   It is done using double square brackets `[[ ]]` or single square brackets`[ ]` in R.\n-   Subsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\n-   Subsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\n-   Subsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets `[ ]`.\n\n## Subsetting List Elements by Index\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-list-1_e514c6a5155808883a03ffb953937251'}\n\n```{.r .cell-code}\nmy_list <- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"banana\"\n```\n:::\n:::\n\n\n-   The list contains elements: \"apple\", \"banana\", \"orange\".\n-   `my_list[[2]]` retrieves the second element of the list, which is \"banana\".\n-   `Result`: The second element (\"banana\") is displayed.\n\n## Subsetting List Elements by Name\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-list-2_d0ea9b6bbc5f107f8e765f7176594717'}\n\n```{.r .cell-code}\nmy_list <- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"orange\"\n```\n:::\n:::\n\n\n-   The list contains named elements: fruit1, fruit2, fruit3.\n-   `my_list$fruit3` retrieves the element with the name \"fruit3\", which is \"orange\".\n-   `Result`: The element \"orange\" is displayed.\n\n## Subsetting a Subset of List Elements\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-list-3_df4f88cb1139caafc44b4778912e734b'}\n\n```{.r .cell-code}\nmy_list <- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n```\n:::\n:::\n\n\n-   The list contains elements: \"apple\", \"banana\", \"orange\".\n-   `my_list[2:3]` retrieves the second and third elements of the list.\n-   `Result`: The second and third elements (\"banana\", \"orange\") are displayed.\n\n## Subsetting Matrix\n\n-   Subsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\n-   It is done using square brackets `[ ]` in combination with row and column indices.\n-   Subsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\n-   Subsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\n-   Subsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix.\n\n## Subsetting Rows\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-mat-1_fb087d2f5fdfedf791849c21dd9bc13d'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[1, ]` retrieves the first row of the matrix.\n-   `Result`: The first row (1, 2) is displayed.\n\n## Subsetting Columns\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-mat-2_fb0073877748229b9725efabc75e88c6'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[, 2]` retrieves the second column of the matrix.\n-   `Result`: The second column (2, 4) is displayed.\n\n## Subsetting Elements\n\n\n::: {.cell hash='01-subsetting-robjects_cache/html/subset-mat-3_570909403fed0744cfa8e66a062b42e6'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[2, 1]`retrieves the element at the second row and first column.\n-   `Result`: The element at the second row and first column (3) is displayed.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}