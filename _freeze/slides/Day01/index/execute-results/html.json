{
  "hash": "c42f4a7285944939f26e752ae0a58775",
  "result": {
    "markdown": "---\ntitle: \"R for Bioinformatics\"\nauthor:\n  - name: Md. Jubayer Hossain\n    orcid: 0000-0001-9323-4997\n    url: https://hossainlab.github.io/\n    affiliations: \n    - CHIRAL Bangladesh\n    - Founder & Management Lead \ndate: last-modified\ndate-format: \"[Last Updated on] MMMM, YYYY\"\nfooter: \"R for Bioinformatics  | &copy; 2023 Md. Jubayer Hossain\"\neditor: source\nformat: \n  revealjs: \n    logo: images/chirallogo.jpg \n    css: ../slides.scss\n    theme: ../slides.scss\n    transition: fade\n    slide-number: true\n    chalkboard: false\nexecute:\n  echo: true\n  output: asis\n  freeze: auto\ncache: true\n---\n\n## Agenda\n\n-   Introduction & Setup\n-   Background\n-   Basic Terms in R\n-   Getting Started With R\n-   R Data Types\n-   Operators in R\n\n# Introduction\n\n## About the Course {.incremental}\n\n-   What do you hope to get out of the course?\n    -   R for Bioinformatics is an introductory course designed to equip learners with essential skills in using the R programming language for bioinformatics research.\n-   Why do you want to use R?\n    -   The course focuses on the practical application of R in genomic data manipulation, statistical analysis, data visualization, and reproducible research.\n\n## Learning Objectives\n\n-   `Data Manipulation:` Learn how to import, clean, and transform data in R for research purposes.\n-   `Data Visualization:` Master techniques for creating effective data visualizations in R to communicate research findings visually.\n-   `Statistical Analysis:` Develop skills in conducting statistical analysis using R for hypothesis testing, regression analysis, and other statistical tests.\n-   `Reproducible Research:` Implement principles of reproducible research using R to document and organize code, data, and analysis for replicability.\n\n## Course Platforms\n\n-   Website: <https://omicscenter.github.io/RforResearch/>\n-   Github: <https://github.com/omicscenter/RforResearch>\n-   Materials will be uploaded the night before class.\n-   Please check regularly official [Telegram group]{.emphasis} for this course.\n\n> We are constantly trying to improve content! Please refresh/download materials before class.\n\n## Course Format\n\n-   Lecture with live coding (possibly \"Interactive\")\n-   Lab/Practical experience\n-   Two 5 min breaks each session - timing may vary\n\n## Assignment Policy\n\n-   20% of your grade will be determined by an assignment during normal class hours.\n-   50% of your grade will come from a 5-10 page report that explores in further detail one of the research areas in the class syllabus\n-   We expect that students will use original data collection, whether quantitative or qualitative analysis, to answer the questions posed.\n-   30% of your grade will be determined by your attendance and participation in class.\n\n## Required Textbooks\n\nThe following books purchased and are available at the online book store. We have also a placed a copy of each on reserve at our [Telegram group]{.emphasis}.\n\n-   Data Analysis for the Life Sciences with R, by Rafael Irizarry\n-   Introduction to Data Science, by Rafael Irizarry\n\n## Acknowledgements\n\n::: {.columns .v-center-container}\n::: {.column width=\"60%\"}\n<img src=\"images/logo.png\" alt=\"drawing\" width=\"70%\"/>\n:::\n\n::: {.column width=\"40%\"}\nThis work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/) (CC BY-SA4.0).\n:::\n:::\n\n## Questions\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n-   Please add any questions to the public Zoom chat.\n\n-   Coordinators will monitor the chat\n\n-   We'll also have time for questions at the break and at the end\n:::\n\n::: {.column width=\"50%\"}\n![](images/questions.jpg){width=\"100%\"}\n:::\n:::\n\n# Background\n\n## What is R?\n\n-   R is a dialect of S(R is an implementation of the S programming language).\n\n-   R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\n\n-   R is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\n\n-   R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\n\n-   The R language is widely used among statisticians and data miners for developing statistical software and data analysis.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_d1ccbbc6c486d2c588baab081b5357eb'}\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Bell_Laboratories_logo.svg/2880px-Bell_Laboratories_logo.svg.png){fig-align='center' fig-alt='Bell Labs old logo' width=20%}\n:::\n\n\n## Why R?\n\n-   Free (open source)\n\n-   High level language designed for statistical computing\n\n-   Powerful and flexible - especially for data wrangling and visualization\n\n-   Extensive add-on software (packages)\n\n-   R is popular -- and increasing in popularity.\n\n-   R runs on all platforms.(Windows, Linux and Mac)\n\n-   R is being used by the biggest tech giants(google, facebook, microsoft, twitter)\n\n-   Strong community\n\n## Reproducibility Crisis\n\n::: columns\n::: {.column width=\"60%\"}\n-   Quality of medical research is often low\n\n-   [Low quality code]{.emphasis} in medical research part of the problem\n\n-   Low quality code is more [likely to contain errors]{.emphasis}\n\n-   Reproducibility is often [cumbersome]{.emphasis} and [time-consuming]{.emphasis}\n:::\n\n::: {.column width=\"40%\"}\n![](images/reproducibility-graphic-online1.jpeg)\n:::\n:::\n\n# Basic Terms\n\n## Variable and Sample\n\n-   **Variable**: something measured or counted that is a characteristic about a sample\n\n    -   *Examples:* temperature, length, count, color, category\n\n-   **Sample**: individuals that you have data about.\n\n    -   *Examples:* people, houses, viruses etc.\n\n## Object\n\n**Object** - an object is something that can be worked with in R - can be lots of different things!\n\n-   a matrix of numbers\n-   a plot\n-   a function\n\n... many more\n\n## Columns and Rows\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_e5107a8d8bc5a63f3d8d041208187b25'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"dnhsymwjan\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#dnhsymwjan table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#dnhsymwjan thead, #dnhsymwjan tbody, #dnhsymwjan tfoot, #dnhsymwjan tr, #dnhsymwjan td, #dnhsymwjan th {\n  border-style: none;\n}\n\n#dnhsymwjan p {\n  margin: 0;\n  padding: 0;\n}\n\n#dnhsymwjan .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#dnhsymwjan .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#dnhsymwjan .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#dnhsymwjan .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#dnhsymwjan .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#dnhsymwjan .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#dnhsymwjan .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#dnhsymwjan .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#dnhsymwjan .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#dnhsymwjan .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#dnhsymwjan .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#dnhsymwjan .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#dnhsymwjan .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#dnhsymwjan .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#dnhsymwjan .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dnhsymwjan .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#dnhsymwjan .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#dnhsymwjan .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#dnhsymwjan .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dnhsymwjan .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#dnhsymwjan .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dnhsymwjan .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#dnhsymwjan .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dnhsymwjan .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dnhsymwjan .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dnhsymwjan .gt_left {\n  text-align: left;\n}\n\n#dnhsymwjan .gt_center {\n  text-align: center;\n}\n\n#dnhsymwjan .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#dnhsymwjan .gt_font_normal {\n  font-weight: normal;\n}\n\n#dnhsymwjan .gt_font_bold {\n  font-weight: bold;\n}\n\n#dnhsymwjan .gt_font_italic {\n  font-style: italic;\n}\n\n#dnhsymwjan .gt_super {\n  font-size: 65%;\n}\n\n#dnhsymwjan .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#dnhsymwjan .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#dnhsymwjan .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#dnhsymwjan .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#dnhsymwjan .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#dnhsymwjan .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#dnhsymwjan .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sepal.Length\">Sepal.Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sepal.Width\">Sepal.Width</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Petal.Length\">Petal.Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Petal.Width\">Petal.Width</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Species\">Species</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">5.1</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.5</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">4.9</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.0</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">4.7</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.2</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.3</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">4.6</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.1</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.5</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">5.0</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.6</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">5.4</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.9</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.7</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.4</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n-   Sample/Observations = Row\\\n\n-   Variable = Column\n\n-   Data objects that looks like this is often called a **data frame**.\n\n-   Fancier versions from the tidyverse are called **tibbles** (more on that soon!).\n\n## Function\n\n-   **Function** - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\n\n-   A function might help you add numbers together, create a plot, or organize your data. More on that soon!\n\n## Argument/Parameter\n\n**Argument/Parameter** - what you pass to a function\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_42c20e2853415725f0728056af04aeba'}\n\n```{.r .cell-code}\nsum(1, 20234)\n```\n\n[1] 20235\n:::\n\n\n-   Can be data like the number 1 or 20234\n-   Can be options about how you want the function to work such as `digits`\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_0e60375997c145e09b5041f8c9087fc9'}\n\n```{.r .cell-code}\nround(0.627, digits = 2)\n```\n\n[1] 0.63\n\n```{.r .cell-code}\nround(0.627, digits = 1)\n```\n\n[1] 0.6\n:::\n\n\n## Package\n\n-   **Package** - a package in R is a bundle or \"package\" of code (and or possibly data) that can be loaded together for easy repeated use or for **sharing** with others.\n\n-   Packages are sort of analogous to a software application like Microsoft Word on your computer. Your operating system allows you to use it, just like having R installed (and other required packages) allows you to use packages.\n\n## More on Functions and Packages\n\n-   When you download R, it has a \"base\" set of functions/packages (**base R**)\\\n-   You can install additional packages for your uses from [CRAN](https://cran.r-project.org/) or [GitHub](https://github.com/)\n-   These additional packages are written by RStudio or R users/developers (like us)\n\n## Using Packages\n\n-   Not all packages available on CRAN or GitHub are trustworthy\n-   RStudio (the company) makes a lot of great packages\n-   Who wrote it? **Hadley Wickham** is a major authority on R (Employee and Developer at RStudio)\n-   How to [trust](http://simplystatistics.org/2015/11/06/how-i-decide-when-to-trust-an-r-package/) an R package\n-   Install packages: `install.packages(\"package_name\")`\n-   Use packages: `library(package_name)`\n\n## Tidyverse Ecosystem and Base R\n\n-   We will mostly show you how to use tidyverse packages and functions.\n\n-   This is a newer set of packages designed for data science that can make your code more **intuitive** as compared to the original older Base R.\n\n-   **Tidyverse advantages**:\n\n    -   **consistent structure** - making it easier to learn how to use different packages\\\n    -   particularly good for **wrangling** (manipulating, cleaning, joining) data\\\n    -   more flexible for **visualizing** data\n\n-   Packages for the tidyverse are managed by a team of respected data scientists at RStudio.\n\n## Installation and Use\n\n-   Install all the packages in the tidyverse by running `install.packages(\"tidyverse\")`.\n\n-   Run `library(tidyverse)` to load the core tidyverse and make it available in your current R session.\n\n-   Learn more about the tidyverse package at <https://tidyverse.tidyverse.org>.\n\n## Core tidyverse\n\n-   The core tidyverse includes the packages that you're likely to use in everyday data analyses.\n-   As of tidyverse 1.3.0, the following packages are included in the core tidyverse.\n-   The tidyverse also includes many other packages with more specialised usage.\n-   They are not loaded automatically with `library(tidyverse)`, so you'll need to load each one with its own call to `library()`.\n\n## Data Import\n\n-   As well as [readr](https://readr.tidyverse.org), for reading flat files, the tidyverse package installs a number of other packages for reading data:\n\n    -   [DBI](https://github.com/rstats-db/DBI) for relational databases. (Maintained by [Kirill Müller](https://www.cynkra.com).) You'll need to pair DBI with a database specific backends like [RSQLite](https://rsqlite.r-dbi.org), [RMariaDB](https://rmariadb.r-dbi.org), [RPostgres](https://rpostgres.r-dbi.org), or [odbc](https://github.com/r-dbi/odbc). Learn more at <https://db.rstudio.com>.\n\n-   [readxl](https://readxl.tidyverse.org) for `.xls` and `.xlsx` sheets.\n\n\n\n## Data Wrangling\n\nIn addition to [tidyr](https://tidyr.tidyverse.org), and [dplyr](https://dplyr.tidyverse.org), there are five packages (including [stringr](https://stringr.tidyverse.org) and [forcats](https://forcats.tidyverse.org)) which are designed to work with specific types of data:\n\n-   [lubridate](https://lubridate.tidyverse.org) for dates and date-times.\n-   [hms](https://github.com/tidyverse/hms) for time-of-day values.\n-   [blob](https://github.com/tidyverse/blob) for storing blob (binary) data.\n\n## Program\n\nIn addition to [purrr](https://purrr.tidyverse.org), which provides very consistent and natural methods for iterating on R objects, there are two additional tidyverse packages that help with general programming challenges:\n\n-   [magrittr](https://magrittr.tidyverse.org) provides the pipe, `%>%` used throughout the tidyverse. It also provide a number of more specialised piping operators (like `%$%` and `%<>%`) that can be useful in other places.\n\n-   [glue](https://github.com/tidyverse/glue) provides an alternative to `paste()` that makes it easier to combine data and strings.\n\n## Useful (+ mostly Free) Resources\n\n-   Tidyverse Skills for Data Science Book: <https://jhudatascience.org/tidyversecourse/> (more about the tidyverse, some modeling, and machine learning)\n\n-   Tidyverse Skills for Data Science Course: <https://www.coursera.org/specializations/tidyverse-data-science-r> (same content with quizzes, can get certificate with \\$)\n\n-   R for Data Science: <http://r4ds.had.co.nz/>\\\n    (great general information)\n\n-   R basics by Rafael A. Irizarry: <https://rafalab.github.io/dsbook/r-basics.html> (great general information)\n\n-   Open Case Studies: <https://www.opencasestudies.org/>\\\n    (resource for specific public health cases with statistical implementation and interpretation)\n\n## Useful (+ mostly Free) Resources\n\n-   Dataquest: <https://www.dataquest.io/>\\\n    (general interactive resource)\n\n-   Various \"Cheat Sheets\": <https://www.rstudio.com/resources/cheatsheets/>\n\n-   R reference card: <http://cran.r-project.org/doc/contrib/Short-refcard.pdf>\n\n-   R jargon: <https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf>\n\n-   R vs Stata: <https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf>\n\n-   R terminology: <https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf>\n\n# Getting Started With R\n\n## Your Setup\n\nIf you can, we suggest working virtually with a **large monitor or two screens**. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\n* Install the latest version from: <https://posit.co/>\n\n* Install RStudio from : <https://posit.co/download/rstudio-desktop/>\n\nRStudio is an **integrated development environment** (IDE) that makes it easier to work with R.\n\nMore on that soon!\n\n## RStudio - Major concepts\n\n- **RStudio** - an Integrated Development Environment (IDE) for R - makes it easier to use R.\n- **Source/Editor** - “Analysis” Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\n- **R Console** - Where code is executed (where things happen) - Code is not saved on your disk\n- **Workspace/Environment** - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\n- **R Markdown** - Files (.Rmd) help generate reports that include your code and\noutput.\n\n## RStudio \n- **Quarto** - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. <https://quarto.org/> \n- **R Project** - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you’re on.\n\n- **Quarto Project** - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\n\n- RStudio Keyboard shortcuts: <http://www.rstudio.com/ide/docs/using/keyboard_shortcuts>\n\n## What is Reproducibility? \n\n- **Reproducibility** - A different analyst re-performs the analysis with the same code and the same data and obtains the same\nresult.\n- **Repeatable** - keeping everything the same but repeating the analysis - do we get the same results\n- **Reproducible** - using the same data and analysis but in the hands of another researcher - do we get the same results?\n- **Replicable** - with new data do we obtain the same inferences?\n\n## Running Your First R Program\n* Now that you have installed R and RStudio successfully, let's try to create your first R program. We will try to create a simple Hello World program.\n\n* A Hello World program is a simple program that simply prints a `Hello World` message on the screen. It's generally used to introduce a new language to learners.\n\n\n::: {.cell hash='index_cache/html/hello-world-1_9950421edcb5bca8e4e155e9afc5dbe5'}\n\n```{.r .cell-code}\nmessage <-\"Hello World!\"\nprint(message)  \n```\n\n[1] \"Hello World!\"\n:::\n\n\n## Running Your First R Program\n\n\n::: {.cell hash='index_cache/html/hello-world-2_14798fcc88fe09f95c49f0dca05b6162'}\n\n```{.r .cell-code}\nmessage <-\"Hello World!\"\nprint(message)  \n```\n\n[1] \"Hello World!\"\n:::\n\n* Here, we have created a simple variable called `message.` We have initialized this variable with a simple message string called `\"Hello World!\"`. On execution, this program prints the message stored inside the variable.\n\n* Every output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed.\n\n## R as a Calculator\n\n::: {.cell hash='index_cache/html/calcDemo_0d8bbc3c9f4f742aa323639cb40d5427'}\n\n```{.r .cell-code}\n2 + 2\n```\n\n[1] 4\n\n```{.r .cell-code}\n2 * 4\n```\n\n[1] 8\n\n```{.r .cell-code}\n2^3\n```\n\n[1] 8\n:::\n\n\n*Note:* when you type your command, R inherently thinks you want to print the result. \n\n## R as a Calculator\n\n- The R console is a full calculator\n- Try to play around with it:\n    - +, -, /, * are add, subtract, divide and multiply\n    - ^ or ** is power\n    - parentheses -- ( and ) -- work with order of operations \n    - %% finds the remainder\n\n## R as a Calculator\n\n::: {.cell hash='index_cache/html/calcDemo2_9459ec45a88c33a7a09cd2bb02060da6'}\n\n```{.r .cell-code}\n2 + (2 * 3)^2\n```\n\n[1] 38\n\n```{.r .cell-code}\n(1 + 3) / 2 + 45\n```\n\n[1] 47\n\n```{.r .cell-code}\n6 / 2 * (1 + 2)\n```\n\n[1] 9\n:::\n\n\n## R as a Calculator\nTry evaluating the following:\n\n- `2 + 2 * 3 / 4 -3`\n- `2 * 3 / 4 * 2`\n- `2^4 - 1`\n\n## Variables (Identifiers) in R\n* Variables are used to store data, whose value can be changed according to our need.\n* A variable is a name given to a memory location, which is used to store values in a computer program.\n* Variables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\n* R is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\n* Unique name given to variable (function and objects as well) is identifier.\n\n\n## Rules for writing Identifiers in R\n* Identifiers can be a combination of letters, digits, period (.) and underscore (_).\n* It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\n* It should not start with a number (e.g: 2x)\n* It should not start with a dot followed by a number (e.g: .2x)\n* It should not start with an underscore (e.g: _x)\n* Reserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)\n\n## Basically, there are 5 naming conventions \n- alllowercase: e.g. `myname`\n- period.separated: e.g. `new.name`\n- underscore_separated: e.g. `my_name`\n- lowerCamelCase: e.g. `myName`\n- UpperCamelCase: e.g. `MyName`\n\n\n## Assigning Values to Objects\n\n- You can create objects from within the R environment and from files on your computer\n- R uses `<-` to assign values to an object name (you might also see `=` used, but this is not best practice)\n- Object names are case-sensitive, i.e. X and x are different\n\n\n::: {.cell hash='index_cache/html/assign_5fe9f3bd3c0761e38ff40de953fb62c0'}\n\n```{.r .cell-code}\nx <- 2\nx\n```\n\n[1] 2\n\n```{.r .cell-code}\nx * 4\n```\n\n[1] 8\n\n```{.r .cell-code}\nx + 2\n```\n\n[1] 4\n:::\n\n\n## Creating Variables\n\nUsing equal(`=`) operator\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_f6a6db9280b7c12c023a47bca38b66be'}\n\n```{.r .cell-code}\nx = 10 \n```\n:::\n\n\nUsing leftward(`<-`) operator \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_30b6e46d84d57324796179827b438874'}\n\n```{.r .cell-code}\ny <- 15  \n```\n:::\n\n\n##  Reserved Keaywords in R\n- Don’t use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved). \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_38d07af3c2f506b160dd973075c228bd'}\n\n```{.r .cell-code}\n?Reserved\n```\n:::\n\n\n## Entering Input\nAt the R prompt/console we type expressions. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_4604006c6ae7bab3cf87aa2a0a68853b'}\n\n```{.r .cell-code}\nnum <- 10\n```\n:::\n\n\nThe `<-` symbol is the **assignment** operator. \nThe grammar of the language determines whether an expression is complete or not.\n\n## Evaluation\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_ac271dc0911d0b6da2873afdcb27d33a'}\n\n```{.r .cell-code}\nx <- 10\nx\n```\n\n[1] 10\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_93f52c08a4e2cc4bc47f48dbb822efa3'}\n\n```{.r .cell-code}\nx <- 10\nprint(x)\n```\n\n[1] 10\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_879be78b7af59d17ad9b599cfb76de2d'}\n\n```{.r .cell-code}\nx <- 10\ncat(x)\n```\n\n10\n:::\n\n\n## R Comments\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n\n::: {.cell hash='index_cache/html/comments_5121c0ce0d2caf1accb57b4c189dc140'}\n\n```{.r .cell-code}\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n```\n\n[1] 24\n:::\n\n\n## Types of Comments in R\n\nIn general, all programming languages have the following types of comments:\n\n* single-line comments\n* multi-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R.\n\n## R Single-Line Comments\n\n::: {.cell hash='index_cache/html/single-comment_1ed904c72e76ecc6f83d633d24059845'}\n\n```{.r .cell-code}\n# this code prints Hello World\nprint(\"Hello World\") \n```\n\n[1] \"Hello World\"\n\n```{.r .cell-code}\n# check type of variables\nage <- 30 \nclass(age)\n```\n\n[1] \"numeric\"\n:::\n\n\n## R Multi-Line Comments\n* As already mentioned, R does not have any syntax to create multi-line comments.\n\n* However, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n::: {.cell hash='index_cache/html/multi-line-comments_feb99804eca89566aff4110e4a96f3ed'}\n\n```{.r .cell-code}\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n```\n\n[1] \"Hello World\"\n:::\n\n\n## Purpose of Comments\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\n\n**Here are a few purposes of commenting on an R code:**\n\n* It increases readability of the program for users other than the developers.\n* Comments in R provide metadata of the code or the overall project.\n* Comments are generally used by programmers to ignore some pieces of code during testing.\n* They are used to write a simple pseudo-code of the program.\n\n## How to Create Better Comments?\n\nYou should always keep in mind the following points while writing comments.\n\n- Use comments only to describe what a particular block of code does, not how it does.\n- Don't overuse comments. Try to make your code self-explanatory.\n- Try to create comments that are as precise as possible.\n- Don't use redundant comments.\n\n# Data Types in R\n\n## R Data Types\n\n* A variable can store different types of values such as numbers, characters etc. \n\n* These different types of data that we can use in our code are called data types. For example,\n\n\n::: {.cell hash='index_cache/html/dtype-1_b0e49c34bcd02ae95b68517100c91adc'}\n\n```{.r .cell-code}\nx <- 123L\n```\n:::\n\n\n* Here, `123L` is an integer data. So the data type of the variable `x` is `integer.`\n\n## R Data Types\nWe can verify this by printing the class of `x` using `class()` function. \n\n\n::: {.cell hash='index_cache/html/dtype-2_b1f235ef9498cd6a2eea9e338942f37c'}\n\n```{.r .cell-code}\nx <- 123L\n# print value of x\nx\n```\n\n[1] 123\n\n```{.r .cell-code}\n# print type of x\nclass(x)\n```\n\n[1] \"integer\"\n:::\n\n\n\n## Different Types of Data Types\n\n| Data Type | Example        | Description                                                                                            |\n|------------|------------|------------------------------------------------|\n| Logical   | True, False    | It is a special data type for data with only two possible values which can be construed as true/false. |\n| Numeric   | 12,32,112,5432 | Decimal value is called numeric in R, and it is the default computational data type.                   |\n| Integer   | 3L, 66L, 2346L | Here, L tells R to store the value as an integer,                                                      |\n\n## Different Types of Data Types\n\n| Data Type | Example| Description|\n|--------------|--------------|--------------------------------------------|\n| Complex   | Z=1+2i, t=7+3i                | A complex value in R is defined as the pure imaginary value i.                                                                                         |\n| Character | 'a', '\"good'\", \"TRUE\", '35.4' | In R programming, a character is used to represent string values. We convert objects into character values with the help of `as.character()` function. |\n| Raw       |                               | A raw data type is used to holds raw bytes.|\n\n## Logical Data Type\nThe `logical` data type in R is also known as `boolean` data type. It can only have two values: `TRUE` and `FALSE.` For example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_4aa316544d589f769826555fa28f579f'}\n\n```{.r .cell-code}\nbool1 <- TRUE\n# print bool1\nbool1\n```\n\n[1] TRUE\n\n```{.r .cell-code}\n# print type of bool1\nclass(bool1)\n```\n\n[1] \"logical\"\n\n```{.r .cell-code}\n# print bool2\nbool2 <- FALSE\nbool2\n```\n\n[1] FALSE\n\n```{.r .cell-code}\n# print type of bool2\nclass(bool2)\n```\n\n[1] \"logical\"\n:::\n\n\n## Logical Data Type\nYou can also define `logical` variables with a single letter - `T` for `TRUE` or `F` for `FALSE.` For example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_4fd596019e6db41d9742d7d2014de10c'}\n\n```{.r .cell-code}\nis_weekend <- F\nclass(is_weekend)  # \"logical\"\n```\n\n[1] \"logical\"\n\n```{.r .cell-code}\nis_weekday <- T\nclass(is_weekday)  # \"logical\"\n```\n\n[1] \"logical\"\n:::\n\n\n\n## Numeric Data Type\nIn R, the `numeric` data type represents all real numbers with or without decimal values. For example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_de4d04967ef38e0a06c8a522acf49aab'}\n\n```{.r .cell-code}\n# floating point values\nweight <- 63.5\nweight\n```\n\n[1] 63.5\n\n```{.r .cell-code}\n# check variable types \nclass(weight)\n```\n\n[1] \"numeric\"\n\n```{.r .cell-code}\n# real numbers\nheight <- 182\nheight\n```\n\n[1] 182\n\n```{.r .cell-code}\n# check variable types \nclass(height)\n```\n\n[1] \"numeric\"\n:::\n\n\n## Integer Data Type\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_245053711d720d104ac7f8ee9d516765'}\n\n```{.r .cell-code}\ninteger_variable <- 186L\ninteger_variable\n```\n\n[1] 186\n\n```{.r .cell-code}\n# check variable types \nclass(integer_variable)\n```\n\n[1] \"integer\"\n:::\n\n\n## Complex Data Type\nThe `complex` data type is used to specify purely imaginary values in R. We use the suffix `i` to specify the imaginary part. For example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-16_c4088625b006d5031ea73cb21eab7dcf'}\n\n```{.r .cell-code}\n# 2i represents imaginary part\ncomplex_value <- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n```\n\n[1] \"complex\"\n:::\n\n\n## Character Data Type\n* The `character` data type is used to specify character or string values in a variable.\n\n* In programming, a string is a set of characters. For example, `'A'` is a single character and `\"Apple\"` is a string.\n\n* You can use single quotes `''` or double quotes `\"\"` to represent strings. In general, we use:\n\n  * `''` for character variables\n  * `\"\"` for string variables\n\n## Character Data Type\nFor example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_0e96186ae1a8b460a7cbad175b5f4005'}\n\n```{.r .cell-code}\n# create a string variable\nfruit <- \"Apple\"\nclass(fruit)\n```\n\n[1] \"character\"\n\n```{.r .cell-code}\n# create a character variable\nmy_char <- 'A'\nclass(my_char)\n```\n\n[1] \"character\"\n:::\n\n\n## Raw Data Type\nA `raw` data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n  \n  * `charToRaw()` - converts character data to raw data\n  * `rawToChar()` - converts raw data to character data\n\n\n## Raw Data Type\nFor example,\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_9e4372c3cdc0c741851ecd8d585d9ae7'}\n\n```{.r .cell-code}\n# convert character to raw\nraw_variable <- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n```\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\n```{.r .cell-code}\nprint(class(raw_variable))\n```\n\n[1] \"raw\"\n\n```{.r .cell-code}\n# convert raw to character\nchar_variable <- rawToChar(raw_variable)\n\nprint(char_variable)\n```\n\n[1] \"Welcome to Programiz\"\n\n```{.r .cell-code}\nprint(class(char_variable))\n```\n\n[1] \"character\"\n:::\n\n\n\n\n\n# Operators in R\n\n## Operators in R\n\n-   In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\n-   R provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\n-   Operators in R can mainly be classified into the following categories.\n    -   Arithmetic Operators\n    -   Relational Operators\n    -   Logical Operators\n\n## Arithmetic Operators\n\n| Operator | Operation      | Example     |\n|----------|----------------|-------------|\n| \\+       | Addition       | 5 + 2 = 7   |\n| \\-       | Subtraction    | 4 - 2 = 2   |\n| \\*       | Multiplication | 2 \\* 3 = 6  |\n| /        | Division       | 4 / 2 = 2   |\n| %%       | Modulo         | 5 %% 2 = 1  |\n| \\^       | Power          | 4 \\^ 2 = 16 |\n\n## Example: Arithmetic Operators\n\n\n::: {.cell hash='index_cache/html/arithmetic-operators_ef4fd29af043b5d738bb8e32295b4a6a'}\n\n```{.r .cell-code}\nx <- 10 \ny <- 2 \n\n# Addition\nx+y\n```\n\n[1] 12\n\n```{.r .cell-code}\n# Subtraction\n2-5\n```\n\n[1] -3\n\n```{.r .cell-code}\n# Multiplication\n2 * 5 \n```\n\n[1] 10\n\n```{.r .cell-code}\n# Division\n2 / 5 \n```\n\n[1] 0.4\n:::\n\n\n## Example: Arithmetic Operators\n\n\n::: {.cell hash='index_cache/html/arithmetic-operators-2_90724888f6c3025ef55d37977a5f8362'}\n\n```{.r .cell-code}\nx <- 10 \ny <- 2 \n\n# Exponent \n2 ^ 5\n```\n\n[1] 32\n\n```{.r .cell-code}\n# Modulus(Remainder from division)\n2 %% 5\n```\n\n[1] 2\n:::\n\n\n## Relational Operators\n\n| Operator | Operation                | Example                    |\n|----------|--------------------------|----------------------------|\n| \\>       | Greater that             | `5 > 6` returns `FALSE`    |\n| \\<       | Less than                | `5 < 6` returns `TRUE`     |\n| ==       | Equals to                | `10 == 10` returns `TRUE`  |\n| !=       | Not equal to             | `10 != 10` returns `FALSE` |\n| \\>=      | Greater than or equal to | `5 >= 6` returns `FALSE`   |\n| \\<=      | Less than or equal to    | `6 <= 6` returns `TRUE`    |\n\n## Example: Relational Operators\n\nThe `output` of a comparison is a `boolean value`. For example, to check if two numbers are equal, you can use the `==` operator.\n\n\n::: {.cell hash='index_cache/html/relational-operators-1_0496c975728fe7db34139b07bccb3a31'}\n\n```{.r .cell-code}\nx <- 10\ny <- 23\n\n# compare x and y\nx == y # FALSE\n```\n\n[1] FALSE\n:::\n\n\nSimilarly, to check if x is less than y, you can use the `<` operator.\n\n\n::: {.cell hash='index_cache/html/relational-operators-2_8b87f3ff74d1a2089a6b5ab94e10f824'}\n\n```{.r .cell-code}\nx <- 10\ny <- 23\n\n# compare x and y\nx < y # TRUE\n```\n\n[1] TRUE\n:::\n\n\n## Logical Operators\n\nLogical operators are used to compare the output of two comparisons. There are `three` types of logical operators in R. They are:\n\n-   AND operator (&)\n-   OR operator (\\|)\n-   NOT operator (!)\n\n## AND Operator (&)\n\n-   The AND operator `&` takes as input two logical values and returns the output as another logical value.\n\n-   The output of the operator is `TRUE` only when `both` the input logical values are either `TRUE` or evaluated to `TRUE.`\n\n-   Let a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n|  a  |  b  | a & b |\n|:---:|:---:|:-----:|\n|  1  |  1  |   1   |\n|  1  |  0  |   0   |\n|  0  |  1  |   0   |\n|  0  |  0  |   0   |\n\n## Example: AND Operator (&)\n\n\n::: {.cell hash='index_cache/html/and-1_4917c6bf2d35a7250ed08ed49b905436'}\n\n```{.r .cell-code}\n# print & of TRUE and FALSE combinations\nTRUE & TRUE\n```\n\n[1] TRUE\n\n```{.r .cell-code}\nTRUE & FALSE\n```\n\n[1] FALSE\n\n```{.r .cell-code}\nFALSE & TRUE\n```\n\n[1] FALSE\n\n```{.r .cell-code}\nFALSE & FALSE\n```\n\n[1] FALSE\n:::\n\n::: {.cell hash='index_cache/html/and-2_9936d0d4a856423025b9c053a0cfa810'}\n\n```{.r .cell-code}\n# print & of TRUE and FALSE combinations\nx <- 10\ny <- 23\nz <- 12\n\n# compare \nx<y & y>z\n```\n\n[1] TRUE\n:::\n\n\n## OR Operator (\\|)\n\nThe OR operator \\| returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n|  a  |  b  | a \\| b |\n|:---:|:---:|:------:|\n|  1  |  1  |   1    |\n|  1  |  0  |   1    |\n|  0  |  1  |   1    |\n|  0  |  0  |   0    |\n\n## Example: OR Operator (\\|)\n\n\n::: {.cell hash='index_cache/html/or_1b98a075c9f7516aa8f3669dd892aa15'}\n\n```{.r .cell-code}\n# print | of TRUE and FALSE combinations\nTRUE | TRUE\n```\n\n[1] TRUE\n\n```{.r .cell-code}\nTRUE | FALSE\n```\n\n[1] TRUE\n\n```{.r .cell-code}\nFALSE | TRUE\n```\n\n[1] TRUE\n\n```{.r .cell-code}\nFALSE | FALSE\n```\n\n[1] FALSE\n:::\n\n::: {.cell hash='index_cache/html/or-2_c07c1a4e6eb272c9cae12fb253aa4787'}\n\n```{.r .cell-code}\n# print | of TRUE and FALSE combinations\nw <- 54\nx <- 12\ny <- 25\nz <- 1\n\nw>x | x>y | z>w\n```\n\n[1] TRUE\n:::\n\n\n## NOT (!) Operator\n\nThe NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n| a   | !a  |\n|-----|-----|\n| 1   | 0   |\n| 0   | 1   |\n\n## Example: NOT (!) Operator\n\n\n::: {.cell hash='index_cache/html/not_32c1d26b11c25fe13f545299e164ab0b'}\n\n```{.r .cell-code}\n# print ! of TRUE and FALSE\n!TRUE\n```\n\n[1] FALSE\n\n```{.r .cell-code}\n!FALSE\n```\n\n[1] TRUE\n:::\n\n\nHere, the output is the negation of the input.\n\n-   We can use the ! operator with comparisons.\n-   For example, !(x \\> 12) is the same as x \\<= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12.\n\n# Questions?\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}