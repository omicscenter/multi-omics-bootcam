{
  "hash": "2fa23dff25f1d655e0f0000e64cbffd6",
  "result": {
    "markdown": "# Getting Started With R\n\n## Your Setup\n\nIf you can, we suggest working virtually with a **large monitor or two screens**. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\n* Install the latest version from: <https://posit.co/>\n\n* Install RStudio from : <https://posit.co/download/rstudio-desktop/>\n\nRStudio is an **integrated development environment** (IDE) that makes it easier to work with R.\n\nMore on that soon!\n\n## RStudio - Major concepts\n\n- **RStudio** - an Integrated Development Environment (IDE) for R - makes it easier to use R.\n- **Source/Editor** - “Analysis” Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\n- **R Console** - Where code is executed (where things happen) - Code is not saved on your disk\n- **Workspace/Environment** - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\n- **R Markdown** - Files (.Rmd) help generate reports that include your code and\noutput.\n\n## RStudio \n- **Quarto** - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. <https://quarto.org/> \n- **R Project** - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you’re on.\n\n- **Quarto Project** - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\n\n- RStudio Keyboard shortcuts: <http://www.rstudio.com/ide/docs/using/keyboard_shortcuts>\n\n## What is Reproducibility? \n\n- **Reproducibility** - A different analyst re-performs the analysis with the same code and the same data and obtains the same\nresult.\n- **Repeatable** - keeping everything the same but repeating the analysis - do we get the same results\n- **Reproducible** - using the same data and analysis but in the hands of another researcher - do we get the same results?\n- **Replicable** - with new data do we obtain the same inferences?\n\n## Running Your First R Program\n* Now that you have installed R and RStudio successfully, let's try to create your first R program. We will try to create a simple Hello World program.\n\n* A Hello World program is a simple program that simply prints a `Hello World` message on the screen. It's generally used to introduce a new language to learners.\n\n\n::: {.cell hash='02-getting-started_cache/html/hello-world-1_a2f8fafcb4f542863d1d76088ef4b592'}\n\n```{.r .cell-code}\nmessage <-\"Hello World!\"\nprint(message)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World!\"\n```\n:::\n:::\n\n\n## Running Your First R Program\n\n\n::: {.cell hash='02-getting-started_cache/html/hello-world-2_d9b72bacfbfbd03434f973baa1658e3b'}\n\n```{.r .cell-code}\nmessage <-\"Hello World!\"\nprint(message)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World!\"\n```\n:::\n:::\n\n* Here, we have created a simple variable called `message.` We have initialized this variable with a simple message string called `\"Hello World!\"`. On execution, this program prints the message stored inside the variable.\n\n* Every output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed.\n\n## R as a Calculator\n\n::: {.cell hash='02-getting-started_cache/html/calcDemo_a26be49a5c62a6762cd0087a6f133d80'}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n2 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n2^3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n*Note:* when you type your command, R inherently thinks you want to print the result. \n\n## R as a Calculator\n\n- The R console is a full calculator\n- Try to play around with it:\n    - +, -, /, * are add, subtract, divide and multiply\n    - ^ or ** is power\n    - parentheses -- ( and ) -- work with order of operations \n    - %% finds the remainder\n\n## R as a Calculator\n\n::: {.cell hash='02-getting-started_cache/html/calcDemo2_51913343adc3e6d84d75a5287a588921'}\n\n```{.r .cell-code}\n2 + (2 * 3)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38\n```\n:::\n\n```{.r .cell-code}\n(1 + 3) / 2 + 45\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47\n```\n:::\n\n```{.r .cell-code}\n6 / 2 * (1 + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n## R as a Calculator\nTry evaluating the following:\n\n- `2 + 2 * 3 / 4 -3`\n- `2 * 3 / 4 * 2`\n- `2^4 - 1`\n\n## Variables (Identifiers) in R\n* Variables are used to store data, whose value can be changed according to our need.\n* A variable is a name given to a memory location, which is used to store values in a computer program.\n* Variables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\n* R is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\n* Unique name given to variable (function and objects as well) is identifier.\n\n\n## Rules for writing Identifiers in R\n* Identifiers can be a combination of letters, digits, period (.) and underscore (_).\n* It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\n* It should not start with a number (e.g: 2x)\n* It should not start with a dot followed by a number (e.g: .2x)\n* It should not start with an underscore (e.g: _x)\n* Reserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)\n\n## Basically, there are 5 naming conventions \n- alllowercase: e.g. `myname`\n- period.separated: e.g. `new.name`\n- underscore_separated: e.g. `my_name`\n- lowerCamelCase: e.g. `myName`\n- UpperCamelCase: e.g. `MyName`\n\n\n## Assigning Values to Objects\n\n- You can create objects from within the R environment and from files on your computer\n- R uses `<-` to assign values to an object name (you might also see `=` used, but this is not best practice)\n- Object names are case-sensitive, i.e. X and x are different\n\n\n::: {.cell hash='02-getting-started_cache/html/assign_49c3e2a4a894c45e51e26c3390d1eced'}\n\n```{.r .cell-code}\nx <- 2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nx + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n## Creating Variables\n\nUsing equal(`=`) operator\n\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-1_d736ffb04e4dfa5eb86e6e6bf1f13b5a'}\n\n```{.r .cell-code}\nx = 10 \n```\n:::\n\n\nUsing leftward(`<-`) operator \n\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-2_9c587d6c296a43fd91f32acd468ddce2'}\n\n```{.r .cell-code}\ny <- 15  \n```\n:::\n\n\n##  Reserved Keaywords in R\n- Don’t use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved). \n\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-3_1ffa115e011c48d734a118249addfa58'}\n\n```{.r .cell-code}\n?Reserved\n```\n:::\n\n\n## Entering Input\nAt the R prompt/console we type expressions. \n\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-4_d6ab005335b25fca351a83de2aad8c35'}\n\n```{.r .cell-code}\nnum <- 10\n```\n:::\n\n\nThe `<-` symbol is the **assignment** operator. \nThe grammar of the language determines whether an expression is complete or not.\n\n## Evaluation\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed. \n\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-5_dd59131d5c9973ac32ba1f8f7676c9a9'}\n\n```{.r .cell-code}\nx <- 10\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-6_2fd48ce71491161d9410fa4738b4e524'}\n\n```{.r .cell-code}\nx <- 10\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n::: {.cell hash='02-getting-started_cache/html/unnamed-chunk-7_b26cf419965f6568fd7ade944694e722'}\n\n```{.r .cell-code}\nx <- 10\ncat(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n## R Comments\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n\n::: {.cell hash='02-getting-started_cache/html/comments_3c291c3d31861dd22d015c6485ed7edd'}\n\n```{.r .cell-code}\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n:::\n\n\n## Types of Comments in R\n\nIn general, all programming languages have the following types of comments:\n\n* single-line comments\n* multi-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R.\n\n## R Single-Line Comments\n\n::: {.cell hash='02-getting-started_cache/html/single-comment_1e82c1278b906f31a09eb5acec55b5c4'}\n\n```{.r .cell-code}\n# this code prints Hello World\nprint(\"Hello World\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World\"\n```\n:::\n\n```{.r .cell-code}\n# check type of variables\nage <- 30 \nclass(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## R Multi-Line Comments\n* As already mentioned, R does not have any syntax to create multi-line comments.\n\n* However, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n::: {.cell hash='02-getting-started_cache/html/multi-line-comments_df3644420b673838ab6d9f22525389d0'}\n\n```{.r .cell-code}\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World\"\n```\n:::\n:::\n\n\n## Purpose of Comments\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\n\n**Here are a few purposes of commenting on an R code:**\n\n* It increases readability of the program for users other than the developers.\n* Comments in R provide metadata of the code or the overall project.\n* Comments are generally used by programmers to ignore some pieces of code during testing.\n* They are used to write a simple pseudo-code of the program.\n\n## How to Create Better Comments?\n\nYou should always keep in mind the following points while writing comments.\n\n- Use comments only to describe what a particular block of code does, not how it does.\n- Don't overuse comments. Try to make your code self-explanatory.\n- Try to create comments that are as precise as possible.\n- Don't use redundant comments.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}