{
  "hash": "6da7a2b746e7a87ae334fa452786f099",
  "result": {
    "markdown": "# Functions \n\n## Functions in R\n\n- Functions in R are blocks of reusable code that perform specific tasks.\n- They provide modularity and allow for the organization and reuse of code.\n- Functions can accept input arguments, perform computations, and return output values.\n\n## Types of Functions in R \n- Built-in Functions\n- User-Defined Functions\n- Recursive Functions\n- Anonymous Functions (Lambda Functions)\n- Higher-Order Functions\n\n## Built-in Functions\n- R comes with a wide range of built-in functions that are available for immediate use.\n- Examples: `mean()`, `sum()`, `max()`, `min()`, `sqrt()`, `length()`, etc.\n- These functions are part of the R language and provide basic operations and computations.\n\n## User-Defined Functions\n- Users can define their own functions in R to perform specific tasks.\n- These functions are created using the function keyword followed by the function name, arguments, and function body.\n- Examples: Custom functions created by users to solve specific problems.\n\n## Recursive Functions\n- Recursive functions are functions that call themselves during their execution.\n- They are useful for solving problems that can be broken down into smaller, similar sub-problems.\n- Examples: Functions that calculate factorials, Fibonacci series, or perform tree traversal.\n\n## Anonymous Functions (Lambda Functions)\n- Anonymous functions, also known as lambda functions, are functions without a formal name.\n- They are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\n- Examples: Functions used with higher-order functions like `apply()`, `lapply()`, `sapply()`, etc.\n\n## Higher-Order Functions\n- Higher-order functions take other functions as arguments or return functions as their output.\n- They allow for functional programming paradigms in R.\n- Examples: `apply()` family of functions, `map()` functions from the purrr package.\n\n## Creating a Function\n- To create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\n- The function body is enclosed in curly braces {} and contains the code to be executed.\n\n\n::: {.cell hash='03-functions_cache/html/unnamed-chunk-1_c04bfd7f4245a64a66600ae316c8526a'}\n\n```{.r .cell-code}\nf <- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()\n```\n:::\n\n\n## Creating a Function\n\n\n::: {.cell hash='03-functions_cache/html/unnamed-chunk-2_76b2d61bf3ffdb95bc78fcfb3e92e174'}\n\n```{.r .cell-code}\n# Function definition\nmy_function <- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result <- arg1 + arg2\n  return(result)\n}\n```\n:::\n\n\n## Calling a Function\n- To call a function in R, use the function name followed by parentheses, passing the required input arguments.\n- The function executes the code within its body and returns the specified output.\n\n\n::: {.cell hash='03-functions_cache/html/unnamed-chunk-3_c1fea8053eb8453f3c47b0f418096db8'}\n\n```{.r .cell-code}\n# Function call\nresult <- my_function(3, 5)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n## Function with Default Arguments\n- Functions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\n- Default arguments are defined using the assignment operator (=) within the function definition.\n\n\n::: {.cell hash='03-functions_cache/html/unnamed-chunk-4_fbc38d6e252a2ad8e7517e217d7e8b79'}\n\n```{.r .cell-code}\n# Function definition with default argument\ngreet <- function(name = \"Guest\") {\n  message <- paste(\"Hello,\", name)\n  print(message)\n}\n```\n:::\n\n\n## Function with Variable Arguments\n- In R, functions can accept variable arguments using the `...` notation.\n- Variable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n::: {.cell hash='03-functions_cache/html/unnamed-chunk-5_e55af4d2bdab0c99a8087e96d93562c1'}\n\n```{.r .cell-code}\n# Function definition with variable arguments\ncalculate_sum <- function(...) {\n  numbers <- list(...)\n  total <- sum(numbers)\n  return(total)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}