{
  "hash": "3e7e89daea272eb4dc5379eba8c05589",
  "result": {
    "markdown": "# Loop Functions \n\n## Loop Functions - Apply Family\n- The `apply` family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\n- These functions eliminate the need for explicit looping and can significantly simplify code.\n\n## `apply()`\n- apply() function applies a function over margins of an array or matrix.\n- Syntax: apply(X, MARGIN, FUN, ...)\n- X: The input data structure (array or matrix).\n- MARGIN: The dimension or dimensions along which the function should be applied.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='05-loop-functions_cache/html/unnamed-chunk-1_1b99fd4862c044e9fdcbe1608bdbfc89'}\n\n```{.r .cell-code}\n# Apply sum function to rows of a matrix\nmat <- matrix(1:9, nrow = 3)\nresult <- apply(mat, 1, sum)\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 15 18\n```\n:::\n:::\n\n\n## `lapply()`\n- lapply() function applies a function to each element of a list or vector.\n- Syntax: lapply(X, FUN, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='05-loop-functions_cache/html/unnamed-chunk-2_4a63d3da893500dbad4fcc543aa9ec41'}\n\n```{.r .cell-code}\n# Apply sqrt function to each element of a list\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- lapply(numbers, sqrt)\n```\n:::\n\n\n## `sapply()`\n- sapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\n- Syntax: sapply(X, FUN, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='05-loop-functions_cache/html/unnamed-chunk-3_ba2f17808db1a99a8ec0cf845786dc71'}\n\n```{.r .cell-code}\n# Apply sum function to each element of a list and simplify the result\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- sapply(numbers, sum)\n```\n:::\n\n\n## `vapply()`\n- vapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\n- Syntax: vapply(X, FUN, FUN.VALUE, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- FUN.VALUE: The desired output type and shape.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='05-loop-functions_cache/html/unnamed-chunk-4_8d85d505b4e493a30f04a692732768cd'}\n\n```{.r .cell-code}\n# Apply sum function to each element of a list and specify the output type\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- vapply(numbers, sum, FUN.VALUE = numeric(1))\n```\n:::\n\n\n## `mapply()`\n- mapply() function applies a function to multiple vectors or lists in parallel.\n- Syntax: mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE)\n- FUN: The function to be applied.\n- ...: Multiple input vectors or lists.\n- MoreArgs: Additional arguments to be passed to the function.\n- SIMPLIFY: Whether to simplify the result if possible.\n\n\n::: {.cell hash='05-loop-functions_cache/html/unnamed-chunk-5_0d89b6a82a74df6fc59e2da7ce496938'}\n\n```{.r .cell-code}\n# Apply a function to multiple vectors in parallel\nvector1 <- c(1, 2, 3)\nvector2 <- c(4, 5, 10)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}