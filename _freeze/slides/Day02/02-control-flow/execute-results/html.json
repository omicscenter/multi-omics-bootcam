{
  "hash": "f298a9f0d685ebfa1b4112733669631e",
  "result": {
    "markdown": "# Control Flow in R \n\n## Control Flow Structure \n- Control flow refers to the order in which instructions are executed in a program. \n- In R, control flow is managed through various constructs that allow for `conditional` execution, `loop` iterations, and branching. \n- Conditionals - `if`, `if..else`, `if..else..elif`\n- Loops - `for`, `while`, `repeat`\n\n\n## `if` statement\n\nThe `if` statement allows for conditional execution of code blocks.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-1_bdcaade4c41c781923d82446c4610b5c'}\n\n```{.r .cell-code}\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}\n```\n:::\n\n\n## `if` statement\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-2_4fde46d234dbb51e973b70ce41bf28d8'}\n\n```{.r .cell-code}\n# example \nx <- 5\n\nif (x > 0) {\n  print(\"x is positive.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is positive.\"\n```\n:::\n:::\n\n\n* The variable `x` is assigned a value of `5`.\n* The `if` statement checks if `x` is greater than `0`.\n* Since the condition is `TRUE` (5 is greater than 0), the code block inside the curly braces is executed.\n* Result: The message `\"x is positive.\"` is printed.\n\n\n## `if..else` statement\nThe if-else statement allows you to execute different code blocks based on a condition.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-3_39e162a8e547f19dc3d37191d43d7deb'}\n\n```{.r .cell-code}\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}\n```\n:::\n\n\n## `if..else` statement\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-4_dc48623b12d8a5b01ab249178adfab29'}\n\n```{.r .cell-code}\n# example \nx <- -2\n\nif (x > 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is negative.\"\n```\n:::\n:::\n\n\n* The variable `x` is assigned a value of `-2`.\n* The `if` statement checks if `x` is greater than 0.\n* Since the condition is `FALSE` (-2 is not greater than 0), the code block inside the else clause is executed.\n* Result: The message `\"x is negative.\"` is printed.\n\n\n\n## `if..else if..else` statement \n\nThe if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-5_080844060821be1b50ee7f61c8213756'}\n\n```{.r .cell-code}\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}\n```\n:::\n\n\n## `if..else if..else` statement \n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-6_cb607aba3c86a33804a864a81f35e9b7'}\n\n```{.r .cell-code}\n# example \nx <- 0\n\nif (x > 0) {\n  print(\"x is positive.\")\n} else if (x < 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is zero.\"\n```\n:::\n:::\n\n\n* The variable `x` is assigned a value of` 0`.\n* The `if` statement checks if x is greater than 0, then if it is less than 0.\n* Since none of the conditions are `TRUE`, the code block inside the else clause is executed.\n* Result: The message `\"x is zero.\"` is printed.\n\n\n\n## `ifelse` function\n\n* The `ifelse()` function in R is a vectorized version of the if-else statement. \n* It allows you to perform conditional operations on elements of a vector or data frame based on a specified condition. \n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-7_445c83e180c7db3bd15bf98aaf3e50b2'}\n\n```{.r .cell-code}\n# Syntax \nifelse(condition, true_value, false_value)\n```\n:::\n\n\n## `ifelse` function\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-8_21f1326a44d1a6db1d521c2f46ab087d'}\n\n```{.r .cell-code}\n# example \nx <- c(1, 2, 3, 4, 5)\nresult <- ifelse(x > 3, \"Greater\", \"Less or equal\")\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Less or equal\" \"Less or equal\" \"Less or equal\" \"Greater\"      \n[5] \"Greater\"      \n```\n:::\n:::\n\n\n* The vector x contains numeric values.\n* The ifelse function checks if each element of x is greater than 3.\n* For elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value \"Greater\". Otherwise, it is assigned the value \"Less or equal\".\n* Result: The result vector will be c(\"Less or equal\", \"Less or equal\", \"Less or equal\", \"Greater\", \"Greater\").\n\n## Handling Missing Values with `ifelse()`\nThe ifelse function can handle missing values `(NA)` in the input vectors.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-9_0f9743b9a63ad31a65a314a855ae1cb3'}\n\n```{.r .cell-code}\nx <- c(1, 2, NA, 4, 5)\n\nresult <- ifelse(is.na(x), \"Missing\", ifelse(x > 3, \"Greater\", \"Less or equal\"))\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Less or equal\" \"Less or equal\" \"Missing\"       \"Greater\"      \n[5] \"Greater\"      \n```\n:::\n:::\n\n\n* The vector x contains numeric values, including a missing value (NA).\n* The first ifelse checks if each element of x is missing (NA).\n* If TRUE, the element is assigned the value \"Missing\".\n* If FALSE, the second ifelse checks if the element is greater than 3, assigning \"Greater\" or \"Less or equal\" accordingly.\n* Result: The result vector will be c(\"Less or equal\", \"Less or equal\", \"Missing\", \"Greater\", \"Greater\").\n\n\n## `ifelse()` with Data Frames\nThe `ifelse()` function can be applied to specific columns of a data frame.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-10_c3307fd4f1e541b30fdb79d109d11253'}\n\n```{.r .cell-code}\ndf <- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category <- ifelse(df$Age >= 30, \"Senior\", \"Junior\")\n```\n:::\n\n* The data frame df contains columns for names and ages.\n* The ifelse function is applied to the Age column.\n* If the age is greater than or equal to 30, the Category column is assigned the value \"Senior\". Otherwise, it is assigned \"Junior\".\n* Result: The df data frame will have an additional column Category with values c(\"Junior\", \"Junior\", \"Senior\").\n\n## `for` loop \nThe `for` loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-11_d49e488d92ba8fe66ff2cf98cf69ae14'}\n\n```{.r .cell-code}\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}\n```\n:::\n\n\n## `for` loop Example \n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-12_5268079f204401533c1f3318f07a6806'}\n\n```{.r .cell-code}\n# Example \nfor (i in 1:5) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n* The for loop iterates over the sequence 1:5.\n* In each iteration, the loop variable i takes the value of the current element in the sequence.\n* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\n* Result: The numbers 1 to 5 are printed.\n\n## Using `for` Loop with Vector\nThe `for` loop can be used to iterate over elements of a vector.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-13_9060b31c5bb233916e20f2a0a35dae63'}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple\"\n[1] \"banana\"\n[1] \"orange\"\n```\n:::\n:::\n\n\n* The vector fruits contains strings representing different fruits.\n* The for loop iterates over each element of the fruits vector.\n* In each iteration, the loop variable fruit takes the value of the current element.\n* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\n* Result: The strings \"apple\", \"banana\", and \"orange\" are printed.\n\n\n## Controlling `for` Loop with Conditions\nYou can control the behavior of a `for` loop using conditional statements.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-14_350c42dd89bf7eb13d81742fc695405e'}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n```\n:::\n:::\n\n\n## Controlling `for` Loop with Conditions\n* The for loop iterates over the sequence 1:10.\n* In each iteration, the loop variable i takes the value of the current element.\n* The if statement checks if i is even (divisible by 2) using the modulo operator (%%).\n* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\n* Result: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n\n## `while` loop \nThe `while` loop in R allows for executing a block of code repeatedly as long as a specified condition is `TRUE.`\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-15_94fd23a417121c7ae652e598b0b76922'}\n\n```{.r .cell-code}\nwhile (condition) {\n  # Code block to be executed\n}\n```\n:::\n\n\n## `while` Loop Example\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-16_f2c0a996e9cdfed903cc4c3d674f9252'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 5) {\n  print(i)\n  i <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n* The variable i is initially set to 1.\n* The while loop continues executing as long as i is less than or equal to 5.\n* In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\n* After printing, i is incremented by 1 using the assignment statement i <- i + 1.\n* The loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\n* Result: The numbers 1 to 5 are printed.\n\n## Using `while` Loop with Conditional Statements\n\nYou can use conditional statements within a while loop to control its behavior.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-17_126643cae75ee62bebd3e86c0da5fc15'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n```\n:::\n:::\n\n\n## Using `while` Loop with Conditional Statements\n\n* The variable i is initially set to 1.\n* The while loop continues executing as long as i is less than or equal to 10.\n* In each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\n* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\n* After executing the code block, i is incremented by 1 using the assignment statement i <- i + 1.\n* Result: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n##  Controlling `while` Loop with External Conditions\n\nYou can control the behavior of a `while` loop by modifying external conditions within the loop.\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-18_de86dceabf56647f7f55125c5abd6d0e'}\n\n```{.r .cell-code}\nx <- 10\n\nwhile (x > 0) {\n  print(x)\n  x <- x - 2\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n[1] 8\n[1] 6\n[1] 4\n[1] 2\n```\n:::\n:::\n\n\n##  Controlling `while` Loop with External Conditions\n\n- The variable x is initially set to 10.\n- The while loop continues executing as long as x is greater than 0.\n- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\n- After printing, x is decremented by 2 using the assignment statement x <- x - 2.\n- The loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\n- Result: The numbers 10, 8, 6, 4, and 2 are printed.\n\n## `break` statement\n* The break statement in R is used to exit a loop prematurely.\n* It is typically used within conditional statements to terminate the loop based on a specific condition.\n\n## `break` Statement Example\n\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-19_6c3c25ee09f3ab4c10e29e0d6d043f04'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n## `break` Statement Example\n- The variable i is initially set to 1.\n- The while loop continues executing as long as i is less than or equal to 10.\n- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\n- The if statement checks if i is equal to 5.\n- If the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\n- After the break statement, the remaining code within the loop is not executed.\n- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5.\n\n\n## `next` statement\n- The next statement in R is used to skip the current iteration of a loop and move to the next iteration.\n- It is typically used within conditional statements to control the flow of the loop based on a specific condition.\n\n## `next` Statement Example\n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-20_620c1b943343d04106b1542d447387ca'}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n* The for loop iterates over the values 1 to 5.\n* In each iteration, the code block inside the curly braces is executed.\n* The if statement checks if i is equal to 3.\n* If the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\n* If the condition is FALSE, the code block continues executing, and the value of i is printed.\n* Result: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped.\n\n\n## `repeat` loop\n- The repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\n- It provides a way to create an infinite loop that can be terminated using control flow statements.\n\n## `repeat` loop Example \n\n::: {.cell hash='02-control-flow_cache/html/unnamed-chunk-21_8201d6d3806178d8f418be5fa8cb32d7'}\n\n```{.r .cell-code}\ni <- 1\n\nrepeat {\n  print(i)\n  i <- i + 1\n  if (i > 5) {\n    break\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n## `repeat` loop Example \n- The variable i is initially set to 1.\n- The repeat loop continues executing the code block inside the curly braces indefinitely.\n- In each iteration, the value of i is printed.\n- The variable i is incremented by 1 using the assignment statement i <- i + 1.\n- The if statement checks if i is greater than 5.\n- If the condition is TRUE, the break statement is encountered, causing the loop to terminate.\n- After the break statement, the program flow continues with the next statement after the loop.\n- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}