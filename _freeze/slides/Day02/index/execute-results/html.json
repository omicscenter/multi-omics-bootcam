{
  "hash": "e53af147c66b76f516a7f6fd835bfc09",
  "result": {
    "markdown": "---\ntitle: \"R for Bioinformatics\"\nauthor:\n  - name: Md. Jubayer Hossain\n    orcid: 0000-0001-9323-4997\n    url: https://hossainlab.github.io/\n    affiliations: \n    - CHIRAL Bangladesh\n    - Founder & Management Lead \ndate: last-modified\ndate-format: \"[Last Updated on] MMMM, YYYY\"\nfooter: \"R for Bioinformatics  | &copy; 2023 Md. Jubayer Hossain\"\neditor: source\nformat: \n  revealjs: \n    logo: images/chirallogo.jpg \n    css: ../slides.scss\n    theme: ../slides.scss\n    transition: fade\n    slide-number: true\n    chalkboard: false\nexecute:\n  echo: true\n  output: asis\n  freeze: auto\ncache: true\n---\n\n## Agenda\n\n-   Data Structurs in R\n-   Subsetting R Objects\n-   Control Flow in R\n-   Functions\n-   Dates and Times\n-   Loop Functions\n-   Simulations - Generating Random Numbers\n\n## What is Data Structure?\n\n-   Data structures are ways of organizing and storing data in a computer system.\n-   They define the format, organization, and relationship between data elements.\n-   Data structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\n-   They provide a foundation for building algorithms and designing efficient programs.\n\n## Data Structures in R\n\n-   Vectors\n-   Matrix\n-   Lists\n-   Data Frame\n-   Factor\n\n## Types of Data Structures in R\n\n-   One-Dimensional Data Structures\n    -   One-dimensional data structures in R are used to store and manipulate data along a single dimension.\n    -   The main one-dimensional data structure in R is the `vector.`\n-   Two-Dimensional Data Structures\n    -   Two-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\n    -   The main two-dimensional data structures in R are `matrices` and `data frames`.\n\n## Strings\n\n-   A string is a sequence of characters. For example, `\"Programming\"` is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\n\n-   In R, we represent strings using quotation marks (double quotes, \" \" or single quotes, ' '). For example,\n\n\n::: {.cell hash='index_cache/html/str-1_e5806f5591c45ea7df604c6d033317e9'}\n\n```{.r .cell-code}\n# string value using single quotes\n'Hello' \n```\n\n[1] \"Hello\"\n\n```{.r .cell-code}\n# string value using double quotes \n\"Hello\" \n```\n\n[1] \"Hello\"\n:::\n\n\n## String Operations in R\n\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\n-   Find the length of a string\n-   Join two strings\n-   Compare two strings\n-   Change the string case\n\n## Find Length of String\n\nWe use the `nchar()` method to find the length of a string. For example,\n\n\n::: {.cell hash='index_cache/html/str-2_7afcc044d3cff0596ba19e78a1ff06ef'}\n\n```{.r .cell-code}\nmessage1 <- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n```\n\n[1] 17\n:::\n\n\nHere, `nchar()` returns the number of characters present inside the string.\n\n## Join Strings Together\n\nIn R, we can use the `paste()` function to join two or more strings together. For example,\n\n\n::: {.cell hash='index_cache/html/str-3_1187e9fec6e4c0de92a414bde049470d'}\n\n```{.r .cell-code}\nmessage1 <- \"CHIRAL\"\nmessage2 <- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n```\n\n[1] \"CHIRAL Bangladesh\"\n:::\n\n\nHere, we have used the `paste()` function to join two strings: `message1` and `message2`.\n\n## Compare Two Strings in R Programming\n\nWe use the `==` operator to compare two strings. If two strings are equal, the operator returns `TRUE.` Otherwise, it returns `FALSE.` For example,\n\n\n::: {.cell hash='index_cache/html/str-4_e0b240de7c9cff2793f0124cbe592024'}\n\n```{.r .cell-code}\nmessage1 <- \"Hello, World!\"\nmessage2 <- \"Hi, Bangladesh!\"\nmessage3 <- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n```\n\n[1] FALSE\n\n```{.r .cell-code}\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n```\n\n[1] FALSE\n:::\n\n\n## Change Case of R String\n\nIn R, we can change the case of a string using\n\n-   `toupper()` - convert string to uppercase\n-   `tolower()` - convert string to lowercase\n\n\n::: {.cell hash='index_cache/html/str-5_22ca6ed710ff87cd587118d2a5f8d534'}\n\n```{.r .cell-code}\nmessage <- \"R Programming\"\n\n# change string to uppercase\nmessage_upper <- toupper(message)\nmessage_upper\n```\n\n[1] \"R PROGRAMMING\"\n\n```{.r .cell-code}\n# change string to lowercase\nmessage_lower <- tolower(message)\nmessage_lower\n```\n\n[1] \"r programming\"\n:::\n\n\n## Vector\n\n-   Vector is a basic data structure in R.\n-   It contains element of the same type.\n-   The data types can be logical, integer, double, character, and complex.\n-   A vector's type can be checked with the `typeof()` function.\n\n## Creating Vectors - Using the c() Function\n\nThe `c()` function is used to concatenate or combine elements into a vector.\n\n\n::: {.cell hash='index_cache/html/vector-1_89f0a822063950b2aaaf17629fa725f3'}\n\n```{.r .cell-code}\n# Numeric vector\nnumeric_vector <- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector <- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector <- c(TRUE, FALSE, TRUE)\n```\n:::\n\n\n## Creating Vectors - Using the `:` Operator\n\nThe `:` operator generates a sequence of numbers from the starting value to the ending value.\n\n\n::: {.cell hash='index_cache/html/vector-2_3bbb0f50f5a9e2059bf1ad3bf821bbc1'}\n\n```{.r .cell-code}\n# Numeric sequence vector\nnumeric_sequence <- 1:10\n```\n:::\n\n\n## Creating Vectors - Using Sequence Generation Functions\n\nR provides functions like `seq()`, `rep()`, and `seq_len()` to generate sequences of numbers.\n\n\n::: {.cell hash='index_cache/html/vector-3_fc24ba1085b485faf70a8a97a4cefa00'}\n\n```{.r .cell-code}\n# Numeric sequence vector using seq()\nnumeric_sequence <- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values <- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence <- seq_len(10)\n```\n:::\n\n\n## Creating Vectors - Using Vectorized Operations\n\nVectors can be created by performing operations on existing vectors or values.\n\n\n::: {.cell hash='index_cache/html/vector-4_e05984e8e38f8afe20cc214eddff5b12'}\n\n```{.r .cell-code}\n# Vector created using vectorized operation\nnew_vector <- numeric_vector * 2\n```\n:::\n\n\n## Creating Vectors - Mixing Objects\n\n\n::: {.cell hash='index_cache/html/vector-5_618739aecbcbd0e7ddc02233a257ee81'}\n\n```{.r .cell-code}\n# Character \nx <- c(1.7, \"a\")\n# Numeric \ny <- c(TRUE, 2)\n# Character \nz <- c(\"a\", TRUE)\n```\n:::\n\n\n## Matrix\n\n-   Matrix is a two dimensional data structure in R programming.\n-   Matrix is similar to vector but additionally contains the dimension attributes.\n-   All attributes of an object can be checked by `attributes()` function.\n-   Dimension can be checked by directly with the `dim()`function. We can check if a variable is a matrix or not with the `class()` function.\n\n## Creatinig Matrix\n\n-   Matrix can be created using the `matrix()` function. Here's the general syntax:\n\n\n::: {.cell hash='index_cache/html/mat-1_ac8037a9c54892f8b4659713d88a4423'}\n\n```{.r .cell-code}\nmatrix(data, nrow, ncol, byrow, dimnames)\n```\n:::\n\n\n-   `data:` The data elements used to fill the matrix. It can be a vector or a combination of vectors.\n-   `nrow:` The number of rows in the matrix.\n-   `ncol:` The number of columns in the matrix.\n-   `byrow:` A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\n-   `dimnames:` Optional names for the rows and columns of the matrix.\n\n## Creatinig Matrix\n\n\n::: {.cell hash='index_cache/html/mat-2_e37f7d0da59ad6408bb6110b7a178336'}\n\n```{.r .cell-code}\n# Create a matrix using matrix function \nmat1 <- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 <- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 <- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 <- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n```\n:::\n\n\n## Matrix Properties\n\n\n::: {.cell hash='index_cache/html/mat-3_6e4fd99f7a849bd34e2832ff15c8856f'}\n\n```{.r .cell-code}\n# Create a matrix using matrix function \nmat <- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n```\n\n[1] \"A\" \"B\" \"C\"\n\n```{.r .cell-code}\n# Row Names \nrownames(mat)\n```\n\n[1] \"X\" \"Y\" \"Z\"\n\n```{.r .cell-code}\n# Dimension \ndim(mat)\n```\n\n[1] 3 3\n:::\n\n\n## List\n\n-   List is a data structure having components of mixed data types.\n-   A vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\n-   We can check if it's a list with `typeof()` function and find its length using `length()` function.\n\n## Creating List\n\nList can be created using the list() function. Here's the general syntax:\n\n\n::: {.cell hash='index_cache/html/list-1_dd1be1601627ea32564a9d4dd7b6f504'}\n\n```{.r .cell-code}\nlist(..., recursive = FALSE)\n```\n:::\n\n\n-   `...`: The elements to be included in the list, separated by commas.\n-   `recursive`: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default).\n\n## Creating List\n\n\n::: {.cell hash='index_cache/html/list-2_b2fbb82d2671ad88277ba34e7968a04f'}\n\n```{.r .cell-code}\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list <- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)\n```\n:::\n\n\n## Factors\n\n-   In R, factors are used to represent categorical or discrete data with predefined levels or categories.\n-   Factors are useful when working with data that has distinct categories or when performing statistical analysis.\n-   Factors are used to represent categorical data and can be ordered and unordered.\n\n## Creating Factors\n\nFactors are created using the factor() function in R. Here's the general syntax:\n\n\n::: {.cell hash='index_cache/html/factor-1_ab3049073672dfcb01a223cb68e476c7'}\n\n```{.r .cell-code}\nfactor(x, levels, labels, ordered = FALSE)\n```\n:::\n\n\n-   `x`: A vector or column of data that represents the categorical variable.\n-   `levels`: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\n-   `labels`: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\n-   `ordered`: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default).\n\n## Creating Factors\n\n\n::: {.cell hash='index_cache/html/factor-2_67e3afb8e2fe6f421d58b6ed0efa9ad0'}\n\n```{.r .cell-code}\n# Create a factor using factor() function \nf <- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n```\n\n[1] \"no\"  \"yes\"\n:::\n\n\n## Data Frame\n\n-   In R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\n-   It consists of rows and columns, where each column can have a different data type.\n-   Data frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\n-   Data frames can be created using the `data.frame()` function or by importing data from external sources.\n\n## Create Data Frame\n\nData frames can be created using the data.frame() function or by importing data from external sources. Here's an example of creating a data frame in R:\n\n\n::: {.cell hash='index_cache/html/df_65dd1cfc2fd4fbb4d7013551bae4176c'}\n\n```{.r .cell-code}\n# Create a data frame\ndf <- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)\n```\n:::\n\n\n## Data Conversion Functions in R\n\n-   Conversion functions in R help transform data between different types and formats.\n-   `as.character()`, `as.numeric()`, `as.integer()`, `as.logical()`, and `as.factor()` are commonly used conversion functions.\n-   These functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types.\n\n## `as.character()`\n\n-   as.character() function converts an object to a character string representation.\n-   Syntax: as.character(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_1ccc14aac1d4c80dc05b104a4ded07fc'}\n\n```{.r .cell-code}\n# Convert numeric values to character strings\nnumbers <- c(1, 2, 3)\ncharacter_numbers <- as.character(numbers)\n```\n:::\n\n\n## `as.numeric()`\n\n-   as.numeric() function converts an object to numeric (floating-point) values.\n-   Syntax: as.numeric(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_772fee09bb144e634419cbac442da1df'}\n\n```{.r .cell-code}\n# Convert character strings to numeric values\ncharacter_numbers <- c(\"1\", \"2\", \"3\")\nnumeric_numbers <- as.numeric(character_numbers)\n```\n:::\n\n\n## `as.integer()`\n\n-   as.integer() function converts an object to integer values.\n-   Syntax: as.integer(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_a756071957e1a21e6e25ef5153b5f651'}\n\n```{.r .cell-code}\n# Convert numeric values to integer values\nnumbers <- c(1.5, 2.7, 3.9)\ninteger_numbers <- as.integer(numbers)\n```\n:::\n\n\n## `as.logical()`\n\n-   as.logical() function converts an object to logical (boolean) values.\n-   Syntax: as.logical(x)\n-   x: The object to be converted.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_5b9cbe82ee6f09c47dba0671a2aa3c52'}\n\n```{.r .cell-code}\n# Convert numeric values to logical values\nnumbers <- c(0, 1, 2)\nlogical_values <- as.logical(numbers)\n```\n:::\n\n\n## `as.factor()`\n\n-   as.factor() function converts an object to a factor, which represents categorical data.\n-   Syntax: as.factor(x)\n-   x: The object to be converted.\n\n# Subsetting R Objects\n\n## Subsetting a Vector\n\n-   Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\n-   It is done using square brackets `[ ]` in R.\n-   Subsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\n-   Subsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition.\n\n## Subsetting Vector Elements by Index\n\n\n::: {.cell hash='index_cache/html/subset-vector-1_ecf810c0dcd8ff4236f124f809796af0'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[3]\n```\n\n[1] 30\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `vector[3]` retrieves the third element, which is `30`.\n-   `Result`: The third element (30) is displayed.\n\n## Subsetting Vector Elements by Logical Condition\n\n\n::: {.cell hash='index_cache/html/subset-vector-2_ce45896c461b77e41bb44f23b15d009f'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[vector > 30]\n```\n\n[1] 40 50\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `vector > 30` evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\n-   `vector[vector > 30]` retrieves elements where the condition is TRUE.\n-   `Result`: Elements greater than 30 (40, 50) are displayed.\n\n## Subsetting Vector Elements Using `:` Operator\n\nThe `:` operator allows you to specify a range of elements to subset from a vector.\n\n\n::: {.cell hash='index_cache/html/subset-vector-3_54b20528aac5a4abf7d5af33934e3b69'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[2:4]\n```\n\n[1] 20 30 40\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `2:4` creates a sequence of indices from 2 to 4.\n-   `vector[2:4]` retrieves elements at indices 2, 3, and 4.\n-   `Result`: Elements 20, 30, and 40 are displayed.\n\n## Subsetting Vector Elements Using `c()` Function\n\nThe `c()` function allows you to create a vector of specific indices to subset from a vector.\n\n\n::: {.cell hash='index_cache/html/subset-vector-4_ee257b792d836aa5b73bb45e3c7523fb'}\n\n```{.r .cell-code}\nvector <- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n```\n\n[1] 10 30 50\n:::\n\n\n-   The vector contains elements: 10, 20, 30, 40, 50.\n-   `c(1, 3, 5)` creates a vector of indices: 1, 3, 5.\n-   `vector[c(1, 3, 5)]` retrieves elements at indices 1, 3, and 5.\n-   `Result`: Elements 10, 30, and 50 are displayed.\n\n## Subsetting List\n\n-   Subsetting a list allows you to extract specific elements or subsets from a list in R.\n-   It is done using double square brackets `[[ ]]` or single square brackets`[ ]` in R.\n-   Subsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\n-   Subsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\n-   Subsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets `[ ]`.\n\n## Subsetting List Elements by Index\n\n\n::: {.cell hash='index_cache/html/subset-list-1_53633043c3bb6bf20b8940ff65186945'}\n\n```{.r .cell-code}\nmy_list <- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n```\n\n[1] \"banana\"\n:::\n\n\n-   The list contains elements: \"apple\", \"banana\", \"orange\".\n-   `my_list[[2]]` retrieves the second element of the list, which is \"banana\".\n-   `Result`: The second element (\"banana\") is displayed.\n\n## Subsetting List Elements by Name\n\n\n::: {.cell hash='index_cache/html/subset-list-2_c108bbcbe4df1da898642ba9afdc857d'}\n\n```{.r .cell-code}\nmy_list <- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n```\n\n[1] \"orange\"\n:::\n\n\n-   The list contains named elements: fruit1, fruit2, fruit3.\n-   `my_list$fruit3` retrieves the element with the name \"fruit3\", which is \"orange\".\n-   `Result`: The element \"orange\" is displayed.\n\n## Subsetting a Subset of List Elements\n\n\n::: {.cell hash='index_cache/html/subset-list-3_baaafe33d9c099341524fb95b26cf9d5'}\n\n```{.r .cell-code}\nmy_list <- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n```\n\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n:::\n\n\n-   The list contains elements: \"apple\", \"banana\", \"orange\".\n-   `my_list[2:3]` retrieves the second and third elements of the list.\n-   `Result`: The second and third elements (\"banana\", \"orange\") are displayed.\n\n## Subsetting Matrix\n\n-   Subsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\n-   It is done using square brackets `[ ]` in combination with row and column indices.\n-   Subsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\n-   Subsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\n-   Subsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix.\n\n## Subsetting Rows\n\n\n::: {.cell hash='index_cache/html/subset-mat-1_34d35451616a33f1089ebec4d9387d5b'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[1, ]\n```\n\n[1] 1 3 5\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[1, ]` retrieves the first row of the matrix.\n-   `Result`: The first row (1, 2) is displayed.\n\n## Subsetting Columns\n\n\n::: {.cell hash='index_cache/html/subset-mat-2_9e0a198f1053ce9740a1e8de7eef508a'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[, 2]\n```\n\n[1] 3 4\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[, 2]` retrieves the second column of the matrix.\n-   `Result`: The second column (2, 4) is displayed.\n\n## Subsetting Elements\n\n\n::: {.cell hash='index_cache/html/subset-mat-3_8199318422b9581bda3a591208797834'}\n\n```{.r .cell-code}\nmatrix <- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n```\n\n[1] 2\n:::\n\n\n-   The matrix contains elements: 1, 2, 3, 4, 5, 6.\n-   `matrix[2, 1]`retrieves the element at the second row and first column.\n-   `Result`: The element at the second row and first column (3) is displayed.\n\n# Control Flow in R \n\n## Control Flow Structure \n- Control flow refers to the order in which instructions are executed in a program. \n- In R, control flow is managed through various constructs that allow for `conditional` execution, `loop` iterations, and branching. \n- Conditionals - `if`, `if..else`, `if..else..elif`\n- Loops - `for`, `while`, `repeat`\n\n\n## `if` statement\n\nThe `if` statement allows for conditional execution of code blocks.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_770acf1554590398bce938165ffb9fed'}\n\n```{.r .cell-code}\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}\n```\n:::\n\n\n## `if` statement\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_09fcf5c532e9f0e46f8fea41c142c6c5'}\n\n```{.r .cell-code}\n# example \nx <- 5\n\nif (x > 0) {\n  print(\"x is positive.\")\n}\n```\n\n[1] \"x is positive.\"\n:::\n\n\n* The variable `x` is assigned a value of `5`.\n* The `if` statement checks if `x` is greater than `0`.\n* Since the condition is `TRUE` (5 is greater than 0), the code block inside the curly braces is executed.\n* Result: The message `\"x is positive.\"` is printed.\n\n\n## `if..else` statement\nThe if-else statement allows you to execute different code blocks based on a condition.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_1d0c5c21dc1691e45bced82ef3e3e9a0'}\n\n```{.r .cell-code}\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}\n```\n:::\n\n\n## `if..else` statement\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_1509f35f569e38668578f7f8970ea125'}\n\n```{.r .cell-code}\n# example \nx <- -2\n\nif (x > 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n```\n\n[1] \"x is negative.\"\n:::\n\n\n* The variable `x` is assigned a value of `-2`.\n* The `if` statement checks if `x` is greater than 0.\n* Since the condition is `FALSE` (-2 is not greater than 0), the code block inside the else clause is executed.\n* Result: The message `\"x is negative.\"` is printed.\n\n\n\n## `if..else if..else` statement \n\nThe if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_acb9a2e01bf90de0079f7d49376e9240'}\n\n```{.r .cell-code}\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}\n```\n:::\n\n\n## `if..else if..else` statement \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_0d5fd0bbc175ecc9649fdc91288be561'}\n\n```{.r .cell-code}\n# example \nx <- 0\n\nif (x > 0) {\n  print(\"x is positive.\")\n} else if (x < 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n```\n\n[1] \"x is zero.\"\n:::\n\n\n* The variable `x` is assigned a value of` 0`.\n* The `if` statement checks if x is greater than 0, then if it is less than 0.\n* Since none of the conditions are `TRUE`, the code block inside the else clause is executed.\n* Result: The message `\"x is zero.\"` is printed.\n\n\n\n## `ifelse` function\n\n* The `ifelse()` function in R is a vectorized version of the if-else statement. \n* It allows you to perform conditional operations on elements of a vector or data frame based on a specified condition. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_304dd93bf13a77ee02bfdc303911de21'}\n\n```{.r .cell-code}\n# Syntax \nifelse(condition, true_value, false_value)\n```\n:::\n\n\n## `ifelse` function\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_a2d654cc1d16b19de8eab79afd9b222e'}\n\n```{.r .cell-code}\n# example \nx <- c(1, 2, 3, 4, 5)\nresult <- ifelse(x > 3, \"Greater\", \"Less or equal\")\nresult\n```\n\n[1] \"Less or equal\" \"Less or equal\" \"Less or equal\" \"Greater\"      \n[5] \"Greater\"      \n:::\n\n\n* The vector x contains numeric values.\n* The ifelse function checks if each element of x is greater than 3.\n* For elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value \"Greater\". Otherwise, it is assigned the value \"Less or equal\".\n* Result: The result vector will be c(\"Less or equal\", \"Less or equal\", \"Less or equal\", \"Greater\", \"Greater\").\n\n## Handling Missing Values with `ifelse()`\nThe ifelse function can handle missing values `(NA)` in the input vectors.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_5d35f0afa770767de3b3c269cb2c13a7'}\n\n```{.r .cell-code}\nx <- c(1, 2, NA, 4, 5)\n\nresult <- ifelse(is.na(x), \"Missing\", ifelse(x > 3, \"Greater\", \"Less or equal\"))\nresult\n```\n\n[1] \"Less or equal\" \"Less or equal\" \"Missing\"       \"Greater\"      \n[5] \"Greater\"      \n:::\n\n\n* The vector x contains numeric values, including a missing value (NA).\n* The first ifelse checks if each element of x is missing (NA).\n* If TRUE, the element is assigned the value \"Missing\".\n* If FALSE, the second ifelse checks if the element is greater than 3, assigning \"Greater\" or \"Less or equal\" accordingly.\n* Result: The result vector will be c(\"Less or equal\", \"Less or equal\", \"Missing\", \"Greater\", \"Greater\").\n\n\n## `ifelse()` with Data Frames\nThe `ifelse()` function can be applied to specific columns of a data frame.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_3a473a21fc3cbbb79f60ce3ef4266a56'}\n\n```{.r .cell-code}\ndf <- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category <- ifelse(df$Age >= 30, \"Senior\", \"Junior\")\n```\n:::\n\n* The data frame df contains columns for names and ages.\n* The ifelse function is applied to the Age column.\n* If the age is greater than or equal to 30, the Category column is assigned the value \"Senior\". Otherwise, it is assigned \"Junior\".\n* Result: The df data frame will have an additional column Category with values c(\"Junior\", \"Junior\", \"Senior\").\n\n## `for` loop \nThe `for` loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_a4111fb1e83e98b976b9623d23c805d8'}\n\n```{.r .cell-code}\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}\n```\n:::\n\n\n## `for` loop Example \n\n::: {.cell hash='index_cache/html/unnamed-chunk-16_d46e46650a604a1820545ffaf93d9a56'}\n\n```{.r .cell-code}\n# Example \nfor (i in 1:5) {\n  print(i)\n}\n```\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n:::\n\n\n* The for loop iterates over the sequence 1:5.\n* In each iteration, the loop variable i takes the value of the current element in the sequence.\n* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\n* Result: The numbers 1 to 5 are printed.\n\n## Using `for` Loop with Vector\nThe `for` loop can be used to iterate over elements of a vector.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_44f3d5ecd6559400d68e298e29b871bb'}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n```\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"orange\"\n:::\n\n\n* The vector fruits contains strings representing different fruits.\n* The for loop iterates over each element of the fruits vector.\n* In each iteration, the loop variable fruit takes the value of the current element.\n* The code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\n* Result: The strings \"apple\", \"banana\", and \"orange\" are printed.\n\n\n## Controlling `for` Loop with Conditions\nYou can control the behavior of a `for` loop using conditional statements.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_c22620bf3dcd7573336ef852bc410eb3'}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n```\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n:::\n\n\n## Controlling `for` Loop with Conditions\n* The for loop iterates over the sequence 1:10.\n* In each iteration, the loop variable i takes the value of the current element.\n* The if statement checks if i is even (divisible by 2) using the modulo operator (%%).\n* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\n* Result: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n\n## `while` loop \nThe `while` loop in R allows for executing a block of code repeatedly as long as a specified condition is `TRUE.`\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-19_93e6292cf7553179ed55b2f23b8cfb82'}\n\n```{.r .cell-code}\nwhile (condition) {\n  # Code block to be executed\n}\n```\n:::\n\n\n## `while` Loop Example\n\n::: {.cell hash='index_cache/html/unnamed-chunk-20_f85ec46582143f031f7e2674041a3a15'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 5) {\n  print(i)\n  i <- i + 1\n}\n```\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n:::\n\n\n* The variable i is initially set to 1.\n* The while loop continues executing as long as i is less than or equal to 5.\n* In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\n* After printing, i is incremented by 1 using the assignment statement i <- i + 1.\n* The loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\n* Result: The numbers 1 to 5 are printed.\n\n## Using `while` Loop with Conditional Statements\n\nYou can use conditional statements within a while loop to control its behavior.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-21_4a0102c12f13a6d74a2ff90e52f3df8c'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i <- i + 1\n}\n```\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n:::\n\n\n## Using `while` Loop with Conditional Statements\n\n* The variable i is initially set to 1.\n* The while loop continues executing as long as i is less than or equal to 10.\n* In each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\n* Based on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\n* After executing the code block, i is incremented by 1 using the assignment statement i <- i + 1.\n* Result: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n##  Controlling `while` Loop with External Conditions\n\nYou can control the behavior of a `while` loop by modifying external conditions within the loop.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-22_a8854d405629afcf7c78d455dd9ed1c6'}\n\n```{.r .cell-code}\nx <- 10\n\nwhile (x > 0) {\n  print(x)\n  x <- x - 2\n}\n```\n\n[1] 10\n[1] 8\n[1] 6\n[1] 4\n[1] 2\n:::\n\n\n##  Controlling `while` Loop with External Conditions\n\n- The variable x is initially set to 10.\n- The while loop continues executing as long as x is greater than 0.\n- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\n- After printing, x is decremented by 2 using the assignment statement x <- x - 2.\n- The loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\n- Result: The numbers 10, 8, 6, 4, and 2 are printed.\n\n## `break` statement\n* The break statement in R is used to exit a loop prematurely.\n* It is typically used within conditional statements to terminate the loop based on a specific condition.\n\n## `break` Statement Example\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-23_960552ab992512076c19d8d45050f694'}\n\n```{.r .cell-code}\ni <- 1\n\nwhile (i <= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i <- i + 1\n}\n```\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n:::\n\n\n## `break` Statement Example\n- The variable i is initially set to 1.\n- The while loop continues executing as long as i is less than or equal to 10.\n- In each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\n- The if statement checks if i is equal to 5.\n- If the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\n- After the break statement, the remaining code within the loop is not executed.\n- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5.\n\n\n## `next` statement\n- The next statement in R is used to skip the current iteration of a loop and move to the next iteration.\n- It is typically used within conditional statements to control the flow of the loop based on a specific condition.\n\n## `next` Statement Example\n\n::: {.cell hash='index_cache/html/unnamed-chunk-24_ff8326d83b967503521ca72bd67f3cf8'}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n```\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n:::\n\n\n* The for loop iterates over the values 1 to 5.\n* In each iteration, the code block inside the curly braces is executed.\n* The if statement checks if i is equal to 3.\n* If the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\n* If the condition is FALSE, the code block continues executing, and the value of i is printed.\n* Result: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped.\n\n\n## `repeat` loop\n- The repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\n- It provides a way to create an infinite loop that can be terminated using control flow statements.\n\n## `repeat` loop Example \n\n::: {.cell hash='index_cache/html/unnamed-chunk-25_ceb82f5845b3da840e154b6c42e6f574'}\n\n```{.r .cell-code}\ni <- 1\n\nrepeat {\n  print(i)\n  i <- i + 1\n  if (i > 5) {\n    break\n  }\n}\n```\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n:::\n\n\n## `repeat` loop Example \n- The variable i is initially set to 1.\n- The repeat loop continues executing the code block inside the curly braces indefinitely.\n- In each iteration, the value of i is printed.\n- The variable i is incremented by 1 using the assignment statement i <- i + 1.\n- The if statement checks if i is greater than 5.\n- If the condition is TRUE, the break statement is encountered, causing the loop to terminate.\n- After the break statement, the program flow continues with the next statement after the loop.\n- Result: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5.\n\n# Functions \n\n## Functions in R\n\n- Functions in R are blocks of reusable code that perform specific tasks.\n- They provide modularity and allow for the organization and reuse of code.\n- Functions can accept input arguments, perform computations, and return output values.\n\n## Types of Functions in R \n- Built-in Functions\n- User-Defined Functions\n- Recursive Functions\n- Anonymous Functions (Lambda Functions)\n- Higher-Order Functions\n\n## Built-in Functions\n- R comes with a wide range of built-in functions that are available for immediate use.\n- Examples: `mean()`, `sum()`, `max()`, `min()`, `sqrt()`, `length()`, etc.\n- These functions are part of the R language and provide basic operations and computations.\n\n## User-Defined Functions\n- Users can define their own functions in R to perform specific tasks.\n- These functions are created using the function keyword followed by the function name, arguments, and function body.\n- Examples: Custom functions created by users to solve specific problems.\n\n## Recursive Functions\n- Recursive functions are functions that call themselves during their execution.\n- They are useful for solving problems that can be broken down into smaller, similar sub-problems.\n- Examples: Functions that calculate factorials, Fibonacci series, or perform tree traversal.\n\n## Anonymous Functions (Lambda Functions)\n- Anonymous functions, also known as lambda functions, are functions without a formal name.\n- They are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\n- Examples: Functions used with higher-order functions like `apply()`, `lapply()`, `sapply()`, etc.\n\n## Higher-Order Functions\n- Higher-order functions take other functions as arguments or return functions as their output.\n- They allow for functional programming paradigms in R.\n- Examples: `apply()` family of functions, `map()` functions from the purrr package.\n\n## Creating a Function\n- To create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\n- The function body is enclosed in curly braces {} and contains the code to be executed.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-26_9038620c1901ad41712fcae608f4ca46'}\n\n```{.r .cell-code}\nf <- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()\n```\n:::\n\n\n## Creating a Function\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-27_01dcfea6703d2df458cc208ca64f082f'}\n\n```{.r .cell-code}\n# Function definition\nmy_function <- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result <- arg1 + arg2\n  return(result)\n}\n```\n:::\n\n\n## Calling a Function\n- To call a function in R, use the function name followed by parentheses, passing the required input arguments.\n- The function executes the code within its body and returns the specified output.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-28_1e61eb7759566eb7c6229535bbabceb6'}\n\n```{.r .cell-code}\n# Function call\nresult <- my_function(3, 5)\nprint(result)\n```\n\n[1] 8\n:::\n\n\n## Function with Default Arguments\n- Functions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\n- Default arguments are defined using the assignment operator (=) within the function definition.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-29_7239cf84acdda9235762be9da0dc64cd'}\n\n```{.r .cell-code}\n# Function definition with default argument\ngreet <- function(name = \"Guest\") {\n  message <- paste(\"Hello,\", name)\n  print(message)\n}\n```\n:::\n\n\n## Function with Variable Arguments\n- In R, functions can accept variable arguments using the `...` notation.\n- Variable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-30_6b7fbe5f5078f67b343d48c3bdb11e39'}\n\n```{.r .cell-code}\n# Function definition with variable arguments\ncalculate_sum <- function(...) {\n  numbers <- list(...)\n  total <- sum(numbers)\n  return(total)\n}\n```\n:::\n\n\n\n# Dates and Times \n## Working with Dates and Times in R\n- Dates and times in R can be represented using different classes and functions.\n- Let's explore some common operations and functions related to dates and times in R.\n\n## Date and Time Classes\n- `Date class`: Represents dates without time information.\n- `POSIXct class`: Represents dates and times with second-level precision.\n- `POSIXlt class`: Represents dates and times as a list of components.\n\n## Creating Dates and Times\n- `as.Date()`: Converts a character or numeric value to a Date object.\n- `as.POSIXct()` or as.`POSIXlt()`: Converts a character or numeric value to a POSIXct or POSIXlt object.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-31_a9f4a0c1f4544dd8c83f48fe7a64d2d9'}\n\n```{.r .cell-code}\ndate <- as.Date(\"2023-07-05\")\ndatetime <- as.POSIXct(\"2023-07-05 10:30:00\")\n```\n:::\n\n\n## Formatting and Parsing Dates and Times\n- `format()`: Converts a date or time object to a character string with a specified format.\n- `strptime()`: Parses a character string representing a date or time into a POSIXlt object, based on a specified format.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-32_4eae4f7d0e8d40110a773acc1f255774'}\n\n```{.r .cell-code}\nformatted_date <- format(date, format = \"%Y/%m/%d\")\nparsed_datetime <- strptime(\"2023-07-05 10:30:00\", format = \"%Y-%m-%d %H:%M:%S\")\n```\n:::\n\n\n## Extracting Components\nFunctions like` year()`, `month()`, `day()`, `hour()`, `minute()`, `second()` can be used to extract specific components from date and time objects.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-33_abeb7767f9c6bfbe300c794cca543d37'}\n\n```{.r .cell-code}\nhour <- parsed_datetime$hour\nminute <- parsed_datetime$min\nsecond <- parsed_datetime$sec\n```\n:::\n\n\n## Arithmetic Operations\n- Dates and times can be manipulated using arithmetic operations.\n- Arithmetic operations on Date objects return new `Date` objects.\n- Arithmetic operations on `POSIXct` objects return new `POSIXct` objects, maintaining the time information.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-34_97cc1f835f8b8b0c8404cd5fbf51159e'}\n\n```{.r .cell-code}\nnext_day <- date + 1\n```\n:::\n\n\n## Time Zones\n- R allows working with dates and times in different time zones.\n- Time zones can be specified using the tz parameter when creating or converting date and time objects. \n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-35_1b2c92a806c67a2820d6921da5b89429'}\n\n```{.r .cell-code}\ndatetime_ny <- as.POSIXct(\"2023-07-05 10:30:00\", tz = \"America/New_York\")\n```\n:::\n\n\n- Dates and times in R are represented using different classes: Date, POSIXct, and POSIXlt.\n- Functions like `as.Date()`, a`s.POSIXct()`, `format()`, `strptime()`, etc., facilitate working with dates and times.\n\n# Loop Functions \n\n## Loop Functions - Apply Family\n- The `apply` family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\n- These functions eliminate the need for explicit looping and can significantly simplify code.\n\n## `apply()`\n- apply() function applies a function over margins of an array or matrix.\n- Syntax: apply(X, MARGIN, FUN, ...)\n- X: The input data structure (array or matrix).\n- MARGIN: The dimension or dimensions along which the function should be applied.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-36_58e748130421c8bf21b2ab53a53696e4'}\n\n```{.r .cell-code}\n# Apply sum function to rows of a matrix\nmat <- matrix(1:9, nrow = 3)\nresult <- apply(mat, 1, sum)\nresult\n```\n\n[1] 12 15 18\n:::\n\n\n## `lapply()`\n- lapply() function applies a function to each element of a list or vector.\n- Syntax: lapply(X, FUN, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-37_ad1c700b4c578690d021725ba96b294d'}\n\n```{.r .cell-code}\n# Apply sqrt function to each element of a list\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- lapply(numbers, sqrt)\n```\n:::\n\n\n## `sapply()`\n- sapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\n- Syntax: sapply(X, FUN, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-38_6d1d4f74fde66d9ac377434dd91ca807'}\n\n```{.r .cell-code}\n# Apply sum function to each element of a list and simplify the result\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- sapply(numbers, sum)\n```\n:::\n\n\n## `vapply()`\n- vapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\n- Syntax: vapply(X, FUN, FUN.VALUE, ...)\n- X: The input list or vector.\n- FUN: The function to be applied.\n- FUN.VALUE: The desired output type and shape.\n- ...: Additional arguments to be passed to the function.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-39_5433ab36f9576f3bed64909bbad29931'}\n\n```{.r .cell-code}\n# Apply sum function to each element of a list and specify the output type\nnumbers <- list(a = 4, b = 9, c = 16)\nresult <- vapply(numbers, sum, FUN.VALUE = numeric(1))\n```\n:::\n\n\n## `mapply()`\n- mapply() function applies a function to multiple vectors or lists in parallel.\n- Syntax: mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE)\n- FUN: The function to be applied.\n- ...: Multiple input vectors or lists.\n- MoreArgs: Additional arguments to be passed to the function.\n- SIMPLIFY: Whether to simplify the result if possible.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-40_39b8753f7345859f6471df7613b1d8c1'}\n\n```{.r .cell-code}\n# Apply a function to multiple vectors in parallel\nvector1 <- c(1, 2, 3)\nvector2 <- c(4, 5, 10)\n```\n:::\n\n\n\n# Simulations - Generating Random Numbers\n\n## Simulations\n\n-   Simulations play a crucial role in statistical analysis and modeling.\n-   R provides various functions to generate random numbers and conduct simulations.\n\n## Generating Random Numbers\n\n-   runif(): Generates random numbers from a uniform distribution.\n-   Syntax: runif(n, min = 0, max = 1)\n-   n: Number of random numbers to generate.\n-   min: Minimum value of the range.\n-   max: Maximum value of the range.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-41_016c85ea10589aae0e9f0667b22873e6'}\n\n```{.r .cell-code}\n# Generate 5 random numbers between 0 and 1\nrandom_numbers <- runif(5)\n```\n:::\n\n\n## Generating Random Integers\n\n-   sample(): Generates random integers from a specified range.\n-   Syntax: sample(x, size, replace = FALSE)\n-   x: A vector of values from which to sample.\n-   size: Number of random integers to generate.\n-   replace: Whether sampling should be done with replacement.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-42_1294ad5a752a97c26c37b435347ee055'}\n\n```{.r .cell-code}\n# Generate 3 random integers from 1 to 10\nrandom_integers <- sample(1:10, 3)\n```\n:::\n\n\n## Generating Random Samples from a Vector\n\n-   sample(): Generates random samples from a vector.\n-   Syntax: sample(x, size, replace = FALSE)\n-   x: A vector of values from which to sample.\n-   size: Number of random samples to generate.\n-   replace: Whether sampling should be done with replacement.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-43_5de10f0cbd156e040818f052ee52779f'}\n\n```{.r .cell-code}\n# Generate a random sample of 4 elements from a vector\nvector <- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample <- sample(vector, 4)\n```\n:::\n\n\n## Generating Random Numbers from Distributions\n\n-   R provides functions to generate random numbers from various probability distributions:\n    -   rnorm(): Generates random numbers from a normal distribution.\n    -   rexp(): Generates random numbers from an exponential distribution.\n    -   rgamma(): Generates random numbers from a gamma distribution.\n    -   rbinom(): Generates random numbers from a binomial distribution.\n    -   rpois(): Generates random numbers from a Poisson distribution.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-44_b1831005263c2a013254667876dbd124'}\n\n```{.r .cell-code}\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers <- rnorm(5, mean = 0, sd = 1)\n```\n:::\n\n\n## Seeding Random Number Generation\n\n-   To reproduce random results, set a seed value using set.seed().\n-   Syntax: set.seed(seed)\n-   seed: A numeric value to initialize the random number generator.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-45_02ddc954434185daffc8ef4b63d10749'}\n\n```{.r .cell-code}\n# Set a seed value for reproducibility\nset.seed(123)\n```\n:::\n\n\n# Questions?\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}