{
  "hash": "cc79dd7d2b575c2a814a6ec0f5395802",
  "result": {
    "markdown": "---\ntitle: \"Week One\"\nsubtitle: \"Data strutures in R\"\noutput: \n  powerpoint_presentation\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n# Orientation\n\n## Package stats for Bioconductor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_tsv(\"https://bioconductor.org/packages/stats/bioc/bioc_pkg_stats.tab\") %>%\n  filter(Year != 2020) %>%\n  select(Year, Nb_of_downloads) %>%\n  group_by(Year) %>%\n  summarise(sum = sum(Nb_of_downloads)) %>%\n  ggplot(mapping = aes(x = Year, y = sum)) +\n  geom_path() +\n  scale_x_continuous(breaks = 2009:2019) +\n  theme_classic(base_size = 18) +\n  labs(x = NULL, y = \"Downloads\", title = \"Bioconductor package downloads over time\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 322504 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): Package, Month\ndbl (3): Year, Nb_of_distinct_IPs, Nb_of_downloads\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output-display}\n![](week_one_lecture_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Slide with Plot\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\npar(mar=c(4,4,0.1,0.1))\nplot(pressure)\n```\n\n::: {.cell-output-display}\n![](week_one_lecture_files/figure-html/pressure-1.png){width=672}\n:::\n:::\n\n\n\n# Simple Data Structures\n\n## Characters\n\nCharacters hold \"string\" data. For example:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Hello world\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello world\"\n```\n:::\n:::\n\n\n## Numbers\n\nNumbers can be integers or numerics (i.e., floats) in R. For example:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n2.2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.2\n```\n:::\n\n```{.r .cell-code}\n3E100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3e+100\n```\n:::\n:::\n\n\n## Logicals\n\nLogicals are either TRUE or FALSE. For example:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Data Structure Classes\n\nWe can identify the \"type\" or \"class\" of an object in R with the `class` function:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Data Structure Classes cont.\n\nWe can also use the `str` function to see the \"structure\" of any R object:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num 1\n```\n:::\n\n```{.r .cell-code}\nstr(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr \"Hello World!\"\n```\n:::\n\n```{.r .cell-code}\nstr(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi TRUE\n```\n:::\n:::\n\n\n## Comments\n\nAn important tool for writing R code is comments. These are preceded by `#` and are ignored by R.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code will say \"Hello World!\"\n\"Hello world!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello world!\"\n```\n:::\n:::\n\n\n<br>\n\nComments are a helpful tool for conveying information about your code to others.\n\n# Simple Data Structure Methods\n\n## The print Method\n\nThe `print` method works on any data type in R:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World!\"\n```\n:::\n\n```{.r .cell-code}\nprint(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n<br>\n\n\\* Notice that this is the same as simply typing the data into the R console and hitting \\<enter\\>\n\n## Arithmetic Methods\n\nArithmetic Methods for numeric data types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Addition\n1 + 1  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# Subtraction\n1 - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# Multiplication\n2 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# Division \n10 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nSee the cheat sheet for the full list.\n\n## Equivalence Comparisons\n\nEquivalence comparisons are a way to check if any two objects are the same.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Does 1 equal 1?\n1 == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Does \"Hello\" equal \"World\"?\n\"Hello\" == \"World\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Equivalence Comparisons cont.\n\nEquivalence comparisons can be inverted to check if two objects are not equal.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Does 1 not equal 1?\n1 != 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Does \"Hello\" not equal \"World\"?\n\"Hello\" != \"World\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Mathematical Comparisons\n\nFor numeric data types, mathematical comparisons can also be made.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Is 1 less than 100?\n1 < 100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Is 2 + 2 greater than 2 ^ 2?\n2 + 2 > 2 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Is 2 + 2 greater than or equal to 2 ^ 2?\n2 + 2 >= 2 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n## Variables\n\nVariables hold objects which are assigned to them.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Variables cont.\n\nVariables are identical to the object assigned to them.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- a\n# Does b equal 1?\nb == 1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Variables cont.\n\nVariables enable complex operations on data.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh <- 2 ^ 100\ni <- h / 3E100\nj <- 1E5\nk <- j ^ (-1 * i)\nk < 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n# Complex Data Structures\n\n## Vectors\n\nA vector is an ordered collection of either numerics, characters, or logicals.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_vec <- c(1, 2, 3)\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nchar_vec <- c(\"Hello\", \"World\", \"!\")\nchar_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\" \"World\" \"!\"    \n```\n:::\n\n```{.r .cell-code}\nlog_vec <- c(TRUE, FALSE, FALSE)\nlog_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n## Vectors cont.\n\nVectors can also have a vector of names which describe each element.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades <- c(98, 95, 82)\nnames(grades) <- c(\"Jimmy\", \"Alice\", \"Susan\")\ngrades\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJimmy Alice Susan \n   98    95    82 \n```\n:::\n:::\n\n\n## Vectors cont.\n\nElements from a vector can be accessed using the index of the desired data.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"orange\")\nfruits[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"banana\"\n```\n:::\n:::\n\n\n## Vectors cont.\n\nElements from a vector can be accessed using the name of the desired element.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades <- c(98, 95, 82)\nnames(grades) <- c(\"Jimmy\", \"Alice\", \"Susan\")\ngrades[\"Alice\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice \n   95 \n```\n:::\n:::\n\n\n## Vectors cont. \n\nNumeric shortcut for getting a vector of integers:\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_ints <- 1:10\nmy_ints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n## Lists\n\nA list is an ordered collection of any objects.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(1, \"b\", TRUE, c(1, 2, 3))\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 1 2 3\n```\n:::\n:::\n\n\n## Lists cont.\n\nLists can also have names.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_class <- list(c(\"Jimmy\", \"Alice\", \"Susan\"),\n                c(98, 95, 82))\nnames(my_class) <- c(\"Students\", \"Grades\")\nmy_class\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Students\n[1] \"Jimmy\" \"Alice\" \"Susan\"\n\n$Grades\n[1] 98 95 82\n```\n:::\n:::\n\n\n## Lists cont.\n\nLists can be accessed using numeric indexes or by element name.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_class <- list(c(\"Jimmy\", \"Alice\", \"Susan\"),\n                c(98, 95, 82))\nnames(my_class) <- c(\"Students\", \"Grades\")\nmy_class[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Jimmy\" \"Alice\" \"Susan\"\n```\n:::\n\n```{.r .cell-code}\nmy_class[[\"Grades\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98 95 82\n```\n:::\n:::\n\n\n\n## Data Frames\n\nData Frames are similar to excel sheets. They are 2D arrays which can hold numeric,\ncharacter, and boolean data. They also have column names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(\n  \"Students\" = c(\"Jimmy\", \"Alice\", \"Susan\"), \n  \"Grades\" = c(98, 95, 82)\n)\n\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Students Grades\n1    Jimmy     98\n2    Alice     95\n3    Susan     82\n```\n:::\n:::\n\n\n## Data Frames cont.\n\nData Frames can be accessed numerically by specifying the row and column of interest.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(\n  \"Students\" = c(\"Jimmy\", \"Alice\", \"Susan\"), \n  \"Grades\" = c(98, 95, 82)\n)\n\n# What grade did Susan get?\nmy_df[3, 2]  # [row, column]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82\n```\n:::\n:::\n\n\n## Data Frames cont. \n\nData Frames can also be accessed by column name with the \"$\" sign.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(\n  \"Students\" = c(\"Jimmy\", \"Alice\", \"Susan\"), \n  \"Grades\" = c(98, 95, 82)\n)\n\n# Access the Grades Column\nmy_df$Grades\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98 95 82\n```\n:::\n\n```{.r .cell-code}\n# What grade did Alice get?\nmy_df$Grades[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 95\n```\n:::\n:::\n\n\n# Complex Data Structure Methods\n\n## Equivalence\n\n\n\n\n\n",
    "supporting": [
      "week_one_lecture_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}