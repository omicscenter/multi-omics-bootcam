[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Multi-Omics Boot Camp",
    "section": "",
    "text": "üßë Lead Organizer & Instructor: Md. Jubayer Hossain\n\n\nüìù Start your transformation into a world of multi-omics analysis with our comprehensive workshop, designed specifically for universities in Bangladesh. This extensive two-day program is designed to equip undergraduates, postgraduates, and researchers with the necessary skills and knowledge to confidently navigate the complexity of multi-omics data. By concentrating on practical applications and providing hands-on experience, this workshop is a pivotal learning experience for all participants. If you are interested to host this boot camp at your institution Register with Google Forms\n\n\nüè® Medium - Note that this workshop is in-person, so if traveling, make necessary arrangements, and stay informed about any university protocols. For inquiries, contact our support team at training.chiralbd@gmail.com. We look forward to your participation."
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Who We Are: CHIRAL Bangladesh\n\n\n\nCenter for Health Innovation, Research, Action and Learning - Bangladesh (CHIRAL Bangladesh) is a voluntary non-profit research organization, resolving to promote interdisciplinary research in the field of health data science, computational biology and genomics."
  },
  {
    "objectID": "prework.html",
    "href": "prework.html",
    "title": "Prework",
    "section": "",
    "text": "Before attending the workshop please have the following installed and configured on your machine.\nInstall the latest release of R, then get the latest version of Bioconductor by starting R and entering the commands.\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.16\")"
  },
  {
    "objectID": "prework.html#software",
    "href": "prework.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "prework.html#data",
    "href": "prework.html#data",
    "title": "Prework",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here https://github.com/omicscenter/multi-omics-bootcam."
  },
  {
    "objectID": "prework.html#code",
    "href": "prework.html#code",
    "title": "Prework",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here https://github.com/omicscenter/multi-omics-bootcam."
  },
  {
    "objectID": "prework.html#resources",
    "href": "prework.html#resources",
    "title": "Prework",
    "section": "Resources",
    "text": "Resources\nLecture notes https://github.com/omicscenter/multi-omics-bootcam\nLab notes https://github.com/omicscenter/multi-omics-bootcam"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "The Cancer Genome Atlas (TCGA): TCGA is a comprehensive collection of multi-dimensional cancer genomics data covering multiple cancer types.\nInternational Cancer Genome Consortium (ICGC): Description: ICGC provides high-quality genomic and clinical data from various cancer projects worldwide.\nGene Expression Omnibus (GEO): GEO is a public repository hosted by the National Center for Biotechnology Information (NCBI) containing a vast collection of gene expression data, including cancer datasets.\nEuropean Genome-phenome Archive (EGA): Description: EGA is a repository for secure storage and sharing of human genetic and phenotypic data, including cancer datasets.\nNational Cancer Institute (NCI) Genomic Data Commons (GDC): Description: GDC is an open-access data portal providing access to a wide range of cancer genomics datasets.\nOncoLnc: Description: OncoLnc is a web resource that provides survival analysis and expression correlation for genes of interest across multiple cancer datasets.\nUCSC Cancer Genomics Browser: The UCSC Cancer Genomics Browser offers a comprehensive collection of cancer genomics data integrated with genomic annotations.\nGREIN : GEO RNA-seq Experiments Interactive Navigator: GREIN is an interactive web platform that provides user-friendly options to explore and analyze GEO RNA-seq data. GREIN is powered by the back-end computational pipeline for uniform processing of RNA-seq data and the large number (&gt;6,000) of already processed datasets. These datasets were retrieved from GEO and reprocessed consistently by the back-end GEO RNA-seq experiments processing pipeline (GREP2).\nGEPIA2: GEPIA2 is a web-based tool for analyzing gene expression data in cancer. It stands for Gene Expression Profiling Interactive Analysis 2 and is an updated version of the original GEPIA tool. GEPIA2 allows users to explore gene expression patterns, perform survival analyses, and visualize gene expression data across various cancer types.\nUALCAN: UALCAN is a web-based platform that provides interactive and comprehensive analysis of cancer transcriptome data. It enables users to explore gene expression patterns, perform survival analyses, and compare gene expression between tumor and normal samples across different cancer types. UALCAN utilizes data from The Cancer Genome Atlas (TCGA) to facilitate cancer research and provide insights into tumor biology.\ncBioPortal for Cancer Genomics:: cBioPortal hosts a large collection of cancer genomics datasets, allowing users to explore and visualize the data.\nONCOMINE: ONCOMINE is a powerful web-based platform for the analysis and visualization of cancer transcriptomic data. It provides researchers with access to a vast collection of publicly available gene expression datasets derived from cancer studies. ONCOMINE allows users to explore gene expression patterns, identify potential biomarkers, and compare gene expression between different cancer types or subtypes."
  },
  {
    "objectID": "resources.html#a-cancer-modeling-example",
    "href": "resources.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "resources.html#data-and-tools-for-cancer-genomics",
    "href": "resources.html#data-and-tools-for-cancer-genomics",
    "title": "Resources",
    "section": "",
    "text": "The Cancer Genome Atlas (TCGA): TCGA is a comprehensive collection of multi-dimensional cancer genomics data covering multiple cancer types.\nInternational Cancer Genome Consortium (ICGC): Description: ICGC provides high-quality genomic and clinical data from various cancer projects worldwide.\nGene Expression Omnibus (GEO): GEO is a public repository hosted by the National Center for Biotechnology Information (NCBI) containing a vast collection of gene expression data, including cancer datasets.\nEuropean Genome-phenome Archive (EGA): Description: EGA is a repository for secure storage and sharing of human genetic and phenotypic data, including cancer datasets.\nNational Cancer Institute (NCI) Genomic Data Commons (GDC): Description: GDC is an open-access data portal providing access to a wide range of cancer genomics datasets.\nOncoLnc: Description: OncoLnc is a web resource that provides survival analysis and expression correlation for genes of interest across multiple cancer datasets.\nUCSC Cancer Genomics Browser: The UCSC Cancer Genomics Browser offers a comprehensive collection of cancer genomics data integrated with genomic annotations.\nGREIN : GEO RNA-seq Experiments Interactive Navigator: GREIN is an interactive web platform that provides user-friendly options to explore and analyze GEO RNA-seq data. GREIN is powered by the back-end computational pipeline for uniform processing of RNA-seq data and the large number (&gt;6,000) of already processed datasets. These datasets were retrieved from GEO and reprocessed consistently by the back-end GEO RNA-seq experiments processing pipeline (GREP2).\nGEPIA2: GEPIA2 is a web-based tool for analyzing gene expression data in cancer. It stands for Gene Expression Profiling Interactive Analysis 2 and is an updated version of the original GEPIA tool. GEPIA2 allows users to explore gene expression patterns, perform survival analyses, and visualize gene expression data across various cancer types.\nUALCAN: UALCAN is a web-based platform that provides interactive and comprehensive analysis of cancer transcriptome data. It enables users to explore gene expression patterns, perform survival analyses, and compare gene expression between tumor and normal samples across different cancer types. UALCAN utilizes data from The Cancer Genome Atlas (TCGA) to facilitate cancer research and provide insights into tumor biology.\ncBioPortal for Cancer Genomics:: cBioPortal hosts a large collection of cancer genomics datasets, allowing users to explore and visualize the data.\nONCOMINE: ONCOMINE is a powerful web-based platform for the analysis and visualization of cancer transcriptomic data. It provides researchers with access to a vast collection of publicly available gene expression datasets derived from cancer studies. ONCOMINE allows users to explore gene expression patterns, identify potential biomarkers, and compare gene expression between different cancer types or subtypes."
  },
  {
    "objectID": "resources.html#guideline-for-bioconductor-users",
    "href": "resources.html#guideline-for-bioconductor-users",
    "title": "Resources",
    "section": "Guideline for Bioconductor Users",
    "text": "Guideline for Bioconductor Users\nBioconductor is an open-source and open-development software project that provides a comprehensive collection of bioinformatics and computational biology tools in the R programming language. It focuses on the analysis and comprehension of high-throughput genomic data, including DNA sequencing, RNA sequencing, microarray analysis, proteomics, and more."
  },
  {
    "objectID": "resources.html#required-software",
    "href": "resources.html#required-software",
    "title": "Resources",
    "section": "Required software",
    "text": "Required software\n\nR: http://www.r-project.org/ (FREE)\nRStudio (additional libraries required): http://www.rstudio.com/ (FREE)"
  },
  {
    "objectID": "resources.html#prework",
    "href": "resources.html#prework",
    "title": "Resources",
    "section": "Prework",
    "text": "Prework\nBefore attending the any workshop please have the following installed and configured on your machine. - Recent version of R - Recent version of RStudio - Most recent release of the Bioconductor and other packages used in courses\nInstall the latest release of R, then get the latest version of Bioconductor by starting R and entering the commands.\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.16\")\n\n\nEnsure you can knit R markdown documents\n\nOpen RStudio and create a new Rmarkdown document\nSave the document and check you are able to knit it."
  },
  {
    "objectID": "resources.html#install-bioconductor-packages",
    "href": "resources.html#install-bioconductor-packages",
    "title": "Resources",
    "section": "Install Bioconductor Packages",
    "text": "Install Bioconductor Packages\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install()\n\nInstall specific packages, e.g., ‚ÄúGenomicFeatures‚Äù and ‚ÄúAnnotationDbi‚Äù, with\n\nBiocManager::install(c(\"GenomicFeatures\", \"AnnotationDbi\"))\n\nThe install() function (in the BiocManager package) has arguments that change its default behavior; type ?install for further help."
  },
  {
    "objectID": "resources.html#r-packages-rnaseq-and-single-cell-rna-seq-analysis",
    "href": "resources.html#r-packages-rnaseq-and-single-cell-rna-seq-analysis",
    "title": "Resources",
    "section": "R Packages RNASeq and Single-cell RNA-seq Analysis",
    "text": "R Packages RNASeq and Single-cell RNA-seq Analysis\n\nDESeq2: DESeq2 is a widely used package for differential gene expression analysis in RNA-seq data.\nedgeR: edgeR is another popular package for differential gene expression analysis in RNA-seq data.\nlimma: limma is a package commonly used for the analysis of microarray and RNA-seq data, particularly for differential expression analysis.\nBallgown: Ballgown is a package for differential expression analysis and visualization of transcriptome assembly data.\nDEXSeq: DEXSeq is specifically designed for the detection of differential exon usage in RNA-seq data.\nNOISeq: NOISeq is a package for non-parametric analysis of differential expression in RNA-seq data.\nclusterProfiler: clusterProfiler is a package for functional enrichment analysis of gene clusters derived from RNA-seq data.\nGenomicFeatures: GenomicFeatures provides tools for working with genomic features, such as gene models, and is useful for annotating RNA-seq data.\nSeurat: Seurat is a package for single-cell RNA-seq data analysis, allowing exploration and visualization of cellular heterogeneity."
  },
  {
    "objectID": "resources.html#blogs-for-r-programming-statistics-and-data-analyis",
    "href": "resources.html#blogs-for-r-programming-statistics-and-data-analyis",
    "title": "Resources",
    "section": "Blogs for R Programming, Statistics, and Data Analyis",
    "text": "Blogs for R Programming, Statistics, and Data Analyis\n\nProgramiz - https://www.datamentor.io/r-programming/\nPennState STAT 484 - https://online.stat.psu.edu/stat484/\nPennState Topics in R Statistical Language - https://online.stat.psu.edu/stat484/\nSimply Statistics - https://simplystatistics.org/\nTutorialPoint - https://www.tutorialspoint.com/r/index.htm\nR for Biologists - https://www.rforbiologists.org/\nComputational Genomics with R - https://compgenomr.github.io/book/\nStat and R - https://statsandr.com/\nRafa Lab - https://rafalab.github.io/pages/harvardx.html\nUniversity of Florida - https://bolt.mph.ufl.edu/software/r-phc-6055/"
  },
  {
    "objectID": "resources.html#videos",
    "href": "resources.html#videos",
    "title": "Resources",
    "section": "Videos",
    "text": "Videos\n\nWelcome to the ‚ÄúR for Research‚Äù series! In this video, we will dive into the fundamentals of R, a powerful programming language and environment widely used in research and data analysis.R provides comprehensive tools and packages for statistical analysis, data visualization, and data manipulation. Whether you‚Äôre a biologist, social scientist, or any researcher looking to harness the power of data, this series will equip you with the necessary skills to leverage R for your research projects.! Check it out: \nIn Part 2, we will continue our exploration of the fundamentals of R, building upon the knowledge gained in Part 1. This video will cover additional essential topics to further enhance your skills in using R for research and data analysis. Check it out:"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Install R and RStudio",
    "section": "",
    "text": "R is a powerful analytical language and contains a number of useful packages for analyzing data.\nRStudio is a free and open-source integrated development environment (IDE) for R. RStudio provides comprehensive facilities to R programmers and is highly recommended in this class."
  },
  {
    "objectID": "setup.html#installing-r",
    "href": "setup.html#installing-r",
    "title": "Install R and RStudio",
    "section": "Installing R",
    "text": "Installing R\nWe recommend installing the most recent version or R ‚Äì 4.2.3 as of March 18, 2023 If you have had installed R already some time ago, we recommend updating/reinstalling it to the most recent version. Use a link below to launch download of R installers (if the download does not start, a fix may be to copy-paste the below link to your browser):\n\nFor Mac users: https://cran.r-project.org/bin/macosx/\nFor Windows users: https://cran.r-project.org/bin/windows/base/R-4.2.3-win.exe\nFor Ubuntu users: https://cran.r-project.org/bin/linux/ubuntu/\n\nFor other operating systems, or if you prefer to access the download link from the official website, visit http://cran.us.r-project.org and select Download R for Linux, Download R for macOS or Download R for Windows based on which device you have.\nOnce the proper installation package has been selected, run the package and follow the on-screen directions. This installation includes the R language and a graphical user interface (GUI). Rather using the GUI, we recommend installing RStudio - an integrated development environment (IDE) that lets you interact with R with some added benefits."
  },
  {
    "objectID": "setup.html#installing-rstudio",
    "href": "setup.html#installing-rstudio",
    "title": "Install R and RStudio",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nTo install RStudio, visit https://posit.co/download/rstudio-desktop/. Once on the website, select DOWNLOAD tab (upper left corner), scroll down and click Download under the RStudio Desktop ‚Äì Free version (1st out of 4 columns), and select the proper installation file for your platform (Windows or Mac).\nWhen you open up RStudio, it should look like this:\n\nClick the top left button to create a new script:\n\nRStudio, should now look like this:\n\nThere are four main windows.\n\nThe console is the lower-left window where you can run lines of code and see the output.\nThe script window is the upper-left window where you can edit and write scripts or markdown documents. From the script window, you can run the current line of code in your script (or multiple lines if you highlight multiple rows) by pressing\n\nCMD + Return on Mac\nCTRL + Enter on Windows\n\nThe workspace is the upper-right window where you can manage your data and variables and see previous commands entered (under the history tab).\nThe plots window allows you to see the output of plots. On the other tabs, you can also look at directories, install packages, and look at help files for various R commands.\n\nYou can customize the look of your RStudio IDE in Tools &gt; Global Options...."
  },
  {
    "objectID": "setup.html#r-packages",
    "href": "setup.html#r-packages",
    "title": "Install R and RStudio",
    "section": "R Packages",
    "text": "R Packages\nPackages are the fundamental units of reproducible R code. They are collections of R code that typically share some common purpose. Examples:\n\ndplyr - package of functions for fast data set manipulation (subsetting, summarizing, rearranging, and joining together data sets);\nggplot2 - ‚ÄúR‚Äôs famous package for making beautiful graphics‚Äù; allows to build multiple-layers, highly customizable plots."
  },
  {
    "objectID": "setup.html#installing-and-loading-r-packages",
    "href": "setup.html#installing-and-loading-r-packages",
    "title": "Install R and RStudio",
    "section": "Installing and Loading R Packages",
    "text": "Installing and Loading R Packages\n\nTo install an R package, type in the RStudio console\ninstall.packages(\"replace_with_package_name\")\nand press enter to execute the command.\nOnce a package is installed, to use its contents in current R session, we run in the RStudio console the command\nlibrary(replace_with_package_name)\n\n(Note the difference in presence of the quotation mark in the two above commands.)"
  },
  {
    "objectID": "q-and-a.html",
    "href": "q-and-a.html",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "Q: Who is the target audience for the workshop?\n\n\nA: The workshop is tailored for undergraduates, postgraduates, and researchers from universities, offering a comprehensive learning experience in multi-omics analysis.\n\n\nQ: How can I confirm my registration?\n\n\nA: Confirmation details are provided in the email you received after registration. Please review this email and contact our support team at [training.chiralbd@gmail.com] for any discrepancies.\n\n\nQ: Are there any prerequisites for the workshop?\n\n\nA: Familiarize yourself with the technical requirements outlined in the communication. If there are additional prerequisites, they will be communicated in advance.\n\n\nQ: What software do I need to install on my laptop?\n\n\nA: Specific software requirements will be shared with participants in advance of the workshop. Ensure your laptop is ready by installing the recommended tools.\n\n\nQ: Is the workshop entirely in person, or will there be online components?\n\n\nA: The workshop is primarily in person. A stable internet connection is recommended for this workshop.\n\n\nQ: How can I make payments for the workshop, and what is the deadline?\n\n\nA: Payment instructions are provided in the confirmation email. Please follow the instructions promptly, and note the deadline to secure your spot.\n\n\nQ: Can I bring a guest or colleague to the workshop?\n\n\nA: The workshop is designed for registered participants only. If a colleague is interested, they should complete the registration process individually.\n\n\nQ: Are there any social events or networking opportunities during the workshop?\n\n\nA: Details about any social events or networking opportunities will be shared in the workshop schedule. We encourage active participation to maximize networking possibilities."
  },
  {
    "objectID": "about.html#instructor",
    "href": "about.html#instructor",
    "title": "About",
    "section": "Instructor",
    "text": "Instructor\n\nBio\n\nHi, I am Jubayer, a highly motivated biomedical research enthusiasts with a Master of Science in Microbiology focus on public health and health data science. Research experience designing and implementing projects for biomedical data analysis (including next‚Äëgeneration sequencing, RNA‚Äëseq , and ssRNA‚Äëseq ). I am interested in applying machine learning/deep learning tools and techniques in the context of disease diagnosis and large data analytics for public health while focusing on bridging the gap between computational and experimental laboratories through highly engaging and fruitful collaborations\nPython is my primary language for data analysis and machine learning. I also have a basic understanding of R, Julia, SPSS, QGIS, and SQL.\nThis page highlights my teaching and research projects. Please reach out if you want to collaborate or have questions.\n\n\nSkills\nProgramming Languages: Python, R, SQL, Julia, JavaScript; Data Science: scikit-learn, PyCaret, Dask, PySpark; GIS & Remote Sensing: ArcGIS, Geopandas, Xarray, Giovani; Analytics Softwares: SPSS, PowerBI, Microsoft Excel; Survey Tools: RedCap, KoboToolBox, EpiCollect, Google Forms; Academic Writing Tools: Microsoft Word, LaTeX, Mendeley; Bioinformatics: BioPython, Bioconductor, BioPandas, Galaxy, NGS, RNASeq, ssRNASeq; Miscellaneous Skills: UNIX, Version Control(Git), Web Scraping, APIs.\n\n\nSelected Publications\n\nHossain, M.J., Islam, M.W., Munni, U.R. et al.¬†Health-related quality of life among thalassemia patients in Bangladesh using the SF-36 questionnaire. Scientific Reports 13, 7734 (2023). https://doi.org/10.1038/s41598-023-34205-9\nTowhid, S. T., Hossain, M. J., Sammo, M. A. S., & Akter, S. (2022). Perception of Students on Antibiotic Resistance and Prevention: An Online, Community-Based Case Study from Dhaka, Bangladesh. European Journal of Biology and Biotechnology, 3(3), 14‚Äì19. https://doi.org/10.24018/ejbio.2022.3.3.341\nHossain, M.J., Towhid ST, Sultana S, Mukta SA, Gulshan R, Miah MS (2022). Knowledge and Attitudes towards Thalassemia among Public University Students in Bangladesh. Microbial Bioactives, 5(2), https://doi.org/10.25163/microbbioacts.526325."
  },
  {
    "objectID": "setup-guide.html",
    "href": "setup-guide.html",
    "title": "Setup Guide: Install R and RStudio",
    "section": "",
    "text": "R is a powerful analytical language and contains a number of useful packages for analyzing data.\nRStudio is a free and open-source integrated development environment (IDE) for R. RStudio provides comprehensive facilities to R programmers and is highly recommended in this class."
  },
  {
    "objectID": "setup-guide.html#installing-r",
    "href": "setup-guide.html#installing-r",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Installing R\n",
    "text": "Installing R\n\nWe recommend installing the most recent version or R ‚Äì 4.2.3 as of March 18, 2023 If you have had installed R already some time ago, we recommend updating/reinstalling it to the most recent version. Use a link below to launch download of R installers (if the download does not start, a fix may be to copy-paste the below link to your browser):\n\nFor Mac users: https://cran.r-project.org/bin/macosx/\nFor Windows users: https://cran.r-project.org/bin/windows/base/R-4.2.3-win.exe\nFor Ubuntu users: https://cran.r-project.org/bin/linux/ubuntu/\n\nFor other operating systems, or if you prefer to access the download link from the official website, visit http://cran.us.r-project.org and select Download R for Linux, Download R for macOS or Download R for Windows based on which device you have.\nOnce the proper installation package has been selected, run the package and follow the on-screen directions. This installation includes the R language and a graphical user interface (GUI). Rather using the GUI, we recommend installing RStudio - an integrated development environment (IDE) that lets you interact with R with some added benefits."
  },
  {
    "objectID": "setup-guide.html#installing-rstudio",
    "href": "setup-guide.html#installing-rstudio",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Installing RStudio\n",
    "text": "Installing RStudio\n\nTo install RStudio, visit https://posit.co/download/rstudio-desktop/. Once on the website, select DOWNLOAD tab (upper left corner), scroll down and click Download under the RStudio Desktop ‚Äì Free version (1st out of 4 columns), and select the proper installation file for your platform (Windows or Mac).\nWhen you open up RStudio, it should look like this:\n\nClick the top left button to create a new script:\n\nRStudio, should now look like this:\n\nThere are four main windows.\n\nThe console is the lower-left window where you can run lines of code and see the output.\n\nThe script window is the upper-left window where you can edit and write scripts or markdown documents. From the script window, you can run the current line of code in your script (or multiple lines if you highlight multiple rows) by pressing\n\n\nCMD + Return on Mac\n\nCTRL + Enter on Windows\n\n\nThe workspace is the upper-right window where you can manage your data and variables and see previous commands entered (under the history tab).\nThe plots window allows you to see the output of plots. On the other tabs, you can also look at directories, install packages, and look at help files for various R commands.\n\nYou can customize the look of your RStudio IDE in Tools &gt; Global Options...."
  },
  {
    "objectID": "setup-guide.html#r-packages",
    "href": "setup-guide.html#r-packages",
    "title": "Setup Guide: Install R and RStudio",
    "section": "\nR Packages",
    "text": "R Packages\nPackages are the fundamental units of reproducible R code. They are collections of R code that typically share some common purpose. Examples:\n\ndplyr - package of functions for fast data set manipulation (subsetting, summarizing, rearranging, and joining together data sets);\nggplot2 - ‚ÄúR‚Äôs famous package for making beautiful graphics‚Äù; allows to build multiple-layers, highly customizable plots."
  },
  {
    "objectID": "setup-guide.html#installing-and-loading-r-packages",
    "href": "setup-guide.html#installing-and-loading-r-packages",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Installing and Loading R Packages",
    "text": "Installing and Loading R Packages\n\n\nTo install an R package, type in the RStudio console\ninstall.packages(\"replace_with_package_name\")\nand press enter to execute the command.\n\n\nOnce a package is installed, to use its contents in current R session, we run in the RStudio console the command\nlibrary(replace_with_package_name)\n\n\n(Note the difference in presence of the quotation mark in the two above commands.)"
  },
  {
    "objectID": "setup-guide.html#working-with-r-rstudio",
    "href": "setup-guide.html#working-with-r-rstudio",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Working with R ‚Äì RStudio",
    "text": "Working with R ‚Äì RStudio\nRStudio is an Integrated Development Environment (IDE) for R\n\nIt helps the user effectively use R\nMakes things easier\nIs NOT a dropdown statistical tool (such as Stata)\n\nSee Rcmdr or Radiant\n\n\n\nAll R Studio snapshots are taken from http://ayeimanol-r.net/2013/04/21/289/\n\n\n\n\n\n\n\n\n\n\n[source]"
  },
  {
    "objectID": "setup-guide.html#rstudio",
    "href": "setup-guide.html#rstudio",
    "title": "Setup Guide: Install R and RStudio",
    "section": "RStudio",
    "text": "RStudio\nEasier working with R\n\nSyntax highlighting, code completion, and smart indentation\nEasily manage multiple working directories and projects\n\nMore information\n\nWorkspace browser and data viewer\nPlot history, zooming, and flexible image and file export\nIntegrated R help and documentation\nSearchable command history"
  },
  {
    "objectID": "setup-guide.html#rstudio-1",
    "href": "setup-guide.html#rstudio-1",
    "title": "Setup Guide: Install R and RStudio",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "setup-guide.html#getting-the-editor",
    "href": "setup-guide.html#getting-the-editor",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Getting the editor",
    "text": "Getting the editor"
  },
  {
    "objectID": "setup-guide.html#working-with-r-in-r-studio---2-major-panes",
    "href": "setup-guide.html#working-with-r-in-r-studio---2-major-panes",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Working with R in R Studio - 2 major panes:",
    "text": "Working with R in R Studio - 2 major panes:\n\nThe Source/Editor: ‚ÄúAnalysis‚Äù Script + Interactive Exploration\n\nStatic copy of what you did (reproducibility)\nTop by default\n\n\nThe R Console: ‚Äúinterprets‚Äù whatever you type\n\nCalculator\nTry things out interactively, then add to your editor\nBottom by default"
  },
  {
    "objectID": "setup-guide.html#source-editor",
    "href": "setup-guide.html#source-editor",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Source / Editor",
    "text": "Source / Editor\n\nWhere files open to\nHave R code and comments in them\nCan highlight and press (CMD+Enter (Mac) or Ctrl+Enter (Windows)) to run the code\n\nIn a .R file (we call a script), code is saved on your disk"
  },
  {
    "objectID": "setup-guide.html#r-console",
    "href": "setup-guide.html#r-console",
    "title": "Setup Guide: Install R and RStudio",
    "section": "R Console",
    "text": "R Console\n\n\n\n\n\n\n\n\n\n\nWhere code is executed (where things happen)\nYou can type here for things interactively\nCode is not saved on your disk"
  },
  {
    "objectID": "setup-guide.html#rstudio-2",
    "href": "setup-guide.html#rstudio-2",
    "title": "Setup Guide: Install R and RStudio",
    "section": "RStudio",
    "text": "RStudio\nSuper useful ‚Äúcheat sheet‚Äù: https://github.com/rstudio/cheatsheets/raw/master/rstudio-ide.pdf"
  },
  {
    "objectID": "setup-guide.html#rstudio-layout",
    "href": "setup-guide.html#rstudio-layout",
    "title": "Setup Guide: Install R and RStudio",
    "section": "RStudio layout",
    "text": "RStudio layout"
  },
  {
    "objectID": "setup-guide.html#rstudio-layout-1",
    "href": "setup-guide.html#rstudio-layout-1",
    "title": "Setup Guide: Install R and RStudio",
    "section": "RStudio Layout",
    "text": "RStudio Layout\nIf RStudio doesn‚Äôt look the way you want (or like our RStudio), then do:\nRStudio ‚Äì&gt; Preferences ‚Äì&gt; Pane Layout"
  },
  {
    "objectID": "setup-guide.html#workspaceenvironment",
    "href": "setup-guide.html#workspaceenvironment",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Workspace/Environment",
    "text": "Workspace/Environment"
  },
  {
    "objectID": "setup-guide.html#workspaceenvironment-1",
    "href": "setup-guide.html#workspaceenvironment-1",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Workspace/Environment",
    "text": "Workspace/Environment\n\nTells you what objects are in R\nWhat exists in memory/what is loaded?/what did I read in?\n\nHistory\n\nShows previous commands. Good to look at for debugging, but don‚Äôt rely on it.\nInstead use RMarkdown!\nAlso type the ‚Äúup‚Äù key in the Console to scroll through previous commands"
  },
  {
    "objectID": "setup-guide.html#other-panes",
    "href": "setup-guide.html#other-panes",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Other Panes",
    "text": "Other Panes\n\n\nFiles - shows the files on your computer of the directory you are working in\n\nViewer - can view data or R objects\n\nHelp - shows help of R commands\n\nPlots - pictures and figures\n\nPackages - list of R packages that are loaded in memory"
  },
  {
    "objectID": "setup-guide.html#r-markdown-file",
    "href": "setup-guide.html#r-markdown-file",
    "title": "Setup Guide: Install R and RStudio",
    "section": "R Markdown file",
    "text": "R Markdown file\nR Markdown files (.Rmd) help generate reports that include your code and output. Think of them as fancier scripts.\n\nHelps you describe your code\nAllows you to check the output\nCan create many different file types"
  },
  {
    "objectID": "setup-guide.html#create-an-r-markdown-file",
    "href": "setup-guide.html#create-an-r-markdown-file",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Create an R Markdown file",
    "text": "Create an R Markdown file\nGo to File ‚Üí New File ‚Üí R Markdown\nCall your file ‚Äúfirst_markdown‚Äù"
  },
  {
    "objectID": "setup-guide.html#code-chunks",
    "href": "setup-guide.html#code-chunks",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Code chunks",
    "text": "Code chunks\nWithin R Markdown files are code ‚Äúchunks‚Äù\nThis is where you can type R code and run it!"
  },
  {
    "objectID": "setup-guide.html#create-chunks",
    "href": "setup-guide.html#create-chunks",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Create Chunks",
    "text": "Create Chunks\nTo create a new R code chunk:\nCopy paste an existing chunk in the R Markdown file and replace the code OR\n\nUse the insert code chunk button at the top of RStudio.\n\n\n\n\n\n\n\n\n\n\nSelect R as the language:"
  },
  {
    "objectID": "setup-guide.html#run-previous-chunks-button",
    "href": "setup-guide.html#run-previous-chunks-button",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Run previous chunks button",
    "text": "Run previous chunks button\nYou can run all chunks above a specific chunk using this button:"
  },
  {
    "objectID": "setup-guide.html#chunk-settings",
    "href": "setup-guide.html#chunk-settings",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Chunk settings",
    "text": "Chunk settings"
  },
  {
    "objectID": "setup-guide.html#chunk-settings-1",
    "href": "setup-guide.html#chunk-settings-1",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Chunk settings",
    "text": "Chunk settings\nYou can specify if a chunk will be seen in the report or not."
  },
  {
    "objectID": "setup-guide.html#knit-file-to-html",
    "href": "setup-guide.html#knit-file-to-html",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Knit file to html",
    "text": "Knit file to html\nThis will create a report from the R Markdown document!"
  },
  {
    "objectID": "setup-guide.html#useful-r-studio-shortcuts",
    "href": "setup-guide.html#useful-r-studio-shortcuts",
    "title": "Setup Guide: Install R and RStudio",
    "section": "Useful R Studio Shortcuts",
    "text": "Useful R Studio Shortcuts\n\n\nCtrl + Enter in your script evaluates that line of code\n\nIt‚Äôs like copying and pasting the code into the console for it to run.\n\n\n\nCtrl+1 takes you to the script page\n\nCtrl+2 takes you to the console\nhttp://www.rstudio.com/ide/docs/using/keyboard_shortcuts"
  },
  {
    "objectID": "prework.html#major-concepts",
    "href": "prework.html#major-concepts",
    "title": "Preparation",
    "section": "Major concepts",
    "text": "Major concepts\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nArgument - an option that you specify to a function.\nObject - an object is something that can be worked with in R - can be lots of different things!\nVariable something measured or counted that is a characteristic about a sample.\nSample individuals that you have data about - e.g.¬†people, houses, viruses etc.\n\nData frames A collection of variables and samples in a row/column format. Sample = Row, Variable = Column\nTidyverse - This is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R."
  },
  {
    "objectID": "prework.html#functions",
    "href": "prework.html#functions",
    "title": "Preparation",
    "section": "Functions",
    "text": "Functions\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\ninstall.packages()\ninstall.packages(\"remotes\")\nInstalls packages\n\n\nBase R\nlibrary()\nlibrary(remotes)\nLoads and attaches additional packages to the R environment."
  },
  {
    "objectID": "prework.html#rstudio---major-concepts",
    "href": "prework.html#rstudio---major-concepts",
    "title": "Preparation",
    "section": "RStudio - Major concepts",
    "text": "RStudio - Major concepts\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nRStudio Keyboard shortcuts"
  },
  {
    "objectID": "prework.html#functions-1",
    "href": "prework.html#functions-1",
    "title": "Preparation",
    "section": "Functions",
    "text": "Functions\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nView()\nView(mtcars)\nallows you to view data in a spreadsheet format.\n\n\nBase R\nhead()\nhead(mtcars)\nReturns the top 6 rows of an object in the environment by default. You can specify how many rows you want by including the n =argument.\n\n\nBase R\ntail()\ntail(mtcars)\nReturns the bottom 6 rows of an object in the environment by default. You can specify how many rows you want by including the n = argument."
  },
  {
    "objectID": "prework.html#reproducibility---major-concepts",
    "href": "prework.html#reproducibility---major-concepts",
    "title": "Preparation",
    "section": "Reproducibility - Major concepts",
    "text": "Reproducibility - Major concepts\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "prework.html#functions-2",
    "href": "prework.html#functions-2",
    "title": "Preparation",
    "section": "Functions",
    "text": "Functions\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nsessionInfo()\nsessionInfo()\nReturns the R version information, the OS, and the attached packages in the current R session.\n\n\n\n\nMore resources\n\nThe RMarkdown book\nJenny Bryan‚Äôs organizational strategies.\nWrite efficient R code for science.\nReproducibility in Cancer Informatics course"
  },
  {
    "objectID": "cheatsheet.html",
    "href": "cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Package - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nArgument - an option that you specify to a function.\nObject - an object is something that can be worked with in R - can be lots of different things!\nVariable something measured or counted that is a characteristic about a sample.\nSample individuals that you have data about - e.g.¬†people, houses, viruses etc.\n\nData frames A collection of variables and samples in a row/column format. Sample = Row, Variable = Column\nTidyverse - This is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\ninstall.packages()\ninstall.packages(\"remotes\")\nInstalls packages\n\n\nBase R\nlibrary()\nlibrary(remotes)\nLoads and attaches additional packages to the R environment.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nRStudio Keyboard shortcuts\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nView()\nView(mtcars)\nallows you to view data in a spreadsheet format.\n\n\nBase R\nhead()\nhead(mtcars)\nReturns the top 6 rows of an object in the environment by default. You can specify how many rows you want by including the n =argument.\n\n\nBase R\ntail()\ntail(mtcars)\nReturns the bottom 6 rows of an object in the environment by default. You can specify how many rows you want by including the n = argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nsessionInfo()\nsessionInfo()\nReturns the R version information, the OS, and the attached packages in the current R session.\n\n\n\n\n\n\n\nThe RMarkdown book\nJenny Bryan‚Äôs organizational strategies.\nWrite efficient R code for science.\nReproducibility in Cancer Informatics course"
  },
  {
    "objectID": "cheatsheet.html#major-concepts",
    "href": "cheatsheet.html#major-concepts",
    "title": "Cheatsheet",
    "section": "",
    "text": "Package - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nArgument - an option that you specify to a function.\nObject - an object is something that can be worked with in R - can be lots of different things!\nVariable something measured or counted that is a characteristic about a sample.\nSample individuals that you have data about - e.g.¬†people, houses, viruses etc.\n\nData frames A collection of variables and samples in a row/column format. Sample = Row, Variable = Column\nTidyverse - This is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R."
  },
  {
    "objectID": "cheatsheet.html#functions",
    "href": "cheatsheet.html#functions",
    "title": "Cheatsheet",
    "section": "",
    "text": "Library/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\ninstall.packages()\ninstall.packages(\"remotes\")\nInstalls packages\n\n\nBase R\nlibrary()\nlibrary(remotes)\nLoads and attaches additional packages to the R environment."
  },
  {
    "objectID": "cheatsheet.html#rstudio---major-concepts",
    "href": "cheatsheet.html#rstudio---major-concepts",
    "title": "Cheatsheet",
    "section": "",
    "text": "RStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nRStudio Keyboard shortcuts"
  },
  {
    "objectID": "cheatsheet.html#functions-1",
    "href": "cheatsheet.html#functions-1",
    "title": "Cheatsheet",
    "section": "",
    "text": "Library/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nView()\nView(mtcars)\nallows you to view data in a spreadsheet format.\n\n\nBase R\nhead()\nhead(mtcars)\nReturns the top 6 rows of an object in the environment by default. You can specify how many rows you want by including the n =argument.\n\n\nBase R\ntail()\ntail(mtcars)\nReturns the bottom 6 rows of an object in the environment by default. You can specify how many rows you want by including the n = argument."
  },
  {
    "objectID": "cheatsheet.html#reproducibility---major-concepts",
    "href": "cheatsheet.html#reproducibility---major-concepts",
    "title": "Cheatsheet",
    "section": "",
    "text": "Reproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "cheatsheet.html#functions-2",
    "href": "cheatsheet.html#functions-2",
    "title": "Cheatsheet",
    "section": "",
    "text": "Library/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nsessionInfo()\nsessionInfo()\nReturns the R version information, the OS, and the attached packages in the current R session.\n\n\n\n\n\n\nThe RMarkdown book\nJenny Bryan‚Äôs organizational strategies.\nWrite efficient R code for science.\nReproducibility in Cancer Informatics course"
  },
  {
    "objectID": "cheatsheet.html#intro",
    "href": "cheatsheet.html#intro",
    "title": "Cheatsheet",
    "section": "",
    "text": "Package - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nArgument - an option that you specify to a function.\nObject - an object is something that can be worked with in R - can be lots of different things!\nVariable something measured or counted that is a characteristic about a sample.\nSample individuals that you have data about - e.g.¬†people, houses, viruses etc.\n\nData frames A collection of variables and samples in a row/column format. Sample = Row, Variable = Column\nTidyverse - This is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\ninstall.packages()\ninstall.packages(\"remotes\")\nInstalls packages\n\n\nBase R\nlibrary()\nlibrary(remotes)\nLoads and attaches additional packages to the R environment."
  },
  {
    "objectID": "cheatsheet.html#rstudio",
    "href": "cheatsheet.html#rstudio",
    "title": "Cheatsheet",
    "section": "",
    "text": "RStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nRStudio Keyboard shortcuts\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nView()\nView(mtcars)\nallows you to view data in a spreadsheet format.\n\n\nBase R\nhead()\nhead(mtcars)\nReturns the top 6 rows of an object in the environment by default. You can specify how many rows you want by including the n =argument.\n\n\nBase R\ntail()\ntail(mtcars)\nReturns the bottom 6 rows of an object in the environment by default. You can specify how many rows you want by including the n = argument."
  },
  {
    "objectID": "cheatsheet.html#reproducibility",
    "href": "cheatsheet.html#reproducibility",
    "title": "Cheatsheet",
    "section": "",
    "text": "Reproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?\n\n\n\n\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\nsessionInfo()\nsessionInfo()\nReturns the R version information, the OS, and the attached packages in the current R session.\n\n\n\n\n\n\n\nThe RMarkdown book\nJenny Bryan‚Äôs organizational strategies.\nWrite efficient R code for science.\nReproducibility in Cancer Informatics course"
  },
  {
    "objectID": "cheatsheet.html#basic-r",
    "href": "cheatsheet.html#basic-r",
    "title": "Cheatsheet",
    "section": "Basic R",
    "text": "Basic R\n\nMajor concepts\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nThe R console is a full calculator:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder\n\n# is the comment symbol; nothing to its right is evaluated.\n\n\n\nFunctions\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nBase R\n&lt;-\nx &lt;- 1\nAssigns a name to something in the R environment.\n\n\nBase R\nc()\nx &lt;- c(1, 3)\nCombines values into a vector or list.\n\n\nBase R\nstr(x)\nstr(x)\nGets a summary of the object x structure.\n\n\nBase R\nclass(x)\nclass(x)\nReturns the type of the values in object x.\n\n\nBase R\nprint(x)\nprint(x)\nPrints out contents of x.\n\n\nBase R\nlength(x)\nlength(x)\nReturns how long the object x is."
  },
  {
    "objectID": "cheatsheet.html#data-inputoutput",
    "href": "cheatsheet.html#data-inputoutput",
    "title": "Cheatsheet",
    "section": "Data Input/Output",
    "text": "Data Input/Output\n\nMajor concepts\n\nDelimited file - columns within the file have boundaries created with some type of punctuation - for example, a csv file stands for comma separated values, thus the columns are delimited or separated by commas. txt files often use tabs.\ntibble ‚Äì a rectangular data frame, where data are split into rows and columns.\nFile path - where a file lives on your computer (or on the internet) - File paths can be relative or absolute.\nGetting help - For any function, you can write ?FUNCTION_NAME, or help(\"FUNCTION_NAME\") to look at the help file for that function.\nR Projects set the working directory where the .Rproj file is.\nR Markdown files look for file paths relative to where the .Rmd file is located\n\n\n\nFunctions\n\n\n\nLibrary/Package\nPiece of code\nExample of usage\nWhat it does\n\n\n\n\nreadr\nread_csv()\ndf &lt;- read_csv(\"http://jhudatascience.org/intro_to_R_class/data/Youth_Tobacco_Survey_YTS_Data.csv\")\nReads in a TSV file from a specified file path. This function can be tailored to read in other common types of files. i.e.¬†read_csv(), read_rds(), etc.\n\n\nTSA\nspec()|spec(mtcars)| Gives specification of column types| |readxl| [read_excel()](https://www.rdocumentation.org/packages/readxl/versions/1.3.1/topics/read_excel)|read_excel(‚Äúdataset.xlsx‚Äù)| Read in an excel file.| | BaseR| [getwd()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd)|getwd()| Finds the current working directory.| | BaseR| [setwd()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd)|setwd(‚ÄúDesktop‚Äù)`\nChanges the current working directory."
  },
  {
    "objectID": "index.html#learning-bbjectives",
    "href": "index.html#learning-bbjectives",
    "title": "Multi-Omics Boot Camp",
    "section": "Learning bbjectives",
    "text": "Learning bbjectives\n\nUnderstand the fundamentals of bioinformatics and its application in biological research.\nGain a solid foundation in R programming, including data structures, control flow, and functions.\nLearn data manipulation techniques specific to bioinformatics, such as working with DNA sequences and protein structures.\nGain hands-on experience by working with real-world bioinformatics datasets and applying R to extract valuable information.\nUnderstand the importance of reproducibility and best practices in bioinformatics research using R.\nFeel confident in applying R for basic bioinformatics tasks and be ready to explore more advanced topics in the field."
  },
  {
    "objectID": "index.html#why-r",
    "href": "index.html#why-r",
    "title": "Multi-Omics Boot Camp",
    "section": "Why R?",
    "text": "Why R?\n\nR is a programming and statistical language.\nR is used for data Analysis and Visualization.\nR is simple and easy to learn, read and write.\nR is an example of a FLOSS (Free Libre and Open Source Software) where one can freely distribute copies of this software, read its source code, modify it, etc."
  },
  {
    "objectID": "index.html#useful-resources-for-learning-r",
    "href": "index.html#useful-resources-for-learning-r",
    "title": "R for Bioinformatics (Cohort 02)",
    "section": "Useful resources for learning R",
    "text": "Useful resources for learning R\n\nDataCamp: interactive online lessons in R.\n\nSome of the courses are free (particularly community-written lessons like the one you‚Äôll do today), but for paid courses, DataCamp costs about 300 SEK / mo.\n\nRStudio Cheat Sheets: Very helpful 1-2 page overviews of common tasks and packages in R.\nQuick-R: Website with short example-driven overviews of R functionality.\nStackOverflow: Part of the Stack Exchange network, StackOverflow is a Q&A community website for people who work in programming. Tons of incredibly good R users and developers interact on StackExchange, so it‚Äôs a great place to search for answers to your questions.\nR-Bloggers: Blog aggregagator for posts about R. Great place to learn really cool things you can do in R.\nR for Data Science: Online version of the book by Hadley Wickham, who has written many of the best packages for R, including the Tidyverse, which we will cover."
  },
  {
    "objectID": "index.html#recording-of-classes",
    "href": "index.html#recording-of-classes",
    "title": "Multi-Omics Boot Camp",
    "section": "Recording of classes",
    "text": "Recording of classes\nClass lectures will be recorded automatically using cloud. The links will be posted to CHIRAL Classes when they are available."
  },
  {
    "objectID": "index.html#is-this-course-for-me",
    "href": "index.html#is-this-course-for-me",
    "title": "Multi-Omics Boot Camp",
    "section": "Is this course for me?",
    "text": "Is this course for me?\nIf your answer to any of the following questions is ‚Äúyes‚Äù, then this is the right workshop for you.\n\nDo you make summary tables in R (data, survey data, regression models, time-to-event data, adverse event reports)?\nDo you want your workflow to be reproducible?\nAre you often frustrated with the immense amount of code required to create great-looking tables in R?\n\nThe workshop is designed for those with some experience in R. It will be expected that you can perform basic data manipulation. Experience with the {tidyverse} and the %&gt;% operator is a plus, but not required."
  },
  {
    "objectID": "prework.html#prework",
    "href": "prework.html#prework",
    "title": "Preparation",
    "section": "",
    "text": "Before attending the workshop please have the following installed and configured on your machine.\n\nRecent version of R\nRecent version of RStudio\nMost recent release of the Bioconductor and other packages used in courses\n\nInstall the latest release of R, then get the latest version of Bioconductor by starting R and entering the commands.\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.16\")\n\n\nEnsure you can knit R markdown documents\n\nOpen RStudio and create a new Rmarkdown document\nSave the document and check you are able to knit it."
  },
  {
    "objectID": "prework.html#install-bioconductor-packages",
    "href": "prework.html#install-bioconductor-packages",
    "title": "Prework",
    "section": "Install Bioconductor Packages",
    "text": "Install Bioconductor Packages\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install()\n\nInstall specific packages, e.g., ‚ÄúGenomicFeatures‚Äù and ‚ÄúAnnotationDbi‚Äù, with\n\nBiocManager::install(c(\"GenomicFeatures\", \"AnnotationDbi\"))\n\nThe install() function (in the BiocManager package) has arguments that change its default behavior; type ?install for further help.\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection."
  },
  {
    "objectID": "index.html#zoom-working-virtually",
    "href": "index.html#zoom-working-virtually",
    "title": "Multi-Omics Boot Camp",
    "section": "Zoom + Working Virtually",
    "text": "Zoom + Working Virtually\n\nZoom link will be emailed to students\nClass sessions will be recorded and later posted\nWe will have lectures as well as breakout room sessions to work on labs\nPlease be aware that there is the option to use closed captioning"
  },
  {
    "objectID": "q-and-a.html#faqs",
    "href": "q-and-a.html#faqs",
    "title": "Frequently Asked Questions (FAQs)",
    "section": "",
    "text": "Q: Who is the target audience for the workshop?\n\n\nA: The workshop is tailored for undergraduates, postgraduates, and researchers from universities, offering a comprehensive learning experience in multi-omics analysis.\n\n\nQ: How can I confirm my registration?\n\n\nA: Confirmation details are provided in the email you received after registration. Please review this email and contact our support team at [training.chiralbd@gmail.com] for any discrepancies.\n\n\nQ: Are there any prerequisites for the workshop?\n\n\nA: Familiarize yourself with the technical requirements outlined in the communication. If there are additional prerequisites, they will be communicated in advance.\n\n\nQ: What software do I need to install on my laptop?\n\n\nA: Specific software requirements will be shared with participants in advance of the workshop. Ensure your laptop is ready by installing the recommended tools.\n\n\nQ: Is the workshop entirely in person, or will there be online components?\n\n\nA: The workshop is primarily in person. A stable internet connection is recommended for this workshop.\n\n\nQ: How can I make payments for the workshop, and what is the deadline?\n\n\nA: Payment instructions are provided in the confirmation email. Please follow the instructions promptly, and note the deadline to secure your spot.\n\n\nQ: Can I bring a guest or colleague to the workshop?\n\n\nA: The workshop is designed for registered participants only. If a colleague is interested, they should complete the registration process individually.\n\n\nQ: Are there any social events or networking opportunities during the workshop?\n\n\nA: Details about any social events or networking opportunities will be shared in the workshop schedule. We encourage active participation to maximize networking possibilities."
  },
  {
    "objectID": "prework.html#packages",
    "href": "prework.html#packages",
    "title": "Prework",
    "section": "Packages",
    "text": "Packages\n\ninstall.packages('BiocManager')\nBiocManager::install('methods')\nBiocManager::install('rmarkdown')\nBiocManager::install('igraph')\nBiocManager::install('org.Hs.eg.db')\nBiocManager::install('RMariaDB')\nBiocManager::install('Rbowtie')\nBiocManager::install('parallel')\nBiocManager::install('QuasR')\nBiocManager::install('BSgenome')\nBiocManager::install('BSgenome.Mmusculus.UCSC.mm10')\nBiocManager::install('BSgenome.Hsapiens.UCSC.hg19')\nBiocManager::install('BSgenome.Hsapiens.UCSC.hg38')\nBiocManager::install('Biostrings')\nBiocManager::install('rtracklayer')\nBiocManager::install('ggplot2')\nBiocManager::install('GenomicRanges')\nBiocManager::install('ShortRead')\nBiocManager::install('Rsubread')\nBiocManager::install('Rsamtools')\nBiocManager::install('Rbowtie2')\nBiocManager::install('stringi')\nBiocManager::install('Rhisat2')\nBiocManager::install('R.utils')\nBiocManager::install('GenomicAlignments')\nBiocManager::install('basecallQC')\nBiocManager::install('TxDb.Mmusculus.UCSC.mm10.knownGene')\nBiocManager::install('TxDb.Hsapiens.UCSC.hg19.knownGene')\nBiocManager::install('Rfastp')\nBiocManager::install('TxDb.Hsapiens.UCSC.hg38.knownGene')\nBiocManager::install('knitr')\nBiocManager::install('testthat')\nBiocManager::install('yaml')"
  },
  {
    "objectID": "materials/singlepage/Day03.html",
    "href": "materials/singlepage/Day03.html",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Bioconductor (BioC) is an open source, community driven software project which provides a framework of tools and databases for the analysis of biological data in R.\nStarted in 2001 with Robert Gentleman.\nGained popularity through microarray analysis packages (MArray/Limma).\nCore reviewed and versioned R packages.\nTwo major releases every year (R has one major release).\nGreat support for High Throughput sequencing."
  },
  {
    "objectID": "materials/singlepage/Day03.html#about-bioconductor",
    "href": "materials/singlepage/Day03.html#about-bioconductor",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Bioconductor (BioC) is an open source, community driven software project which provides a framework of tools and databases for the analysis of biological data in R.\nStarted in 2001 with Robert Gentleman.\nGained popularity through microarray analysis packages (MArray/Limma).\nCore reviewed and versioned R packages.\nTwo major releases every year (R has one major release).\nGreat support for High Throughput sequencing."
  },
  {
    "objectID": "materials/singlepage/Day03.html#bioconductor-goals",
    "href": "materials/singlepage/Day03.html#bioconductor-goals",
    "title": "R for Bioinformatics",
    "section": "Bioconductor Goals",
    "text": "Bioconductor Goals\nThe broad goals of the Bioconductor project are: - To provide widespread access to a broad range of powerful statistical and graphical methods for the analysis of genomic data.\n\nTo facilitate the inclusion of biological metadata in the analysis of genomic data, e.g.¬†literature data from PubMed, annotation data from Entrez genes.\nTo provide a common software platform that enables the rapid development and deployment of extensible, scalable, and interoperable software.\nTo further scientific understanding by producing high-quality documentation and reproducible research.\nTo train researchers on computational and statistical methods for the analysis of genomic data."
  },
  {
    "objectID": "materials/singlepage/Day03.html#installing-bioconductor-and-packages",
    "href": "materials/singlepage/Day03.html#installing-bioconductor-and-packages",
    "title": "R for Bioinformatics",
    "section": "Installing Bioconductor and packages",
    "text": "Installing Bioconductor and packages\nInstalling Bioconductor/Bioconductor packages is quite straight forward. Every Bioconductor package has a description of the installation R command we can simply copy and paste.\nInstall Bioconductor:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.10\")\n\n# Install a package:\n\nBiocManager::install(\"basecallQC\")"
  },
  {
    "objectID": "materials/slides/Day 02/index.html",
    "href": "materials/slides/Day 02/index.html",
    "title": "R for Research",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#agenda",
    "href": "materials/slides/Day 02/index.html#agenda",
    "title": "R for Research",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#what-is-data-structure",
    "href": "materials/slides/Day 02/index.html#what-is-data-structure",
    "title": "R for Research",
    "section": "What is Data Structure?",
    "text": "What is Data Structure?\n\nData structures are ways of organizing and storing data in a computer system.\nThey define the format, organization, and relationship between data elements.\nData structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\nThey provide a foundation for building algorithms and designing efficient programs."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#data-structures-in-r",
    "href": "materials/slides/Day 02/index.html#data-structures-in-r",
    "title": "R for Research",
    "section": "Data Structures in R",
    "text": "Data Structures in R\n\nVectors\nMatrix\nLists\nData Frame\nFactor"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#types-of-data-structures-in-r",
    "href": "materials/slides/Day 02/index.html#types-of-data-structures-in-r",
    "title": "R for Research",
    "section": "Types of Data Structures in R",
    "text": "Types of Data Structures in R\n\nOne-Dimensional Data Structures\n\nOne-dimensional data structures in R are used to store and manipulate data along a single dimension.\nThe main one-dimensional data structure in R is the vector.\n\nTwo-Dimensional Data Structures\n\nTwo-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\nThe main two-dimensional data structures in R are matrices and data frames."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#strings",
    "href": "materials/slides/Day 02/index.html#strings",
    "title": "R for Research",
    "section": "Strings",
    "text": "Strings\n\nA string is a sequence of characters. For example, \"Programming\" is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\nIn R, we represent strings using quotation marks (double quotes, ‚Äù ‚Äù or single quotes, ‚Äô ‚Äô). For example,\n\n\n# string value using single quotes\n'Hello' \n[1] ‚ÄúHello‚Äù\n# string value using double quotes \n\"Hello\" \n[1] ‚ÄúHello‚Äù"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#string-operations-in-r",
    "href": "materials/slides/Day 02/index.html#string-operations-in-r",
    "title": "R for Research",
    "section": "String Operations in R",
    "text": "String Operations in R\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\nFind the length of a string\nJoin two strings\nCompare two strings\nChange the string case"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#find-length-of-string",
    "href": "materials/slides/Day 02/index.html#find-length-of-string",
    "title": "R for Research",
    "section": "Find Length of String",
    "text": "Find Length of String\nWe use the nchar() method to find the length of a string. For example,\n\nmessage1 &lt;- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n[1] 17\n\nHere, nchar() returns the number of characters present inside the string."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#join-strings-together",
    "href": "materials/slides/Day 02/index.html#join-strings-together",
    "title": "R for Research",
    "section": "Join Strings Together",
    "text": "Join Strings Together\nIn R, we can use the paste() function to join two or more strings together. For example,\n\nmessage1 &lt;- \"CHIRAL\"\nmessage2 &lt;- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n[1] ‚ÄúCHIRAL Bangladesh‚Äù\n\nHere, we have used the paste() function to join two strings: message1 and message2."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#compare-two-strings-in-r-programming",
    "href": "materials/slides/Day 02/index.html#compare-two-strings-in-r-programming",
    "title": "R for Research",
    "section": "Compare Two Strings in R Programming",
    "text": "Compare Two Strings in R Programming\nWe use the == operator to compare two strings. If two strings are equal, the operator returns TRUE. Otherwise, it returns FALSE. For example,\n\nmessage1 &lt;- \"Hello, World!\"\nmessage2 &lt;- \"Hi, Bangladesh!\"\nmessage3 &lt;- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n[1] FALSE\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n[1] FALSE"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#change-case-of-r-string",
    "href": "materials/slides/Day 02/index.html#change-case-of-r-string",
    "title": "R for Research",
    "section": "Change Case of R String",
    "text": "Change Case of R String\nIn R, we can change the case of a string using\n\ntoupper() - convert string to uppercase\ntolower() - convert string to lowercase\n\n\nmessage &lt;- \"R Programming\"\n\n# change string to uppercase\nmessage_upper &lt;- toupper(message)\nmessage_upper\n[1] ‚ÄúR PROGRAMMING‚Äù\n# change string to lowercase\nmessage_lower &lt;- tolower(message)\nmessage_lower\n[1] ‚Äúr programming‚Äù"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#vector",
    "href": "materials/slides/Day 02/index.html#vector",
    "title": "R for Research",
    "section": "Vector",
    "text": "Vector\n\nVector is a basic data structure in R.\nIt contains element of the same type.\nThe data types can be logical, integer, double, character, and complex.\nA vector‚Äôs type can be checked with the typeof() function."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-vectors---using-the-c-function",
    "href": "materials/slides/Day 02/index.html#creating-vectors---using-the-c-function",
    "title": "R for Research",
    "section": "Creating Vectors - Using the c() Function",
    "text": "Creating Vectors - Using the c() Function\nThe c() function is used to concatenate or combine elements into a vector.\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-vectors---using-the-operator",
    "href": "materials/slides/Day 02/index.html#creating-vectors---using-the-operator",
    "title": "R for Research",
    "section": "Creating Vectors - Using the : Operator",
    "text": "Creating Vectors - Using the : Operator\nThe : operator generates a sequence of numbers from the starting value to the ending value.\n\n# Numeric sequence vector\nnumeric_sequence &lt;- 1:10"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-vectors---using-sequence-generation-functions",
    "href": "materials/slides/Day 02/index.html#creating-vectors---using-sequence-generation-functions",
    "title": "R for Research",
    "section": "Creating Vectors - Using Sequence Generation Functions",
    "text": "Creating Vectors - Using Sequence Generation Functions\nR provides functions like seq(), rep(), and seq_len() to generate sequences of numbers.\n\n# Numeric sequence vector using seq()\nnumeric_sequence &lt;- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values &lt;- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence &lt;- seq_len(10)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-vectors---using-vectorized-operations",
    "href": "materials/slides/Day 02/index.html#creating-vectors---using-vectorized-operations",
    "title": "R for Research",
    "section": "Creating Vectors - Using Vectorized Operations",
    "text": "Creating Vectors - Using Vectorized Operations\nVectors can be created by performing operations on existing vectors or values.\n\n# Vector created using vectorized operation\nnew_vector &lt;- numeric_vector * 2"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-vectors---mixing-objects",
    "href": "materials/slides/Day 02/index.html#creating-vectors---mixing-objects",
    "title": "R for Research",
    "section": "Creating Vectors - Mixing Objects",
    "text": "Creating Vectors - Mixing Objects\n\n# Character \nx &lt;- c(1.7, \"a\")\n# Numeric \ny &lt;- c(TRUE, 2)\n# Character \nz &lt;- c(\"a\", TRUE)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#matrix",
    "href": "materials/slides/Day 02/index.html#matrix",
    "title": "R for Research",
    "section": "Matrix",
    "text": "Matrix\n\nMatrix is a two dimensional data structure in R programming.\nMatrix is similar to vector but additionally contains the dimension attributes.\nAll attributes of an object can be checked by attributes() function.\nDimension can be checked by directly with the dim()function. We can check if a variable is a matrix or not with the class() function."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creatinig-matrix",
    "href": "materials/slides/Day 02/index.html#creatinig-matrix",
    "title": "R for Research",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\nMatrix can be created using the matrix() function. Here‚Äôs the general syntax:\n\n\nmatrix(data, nrow, ncol, byrow, dimnames)\n\n\ndata: The data elements used to fill the matrix. It can be a vector or a combination of vectors.\nnrow: The number of rows in the matrix.\nncol: The number of columns in the matrix.\nbyrow: A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\ndimnames: Optional names for the rows and columns of the matrix."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creatinig-matrix-1",
    "href": "materials/slides/Day 02/index.html#creatinig-matrix-1",
    "title": "R for Research",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\n# Create a matrix using matrix function \nmat1 &lt;- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 &lt;- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#matrix-properties",
    "href": "materials/slides/Day 02/index.html#matrix-properties",
    "title": "R for Research",
    "section": "Matrix Properties",
    "text": "Matrix Properties\n\n# Create a matrix using matrix function \nmat &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n[1] ‚ÄúA‚Äù ‚ÄúB‚Äù ‚ÄúC‚Äù\n# Row Names \nrownames(mat)\n[1] ‚ÄúX‚Äù ‚ÄúY‚Äù ‚ÄúZ‚Äù\n# Dimension \ndim(mat)\n[1] 3 3"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#list",
    "href": "materials/slides/Day 02/index.html#list",
    "title": "R for Research",
    "section": "List",
    "text": "List\n\nList is a data structure having components of mixed data types.\nA vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\nWe can check if it‚Äôs a list with typeof() function and find its length using length() function."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-list",
    "href": "materials/slides/Day 02/index.html#creating-list",
    "title": "R for Research",
    "section": "Creating List",
    "text": "Creating List\nList can be created using the list() function. Here‚Äôs the general syntax:\n\nlist(..., recursive = FALSE)\n\n\n...: The elements to be included in the list, separated by commas.\nrecursive: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default)."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-list-1",
    "href": "materials/slides/Day 02/index.html#creating-list-1",
    "title": "R for Research",
    "section": "Creating List",
    "text": "Creating List\n\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list &lt;- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#factors",
    "href": "materials/slides/Day 02/index.html#factors",
    "title": "R for Research",
    "section": "Factors",
    "text": "Factors\n\nIn R, factors are used to represent categorical or discrete data with predefined levels or categories.\nFactors are useful when working with data that has distinct categories or when performing statistical analysis.\nFactors are used to represent categorical data and can be ordered and unordered."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-factors",
    "href": "materials/slides/Day 02/index.html#creating-factors",
    "title": "R for Research",
    "section": "Creating Factors",
    "text": "Creating Factors\nFactors are created using the factor() function in R. Here‚Äôs the general syntax:\n\nfactor(x, levels, labels, ordered = FALSE)\n\n\nx: A vector or column of data that represents the categorical variable.\nlevels: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\nlabels: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\nordered: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default)."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-factors-1",
    "href": "materials/slides/Day 02/index.html#creating-factors-1",
    "title": "R for Research",
    "section": "Creating Factors",
    "text": "Creating Factors\n\n# Create a factor using factor() function \nf &lt;- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n[1] ‚Äúno‚Äù ‚Äúyes‚Äù"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#data-frame",
    "href": "materials/slides/Day 02/index.html#data-frame",
    "title": "R for Research",
    "section": "Data Frame",
    "text": "Data Frame\n\nIn R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\nIt consists of rows and columns, where each column can have a different data type.\nData frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\nData frames can be created using the data.frame() function or by importing data from external sources."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#create-data-frame",
    "href": "materials/slides/Day 02/index.html#create-data-frame",
    "title": "R for Research",
    "section": "Create Data Frame",
    "text": "Create Data Frame\nData frames can be created using the data.frame() function or by importing data from external sources. Here‚Äôs an example of creating a data frame in R:\n\n# Create a data frame\ndf &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#data-conversion-functions-in-r",
    "href": "materials/slides/Day 02/index.html#data-conversion-functions-in-r",
    "title": "R for Research",
    "section": "Data Conversion Functions in R",
    "text": "Data Conversion Functions in R\n\nConversion functions in R help transform data between different types and formats.\nas.character(), as.numeric(), as.integer(), as.logical(), and as.factor() are commonly used conversion functions.\nThese functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#as.character",
    "href": "materials/slides/Day 02/index.html#as.character",
    "title": "R for Research",
    "section": "as.character()",
    "text": "as.character()\n\nas.character() function converts an object to a character string representation.\nSyntax: as.character(x)\nx: The object to be converted.\n\n\n# Convert numeric values to character strings\nnumbers &lt;- c(1, 2, 3)\ncharacter_numbers &lt;- as.character(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#as.numeric",
    "href": "materials/slides/Day 02/index.html#as.numeric",
    "title": "R for Research",
    "section": "as.numeric()",
    "text": "as.numeric()\n\nas.numeric() function converts an object to numeric (floating-point) values.\nSyntax: as.numeric(x)\nx: The object to be converted.\n\n\n# Convert character strings to numeric values\ncharacter_numbers &lt;- c(\"1\", \"2\", \"3\")\nnumeric_numbers &lt;- as.numeric(character_numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#as.integer",
    "href": "materials/slides/Day 02/index.html#as.integer",
    "title": "R for Research",
    "section": "as.integer()",
    "text": "as.integer()\n\nas.integer() function converts an object to integer values.\nSyntax: as.integer(x)\nx: The object to be converted.\n\n\n# Convert numeric values to integer values\nnumbers &lt;- c(1.5, 2.7, 3.9)\ninteger_numbers &lt;- as.integer(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#as.logical",
    "href": "materials/slides/Day 02/index.html#as.logical",
    "title": "R for Research",
    "section": "as.logical()",
    "text": "as.logical()\n\nas.logical() function converts an object to logical (boolean) values.\nSyntax: as.logical(x)\nx: The object to be converted.\n\n\n# Convert numeric values to logical values\nnumbers &lt;- c(0, 1, 2)\nlogical_values &lt;- as.logical(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#as.factor",
    "href": "materials/slides/Day 02/index.html#as.factor",
    "title": "R for Research",
    "section": "as.factor()",
    "text": "as.factor()\n\nas.factor() function converts an object to a factor, which represents categorical data.\nSyntax: as.factor(x)\nx: The object to be converted."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-a-vector",
    "href": "materials/slides/Day 02/index.html#subsetting-a-vector",
    "title": "R for Research",
    "section": "Subsetting a Vector",
    "text": "Subsetting a Vector\n\nSubsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-vector-elements-by-index",
    "href": "materials/slides/Day 02/index.html#subsetting-vector-elements-by-index",
    "title": "R for Research",
    "section": "Subsetting Vector Elements by Index",
    "text": "Subsetting Vector Elements by Index\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n[1] 30\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-vector-elements-by-logical-condition",
    "href": "materials/slides/Day 02/index.html#subsetting-vector-elements-by-logical-condition",
    "title": "R for Research",
    "section": "Subsetting Vector Elements by Logical Condition",
    "text": "Subsetting Vector Elements by Logical Condition\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n[1] 40 50\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-vector-elements-using-operator",
    "href": "materials/slides/Day 02/index.html#subsetting-vector-elements-using-operator",
    "title": "R for Research",
    "section": "Subsetting Vector Elements Using : Operator",
    "text": "Subsetting Vector Elements Using : Operator\nThe : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n[1] 20 30 40\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-vector-elements-using-c-function",
    "href": "materials/slides/Day 02/index.html#subsetting-vector-elements-using-c-function",
    "title": "R for Research",
    "section": "Subsetting Vector Elements Using c() Function",
    "text": "Subsetting Vector Elements Using c() Function\nThe c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n[1] 10 30 50\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-list",
    "href": "materials/slides/Day 02/index.html#subsetting-list",
    "title": "R for Research",
    "section": "Subsetting List",
    "text": "Subsetting List\n\nSubsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ]."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-list-elements-by-index",
    "href": "materials/slides/Day 02/index.html#subsetting-list-elements-by-index",
    "title": "R for Research",
    "section": "Subsetting List Elements by Index",
    "text": "Subsetting List Elements by Index\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n[1] ‚Äúbanana‚Äù\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-list-elements-by-name",
    "href": "materials/slides/Day 02/index.html#subsetting-list-elements-by-name",
    "title": "R for Research",
    "section": "Subsetting List Elements by Name",
    "text": "Subsetting List Elements by Name\n\nmy_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n[1] ‚Äúorange‚Äù\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-a-subset-of-list-elements",
    "href": "materials/slides/Day 02/index.html#subsetting-a-subset-of-list-elements",
    "title": "R for Research",
    "section": "Subsetting a Subset of List Elements",
    "text": "Subsetting a Subset of List Elements\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n[[1]] [1] ‚Äúbanana‚Äù\n[[2]] [1] ‚Äúorange‚Äù\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-matrix",
    "href": "materials/slides/Day 02/index.html#subsetting-matrix",
    "title": "R for Research",
    "section": "Subsetting Matrix",
    "text": "Subsetting Matrix\n\nSubsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-rows",
    "href": "materials/slides/Day 02/index.html#subsetting-rows",
    "title": "R for Research",
    "section": "Subsetting Rows",
    "text": "Subsetting Rows\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n[1] 1 3 5\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-columns",
    "href": "materials/slides/Day 02/index.html#subsetting-columns",
    "title": "R for Research",
    "section": "Subsetting Columns",
    "text": "Subsetting Columns\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n[1] 3 4\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#subsetting-elements",
    "href": "materials/slides/Day 02/index.html#subsetting-elements",
    "title": "R for Research",
    "section": "Subsetting Elements",
    "text": "Subsetting Elements\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n[1] 2\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#control-flow-structure",
    "href": "materials/slides/Day 02/index.html#control-flow-structure",
    "title": "R for Research",
    "section": "Control Flow Structure",
    "text": "Control Flow Structure\n\nControl flow refers to the order in which instructions are executed in a program.\nIn R, control flow is managed through various constructs that allow for conditional execution, loop iterations, and branching.\nConditionals - if, if..else, if..else..elif\nLoops - for, while, repeat"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if-statement",
    "href": "materials/slides/Day 02/index.html#if-statement",
    "title": "R for Research",
    "section": "if statement",
    "text": "if statement\nThe if statement allows for conditional execution of code blocks.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if-statement-1",
    "href": "materials/slides/Day 02/index.html#if-statement-1",
    "title": "R for Research",
    "section": "if statement",
    "text": "if statement\n\n# example \nx &lt;- 5\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n}\n[1] ‚Äúx is positive.‚Äù\n\n\nThe variable x is assigned a value of 5.\nThe if statement checks if x is greater than 0.\nSince the condition is TRUE (5 is greater than 0), the code block inside the curly braces is executed.\nResult: The message \"x is positive.\" is printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if..else-statement",
    "href": "materials/slides/Day 02/index.html#if..else-statement",
    "title": "R for Research",
    "section": "if..else statement",
    "text": "if..else statement\nThe if-else statement allows you to execute different code blocks based on a condition.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if..else-statement-1",
    "href": "materials/slides/Day 02/index.html#if..else-statement-1",
    "title": "R for Research",
    "section": "if..else statement",
    "text": "if..else statement\n\n# example \nx &lt;- -2\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n[1] ‚Äúx is negative.‚Äù\n\n\nThe variable x is assigned a value of -2.\nThe if statement checks if x is greater than 0.\nSince the condition is FALSE (-2 is not greater than 0), the code block inside the else clause is executed.\nResult: The message \"x is negative.\" is printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if..else-if..else-statement",
    "href": "materials/slides/Day 02/index.html#if..else-if..else-statement",
    "title": "R for Research",
    "section": "if..else if..else statement",
    "text": "if..else if..else statement\nThe if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#if..else-if..else-statement-1",
    "href": "materials/slides/Day 02/index.html#if..else-if..else-statement-1",
    "title": "R for Research",
    "section": "if..else if..else statement",
    "text": "if..else if..else statement\n\n# example \nx &lt;- 0\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else if (x &lt; 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n[1] ‚Äúx is zero.‚Äù\n\n\nThe variable x is assigned a value of0.\nThe if statement checks if x is greater than 0, then if it is less than 0.\nSince none of the conditions are TRUE, the code block inside the else clause is executed.\nResult: The message \"x is zero.\" is printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#ifelse-function",
    "href": "materials/slides/Day 02/index.html#ifelse-function",
    "title": "R for Research",
    "section": "ifelse function",
    "text": "ifelse function\n\nThe ifelse() function in R is a vectorized version of the if-else statement.\nIt allows you to perform conditional operations on elements of a vector or data frame based on a specified condition.\n\n\n# Syntax \nifelse(condition, true_value, false_value)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#ifelse-function-1",
    "href": "materials/slides/Day 02/index.html#ifelse-function-1",
    "title": "R for Research",
    "section": "ifelse function",
    "text": "ifelse function\n\n# example \nx &lt;- c(1, 2, 3, 4, 5)\nresult &lt;- ifelse(x &gt; 3, \"Greater\", \"Less or equal\")\nresult\n[1] ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúGreater‚Äù\n[5] ‚ÄúGreater‚Äù\n\n\nThe vector x contains numeric values.\nThe ifelse function checks if each element of x is greater than 3.\nFor elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value ‚ÄúGreater‚Äù. Otherwise, it is assigned the value ‚ÄúLess or equal‚Äù.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#handling-missing-values-with-ifelse",
    "href": "materials/slides/Day 02/index.html#handling-missing-values-with-ifelse",
    "title": "R for Research",
    "section": "Handling Missing Values with ifelse()",
    "text": "Handling Missing Values with ifelse()\nThe ifelse function can handle missing values (NA) in the input vectors.\n\nx &lt;- c(1, 2, NA, 4, 5)\n\nresult &lt;- ifelse(is.na(x), \"Missing\", ifelse(x &gt; 3, \"Greater\", \"Less or equal\"))\nresult\n[1] ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúMissing‚Äù ‚ÄúGreater‚Äù\n[5] ‚ÄúGreater‚Äù\n\n\nThe vector x contains numeric values, including a missing value (NA).\nThe first ifelse checks if each element of x is missing (NA).\nIf TRUE, the element is assigned the value ‚ÄúMissing‚Äù.\nIf FALSE, the second ifelse checks if the element is greater than 3, assigning ‚ÄúGreater‚Äù or ‚ÄúLess or equal‚Äù accordingly.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúMissing‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#ifelse-with-data-frames",
    "href": "materials/slides/Day 02/index.html#ifelse-with-data-frames",
    "title": "R for Research",
    "section": "ifelse() with Data Frames",
    "text": "ifelse() with Data Frames\nThe ifelse() function can be applied to specific columns of a data frame.\n\ndf &lt;- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category &lt;- ifelse(df$Age &gt;= 30, \"Senior\", \"Junior\")\n\n\nThe data frame df contains columns for names and ages.\nThe ifelse function is applied to the Age column.\nIf the age is greater than or equal to 30, the Category column is assigned the value ‚ÄúSenior‚Äù. Otherwise, it is assigned ‚ÄúJunior‚Äù.\nResult: The df data frame will have an additional column Category with values c(‚ÄúJunior‚Äù, ‚ÄúJunior‚Äù, ‚ÄúSenior‚Äù)."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#for-loop",
    "href": "materials/slides/Day 02/index.html#for-loop",
    "title": "R for Research",
    "section": "for loop",
    "text": "for loop\nThe for loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#for-loop-example",
    "href": "materials/slides/Day 02/index.html#for-loop-example",
    "title": "R for Research",
    "section": "for loop Example",
    "text": "for loop Example\n\n# Example \nfor (i in 1:5) {\n  print(i)\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5\n\n\nThe for loop iterates over the sequence 1:5.\nIn each iteration, the loop variable i takes the value of the current element in the sequence.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#using-for-loop-with-vector",
    "href": "materials/slides/Day 02/index.html#using-for-loop-with-vector",
    "title": "R for Research",
    "section": "Using for Loop with Vector",
    "text": "Using for Loop with Vector\nThe for loop can be used to iterate over elements of a vector.\n\nfruits &lt;- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n[1] ‚Äúapple‚Äù [1] ‚Äúbanana‚Äù [1] ‚Äúorange‚Äù\n\n\nThe vector fruits contains strings representing different fruits.\nThe for loop iterates over each element of the fruits vector.\nIn each iteration, the loop variable fruit takes the value of the current element.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\nResult: The strings ‚Äúapple‚Äù, ‚Äúbanana‚Äù, and ‚Äúorange‚Äù are printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#controlling-for-loop-with-conditions",
    "href": "materials/slides/Day 02/index.html#controlling-for-loop-with-conditions",
    "title": "R for Research",
    "section": "Controlling for Loop with Conditions",
    "text": "Controlling for Loop with Conditions\nYou can control the behavior of a for loop using conditional statements.\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n[1] ‚Äú1 is odd‚Äù [1] ‚Äú2 is even‚Äù [1] ‚Äú3 is odd‚Äù [1] ‚Äú4 is even‚Äù [1] ‚Äú5 is odd‚Äù [1] ‚Äú6 is even‚Äù [1] ‚Äú7 is odd‚Äù [1] ‚Äú8 is even‚Äù [1] ‚Äú9 is odd‚Äù [1] ‚Äú10 is even‚Äù"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#controlling-for-loop-with-conditions-1",
    "href": "materials/slides/Day 02/index.html#controlling-for-loop-with-conditions-1",
    "title": "R for Research",
    "section": "Controlling for Loop with Conditions",
    "text": "Controlling for Loop with Conditions\n\nThe for loop iterates over the sequence 1:10.\nIn each iteration, the loop variable i takes the value of the current element.\nThe if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#while-loop",
    "href": "materials/slides/Day 02/index.html#while-loop",
    "title": "R for Research",
    "section": "while loop",
    "text": "while loop\nThe while loop in R allows for executing a block of code repeatedly as long as a specified condition is TRUE.\n\nwhile (condition) {\n  # Code block to be executed\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#while-loop-example",
    "href": "materials/slides/Day 02/index.html#while-loop-example",
    "title": "R for Research",
    "section": "while Loop Example",
    "text": "while Loop Example\n\ni &lt;- 1\n\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 5.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nAfter printing, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#using-while-loop-with-conditional-statements",
    "href": "materials/slides/Day 02/index.html#using-while-loop-with-conditional-statements",
    "title": "R for Research",
    "section": "Using while Loop with Conditional Statements",
    "text": "Using while Loop with Conditional Statements\nYou can use conditional statements within a while loop to control its behavior.\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i &lt;- i + 1\n}\n[1] ‚Äú1 is odd‚Äù [1] ‚Äú2 is even‚Äù [1] ‚Äú3 is odd‚Äù [1] ‚Äú4 is even‚Äù [1] ‚Äú5 is odd‚Äù [1] ‚Äú6 is even‚Äù [1] ‚Äú7 is odd‚Äù [1] ‚Äú8 is even‚Äù [1] ‚Äú9 is odd‚Äù [1] ‚Äú10 is even‚Äù"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#using-while-loop-with-conditional-statements-1",
    "href": "materials/slides/Day 02/index.html#using-while-loop-with-conditional-statements-1",
    "title": "R for Research",
    "section": "Using while Loop with Conditional Statements",
    "text": "Using while Loop with Conditional Statements\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nAfter executing the code block, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#controlling-while-loop-with-external-conditions",
    "href": "materials/slides/Day 02/index.html#controlling-while-loop-with-external-conditions",
    "title": "R for Research",
    "section": "Controlling while Loop with External Conditions",
    "text": "Controlling while Loop with External Conditions\nYou can control the behavior of a while loop by modifying external conditions within the loop.\n\nx &lt;- 10\n\nwhile (x &gt; 0) {\n  print(x)\n  x &lt;- x - 2\n}\n[1] 10 [1] 8 [1] 6 [1] 4 [1] 2"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#controlling-while-loop-with-external-conditions-1",
    "href": "materials/slides/Day 02/index.html#controlling-while-loop-with-external-conditions-1",
    "title": "R for Research",
    "section": "Controlling while Loop with External Conditions",
    "text": "Controlling while Loop with External Conditions\n\nThe variable x is initially set to 10.\nThe while loop continues executing as long as x is greater than 0.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\nAfter printing, x is decremented by 2 using the assignment statement x &lt;- x - 2.\nThe loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 10, 8, 6, 4, and 2 are printed."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#break-statement",
    "href": "materials/slides/Day 02/index.html#break-statement",
    "title": "R for Research",
    "section": "break statement",
    "text": "break statement\n\nThe break statement in R is used to exit a loop prematurely.\nIt is typically used within conditional statements to terminate the loop based on a specific condition."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#break-statement-example",
    "href": "materials/slides/Day 02/index.html#break-statement-example",
    "title": "R for Research",
    "section": "break Statement Example",
    "text": "break Statement Example\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i &lt;- i + 1\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#break-statement-example-1",
    "href": "materials/slides/Day 02/index.html#break-statement-example-1",
    "title": "R for Research",
    "section": "break Statement Example",
    "text": "break Statement Example\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nThe if statement checks if i is equal to 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\nAfter the break statement, the remaining code within the loop is not executed.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#next-statement",
    "href": "materials/slides/Day 02/index.html#next-statement",
    "title": "R for Research",
    "section": "next statement",
    "text": "next statement\n\nThe next statement in R is used to skip the current iteration of a loop and move to the next iteration.\nIt is typically used within conditional statements to control the flow of the loop based on a specific condition."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#next-statement-example",
    "href": "materials/slides/Day 02/index.html#next-statement-example",
    "title": "R for Research",
    "section": "next Statement Example",
    "text": "next Statement Example\n\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n[1] 1 [1] 2 [1] 4 [1] 5\n\n\nThe for loop iterates over the values 1 to 5.\nIn each iteration, the code block inside the curly braces is executed.\nThe if statement checks if i is equal to 3.\nIf the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\nIf the condition is FALSE, the code block continues executing, and the value of i is printed.\nResult: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#repeat-loop",
    "href": "materials/slides/Day 02/index.html#repeat-loop",
    "title": "R for Research",
    "section": "repeat loop",
    "text": "repeat loop\n\nThe repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\nIt provides a way to create an infinite loop that can be terminated using control flow statements."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#repeat-loop-example",
    "href": "materials/slides/Day 02/index.html#repeat-loop-example",
    "title": "R for Research",
    "section": "repeat loop Example",
    "text": "repeat loop Example\n\ni &lt;- 1\n\nrepeat {\n  print(i)\n  i &lt;- i + 1\n  if (i &gt; 5) {\n    break\n  }\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#repeat-loop-example-1",
    "href": "materials/slides/Day 02/index.html#repeat-loop-example-1",
    "title": "R for Research",
    "section": "repeat loop Example",
    "text": "repeat loop Example\n\nThe variable i is initially set to 1.\nThe repeat loop continues executing the code block inside the curly braces indefinitely.\nIn each iteration, the value of i is printed.\nThe variable i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe if statement checks if i is greater than 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate.\nAfter the break statement, the program flow continues with the next statement after the loop.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#functions-in-r",
    "href": "materials/slides/Day 02/index.html#functions-in-r",
    "title": "R for Research",
    "section": "Functions in R",
    "text": "Functions in R\n\nFunctions in R are blocks of reusable code that perform specific tasks.\nThey provide modularity and allow for the organization and reuse of code.\nFunctions can accept input arguments, perform computations, and return output values."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#types-of-functions-in-r",
    "href": "materials/slides/Day 02/index.html#types-of-functions-in-r",
    "title": "R for Research",
    "section": "Types of Functions in R",
    "text": "Types of Functions in R\n\nBuilt-in Functions\nUser-Defined Functions\nRecursive Functions\nAnonymous Functions (Lambda Functions)\nHigher-Order Functions"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#built-in-functions",
    "href": "materials/slides/Day 02/index.html#built-in-functions",
    "title": "R for Research",
    "section": "Built-in Functions",
    "text": "Built-in Functions\n\nR comes with a wide range of built-in functions that are available for immediate use.\nExamples: mean(), sum(), max(), min(), sqrt(), length(), etc.\nThese functions are part of the R language and provide basic operations and computations."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#user-defined-functions",
    "href": "materials/slides/Day 02/index.html#user-defined-functions",
    "title": "R for Research",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\n\nUsers can define their own functions in R to perform specific tasks.\nThese functions are created using the function keyword followed by the function name, arguments, and function body.\nExamples: Custom functions created by users to solve specific problems."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#recursive-functions",
    "href": "materials/slides/Day 02/index.html#recursive-functions",
    "title": "R for Research",
    "section": "Recursive Functions",
    "text": "Recursive Functions\n\nRecursive functions are functions that call themselves during their execution.\nThey are useful for solving problems that can be broken down into smaller, similar sub-problems.\nExamples: Functions that calculate factorials, Fibonacci series, or perform tree traversal."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#anonymous-functions-lambda-functions",
    "href": "materials/slides/Day 02/index.html#anonymous-functions-lambda-functions",
    "title": "R for Research",
    "section": "Anonymous Functions (Lambda Functions)",
    "text": "Anonymous Functions (Lambda Functions)\n\nAnonymous functions, also known as lambda functions, are functions without a formal name.\nThey are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\nExamples: Functions used with higher-order functions like apply(), lapply(), sapply(), etc."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#higher-order-functions",
    "href": "materials/slides/Day 02/index.html#higher-order-functions",
    "title": "R for Research",
    "section": "Higher-Order Functions",
    "text": "Higher-Order Functions\n\nHigher-order functions take other functions as arguments or return functions as their output.\nThey allow for functional programming paradigms in R.\nExamples: apply() family of functions, map() functions from the purrr package."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-a-function",
    "href": "materials/slides/Day 02/index.html#creating-a-function",
    "title": "R for Research",
    "section": "Creating a Function",
    "text": "Creating a Function\n\nTo create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\nThe function body is enclosed in curly braces {} and contains the code to be executed.\n\n\nf &lt;- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-a-function-1",
    "href": "materials/slides/Day 02/index.html#creating-a-function-1",
    "title": "R for Research",
    "section": "Creating a Function",
    "text": "Creating a Function\n\n# Function definition\nmy_function &lt;- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result &lt;- arg1 + arg2\n  return(result)\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#calling-a-function",
    "href": "materials/slides/Day 02/index.html#calling-a-function",
    "title": "R for Research",
    "section": "Calling a Function",
    "text": "Calling a Function\n\nTo call a function in R, use the function name followed by parentheses, passing the required input arguments.\nThe function executes the code within its body and returns the specified output.\n\n\n# Function call\nresult &lt;- my_function(3, 5)\nprint(result)\n[1] 8"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#function-with-default-arguments",
    "href": "materials/slides/Day 02/index.html#function-with-default-arguments",
    "title": "R for Research",
    "section": "Function with Default Arguments",
    "text": "Function with Default Arguments\n\nFunctions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\nDefault arguments are defined using the assignment operator (=) within the function definition.\n\n\n# Function definition with default argument\ngreet &lt;- function(name = \"Guest\") {\n  message &lt;- paste(\"Hello,\", name)\n  print(message)\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#function-with-variable-arguments",
    "href": "materials/slides/Day 02/index.html#function-with-variable-arguments",
    "title": "R for Research",
    "section": "Function with Variable Arguments",
    "text": "Function with Variable Arguments\n\nIn R, functions can accept variable arguments using the ... notation.\nVariable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n# Function definition with variable arguments\ncalculate_sum &lt;- function(...) {\n  numbers &lt;- list(...)\n  total &lt;- sum(numbers)\n  return(total)\n}"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#working-with-dates-and-times-in-r",
    "href": "materials/slides/Day 02/index.html#working-with-dates-and-times-in-r",
    "title": "R for Research",
    "section": "Working with Dates and Times in R",
    "text": "Working with Dates and Times in R\n\nDates and times in R can be represented using different classes and functions.\nLet‚Äôs explore some common operations and functions related to dates and times in R."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#date-and-time-classes",
    "href": "materials/slides/Day 02/index.html#date-and-time-classes",
    "title": "R for Research",
    "section": "Date and Time Classes",
    "text": "Date and Time Classes\n\nDate class: Represents dates without time information.\nPOSIXct class: Represents dates and times with second-level precision.\nPOSIXlt class: Represents dates and times as a list of components."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#creating-dates-and-times",
    "href": "materials/slides/Day 02/index.html#creating-dates-and-times",
    "title": "R for Research",
    "section": "Creating Dates and Times",
    "text": "Creating Dates and Times\n\nas.Date(): Converts a character or numeric value to a Date object.\nas.POSIXct() or as.POSIXlt(): Converts a character or numeric value to a POSIXct or POSIXlt object.\n\n\ndate &lt;- as.Date(\"2023-07-05\")\ndatetime &lt;- as.POSIXct(\"2023-07-05 10:30:00\")"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#formatting-and-parsing-dates-and-times",
    "href": "materials/slides/Day 02/index.html#formatting-and-parsing-dates-and-times",
    "title": "R for Research",
    "section": "Formatting and Parsing Dates and Times",
    "text": "Formatting and Parsing Dates and Times\n\nformat(): Converts a date or time object to a character string with a specified format.\nstrptime(): Parses a character string representing a date or time into a POSIXlt object, based on a specified format.\n\n\nformatted_date &lt;- format(date, format = \"%Y/%m/%d\")\nparsed_datetime &lt;- strptime(\"2023-07-05 10:30:00\", format = \"%Y-%m-%d %H:%M:%S\")"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#extracting-components",
    "href": "materials/slides/Day 02/index.html#extracting-components",
    "title": "R for Research",
    "section": "Extracting Components",
    "text": "Extracting Components\nFunctions likeyear(), month(), day(), hour(), minute(), second() can be used to extract specific components from date and time objects.\n\nhour &lt;- parsed_datetime$hour\nminute &lt;- parsed_datetime$min\nsecond &lt;- parsed_datetime$sec"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#arithmetic-operations",
    "href": "materials/slides/Day 02/index.html#arithmetic-operations",
    "title": "R for Research",
    "section": "Arithmetic Operations",
    "text": "Arithmetic Operations\n\nDates and times can be manipulated using arithmetic operations.\nArithmetic operations on Date objects return new Date objects.\nArithmetic operations on POSIXct objects return new POSIXct objects, maintaining the time information.\n\n\nnext_day &lt;- date + 1"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#time-zones",
    "href": "materials/slides/Day 02/index.html#time-zones",
    "title": "R for Research",
    "section": "Time Zones",
    "text": "Time Zones\n\nR allows working with dates and times in different time zones.\nTime zones can be specified using the tz parameter when creating or converting date and time objects.\n\n\ndatetime_ny &lt;- as.POSIXct(\"2023-07-05 10:30:00\", tz = \"America/New_York\")\n\n\nDates and times in R are represented using different classes: Date, POSIXct, and POSIXlt.\nFunctions like as.Date(), as.POSIXct(), format(), strptime(), etc., facilitate working with dates and times."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#loop-functions---apply-family",
    "href": "materials/slides/Day 02/index.html#loop-functions---apply-family",
    "title": "R for Research",
    "section": "Loop Functions - Apply Family",
    "text": "Loop Functions - Apply Family\n\nThe apply family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\nThese functions eliminate the need for explicit looping and can significantly simplify code."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#apply",
    "href": "materials/slides/Day 02/index.html#apply",
    "title": "R for Research",
    "section": "apply()",
    "text": "apply()\n\napply() function applies a function over margins of an array or matrix.\nSyntax: apply(X, MARGIN, FUN, ‚Ä¶)\nX: The input data structure (array or matrix).\nMARGIN: The dimension or dimensions along which the function should be applied.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to rows of a matrix\nmat &lt;- matrix(1:9, nrow = 3)\nresult &lt;- apply(mat, 1, sum)\nresult\n[1] 12 15 18"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#lapply",
    "href": "materials/slides/Day 02/index.html#lapply",
    "title": "R for Research",
    "section": "lapply()",
    "text": "lapply()\n\nlapply() function applies a function to each element of a list or vector.\nSyntax: lapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sqrt function to each element of a list\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- lapply(numbers, sqrt)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#sapply",
    "href": "materials/slides/Day 02/index.html#sapply",
    "title": "R for Research",
    "section": "sapply()",
    "text": "sapply()\n\nsapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\nSyntax: sapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and simplify the result\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- sapply(numbers, sum)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#vapply",
    "href": "materials/slides/Day 02/index.html#vapply",
    "title": "R for Research",
    "section": "vapply()",
    "text": "vapply()\n\nvapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\nSyntax: vapply(X, FUN, FUN.VALUE, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\nFUN.VALUE: The desired output type and shape.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and specify the output type\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- vapply(numbers, sum, FUN.VALUE = numeric(1))"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#mapply",
    "href": "materials/slides/Day 02/index.html#mapply",
    "title": "R for Research",
    "section": "mapply()",
    "text": "mapply()\n\nmapply() function applies a function to multiple vectors or lists in parallel.\nSyntax: mapply(FUN, ‚Ä¶, MoreArgs = NULL, SIMPLIFY = TRUE)\nFUN: The function to be applied.\n‚Ä¶: Multiple input vectors or lists.\nMoreArgs: Additional arguments to be passed to the function.\nSIMPLIFY: Whether to simplify the result if possible.\n\n\n# Apply a function to multiple vectors in parallel\nvector1 &lt;- c(1, 2, 3)\nvector2 &lt;- c(4, 5, 10)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#simulations",
    "href": "materials/slides/Day 02/index.html#simulations",
    "title": "R for Research",
    "section": "Simulations",
    "text": "Simulations\n\nSimulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations."
  },
  {
    "objectID": "materials/slides/Day 02/index.html#generating-random-numbers",
    "href": "materials/slides/Day 02/index.html#generating-random-numbers",
    "title": "R for Research",
    "section": "Generating Random Numbers",
    "text": "Generating Random Numbers\n\nrunif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#generating-random-integers",
    "href": "materials/slides/Day 02/index.html#generating-random-integers",
    "title": "R for Research",
    "section": "Generating Random Integers",
    "text": "Generating Random Integers\n\nsample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#generating-random-samples-from-a-vector",
    "href": "materials/slides/Day 02/index.html#generating-random-samples-from-a-vector",
    "title": "R for Research",
    "section": "Generating Random Samples from a Vector",
    "text": "Generating Random Samples from a Vector\n\nsample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#generating-random-numbers-from-distributions",
    "href": "materials/slides/Day 02/index.html#generating-random-numbers-from-distributions",
    "title": "R for Research",
    "section": "Generating Random Numbers from Distributions",
    "text": "Generating Random Numbers from Distributions\n\nR provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)"
  },
  {
    "objectID": "materials/slides/Day 02/index.html#seeding-random-number-generation",
    "href": "materials/slides/Day 02/index.html#seeding-random-number-generation",
    "title": "R for Research",
    "section": "Seeding Random Number Generation",
    "text": "Seeding Random Number Generation\n\nTo reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition.\n\n\n\n\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n\n[1] 30\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed.\n\n\n\n\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n\n[1] 40 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed.\n\n\n\n\nThe : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n\n[1] 20 30 40\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed.\n\n\n\n\nThe c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n\n[1] 10 30 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed.\n\n\n\n\n\nSubsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ].\n\n\n\n\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n\n[1] \"banana\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed.\n\n\n\n\n\nmy_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n\n[1] \"orange\"\n\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed.\n\n\n\n\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed.\n\n\n\n\n\nSubsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n\n[1] 1 3 5\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n\n[1] 3 4\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n\n[1] 2\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-a-vector",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-a-vector",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-by-index",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-by-index",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "vector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n\n[1] 30\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-by-logical-condition",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-by-logical-condition",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "vector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n\n[1] 40 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-using-operator",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-using-operator",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "The : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n\n[1] 20 30 40\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-using-c-function",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-vector-elements-using-c-function",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "The c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n\n[1] 10 30 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ]."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list-elements-by-index",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list-elements-by-index",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n\n[1] \"banana\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list-elements-by-name",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-list-elements-by-name",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n\n[1] \"orange\"\n\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-a-subset-of-list-elements",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-a-subset-of-list-elements",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-matrix",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-matrix",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-rows",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-rows",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n\n[1] 1 3 5\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-columns",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-columns",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n\n[1] 3 4\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-elements",
    "href": "materials/slides/Day 02/01-subsetting-robjects.html#subsetting-elements",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n\n[1] 2\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html",
    "href": "materials/slides/Day 02/00-data-structures.html",
    "title": "",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#agenda",
    "href": "materials/slides/Day 02/00-data-structures.html#agenda",
    "title": "",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#what-is-data-structure",
    "href": "materials/slides/Day 02/00-data-structures.html#what-is-data-structure",
    "title": "",
    "section": "What is Data Structure?",
    "text": "What is Data Structure?\n\nData structures are ways of organizing and storing data in a computer system.\nThey define the format, organization, and relationship between data elements.\nData structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\nThey provide a foundation for building algorithms and designing efficient programs."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#data-structures-in-r",
    "href": "materials/slides/Day 02/00-data-structures.html#data-structures-in-r",
    "title": "",
    "section": "Data Structures in R",
    "text": "Data Structures in R\n\nVectors\nMatrix\nLists\nData Frame\nFactor"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#types-of-data-structures-in-r",
    "href": "materials/slides/Day 02/00-data-structures.html#types-of-data-structures-in-r",
    "title": "",
    "section": "Types of Data Structures in R",
    "text": "Types of Data Structures in R\n\nOne-Dimensional Data Structures\n\nOne-dimensional data structures in R are used to store and manipulate data along a single dimension.\nThe main one-dimensional data structure in R is the vector.\n\nTwo-Dimensional Data Structures\n\nTwo-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\nThe main two-dimensional data structures in R are matrices and data frames."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#strings",
    "href": "materials/slides/Day 02/00-data-structures.html#strings",
    "title": "",
    "section": "Strings",
    "text": "Strings\n\nA string is a sequence of characters. For example, \"Programming\" is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\nIn R, we represent strings using quotation marks (double quotes, ‚Äù ‚Äù or single quotes, ‚Äô ‚Äô). For example,\n\n\n# string value using single quotes\n'Hello' \n\n[1] \"Hello\"\n\n# string value using double quotes \n\"Hello\" \n\n[1] \"Hello\""
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#string-operations-in-r",
    "href": "materials/slides/Day 02/00-data-structures.html#string-operations-in-r",
    "title": "",
    "section": "String Operations in R",
    "text": "String Operations in R\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\nFind the length of a string\nJoin two strings\nCompare two strings\nChange the string case"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#find-length-of-string",
    "href": "materials/slides/Day 02/00-data-structures.html#find-length-of-string",
    "title": "",
    "section": "Find Length of String",
    "text": "Find Length of String\nWe use the nchar() method to find the length of a string. For example,\n\nmessage1 &lt;- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n\n[1] 17\n\n\nHere, nchar() returns the number of characters present inside the string."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#join-strings-together",
    "href": "materials/slides/Day 02/00-data-structures.html#join-strings-together",
    "title": "",
    "section": "Join Strings Together",
    "text": "Join Strings Together\nIn R, we can use the paste() function to join two or more strings together. For example,\n\nmessage1 &lt;- \"CHIRAL\"\nmessage2 &lt;- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n\n[1] \"CHIRAL Bangladesh\"\n\n\nHere, we have used the paste() function to join two strings: message1 and message2."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#compare-two-strings-in-r-programming",
    "href": "materials/slides/Day 02/00-data-structures.html#compare-two-strings-in-r-programming",
    "title": "",
    "section": "Compare Two Strings in R Programming",
    "text": "Compare Two Strings in R Programming\nWe use the == operator to compare two strings. If two strings are equal, the operator returns TRUE. Otherwise, it returns FALSE. For example,\n\nmessage1 &lt;- \"Hello, World!\"\nmessage2 &lt;- \"Hi, Bangladesh!\"\nmessage3 &lt;- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n\n[1] FALSE\n\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n\n[1] FALSE"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#change-case-of-r-string",
    "href": "materials/slides/Day 02/00-data-structures.html#change-case-of-r-string",
    "title": "",
    "section": "Change Case of R String",
    "text": "Change Case of R String\nIn R, we can change the case of a string using\n\ntoupper() - convert string to uppercase\ntolower() - convert string to lowercase\n\n\nmessage &lt;- \"R Programming\"\n\n# change string to uppercase\nmessage_upper &lt;- toupper(message)\nmessage_upper\n\n[1] \"R PROGRAMMING\"\n\n# change string to lowercase\nmessage_lower &lt;- tolower(message)\nmessage_lower\n\n[1] \"r programming\""
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#vector",
    "href": "materials/slides/Day 02/00-data-structures.html#vector",
    "title": "",
    "section": "Vector",
    "text": "Vector\n\nVector is a basic data structure in R.\nIt contains element of the same type.\nThe data types can be logical, integer, double, character, and complex.\nA vector‚Äôs type can be checked with the typeof() function."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-the-c-function",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-the-c-function",
    "title": "",
    "section": "Creating Vectors - Using the c() Function",
    "text": "Creating Vectors - Using the c() Function\nThe c() function is used to concatenate or combine elements into a vector.\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-the-operator",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-the-operator",
    "title": "",
    "section": "Creating Vectors - Using the : Operator",
    "text": "Creating Vectors - Using the : Operator\nThe : operator generates a sequence of numbers from the starting value to the ending value.\n\n# Numeric sequence vector\nnumeric_sequence &lt;- 1:10"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-sequence-generation-functions",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-sequence-generation-functions",
    "title": "",
    "section": "Creating Vectors - Using Sequence Generation Functions",
    "text": "Creating Vectors - Using Sequence Generation Functions\nR provides functions like seq(), rep(), and seq_len() to generate sequences of numbers.\n\n# Numeric sequence vector using seq()\nnumeric_sequence &lt;- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values &lt;- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence &lt;- seq_len(10)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-vectorized-operations",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-vectors---using-vectorized-operations",
    "title": "",
    "section": "Creating Vectors - Using Vectorized Operations",
    "text": "Creating Vectors - Using Vectorized Operations\nVectors can be created by performing operations on existing vectors or values.\n\n# Vector created using vectorized operation\nnew_vector &lt;- numeric_vector * 2"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-vectors---mixing-objects",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-vectors---mixing-objects",
    "title": "",
    "section": "Creating Vectors - Mixing Objects",
    "text": "Creating Vectors - Mixing Objects\n\n# Character \nx &lt;- c(1.7, \"a\")\n# Numeric \ny &lt;- c(TRUE, 2)\n# Character \nz &lt;- c(\"a\", TRUE)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#matrix",
    "href": "materials/slides/Day 02/00-data-structures.html#matrix",
    "title": "",
    "section": "Matrix",
    "text": "Matrix\n\nMatrix is a two dimensional data structure in R programming.\nMatrix is similar to vector but additionally contains the dimension attributes.\nAll attributes of an object can be checked by attributes() function.\nDimension can be checked by directly with the dim()function. We can check if a variable is a matrix or not with the class() function."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creatinig-matrix",
    "href": "materials/slides/Day 02/00-data-structures.html#creatinig-matrix",
    "title": "",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\nMatrix can be created using the matrix() function. Here‚Äôs the general syntax:\n\n\nmatrix(data, nrow, ncol, byrow, dimnames)\n\n\ndata: The data elements used to fill the matrix. It can be a vector or a combination of vectors.\nnrow: The number of rows in the matrix.\nncol: The number of columns in the matrix.\nbyrow: A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\ndimnames: Optional names for the rows and columns of the matrix."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creatinig-matrix-1",
    "href": "materials/slides/Day 02/00-data-structures.html#creatinig-matrix-1",
    "title": "",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\n# Create a matrix using matrix function \nmat1 &lt;- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 &lt;- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#matrix-properties",
    "href": "materials/slides/Day 02/00-data-structures.html#matrix-properties",
    "title": "",
    "section": "Matrix Properties",
    "text": "Matrix Properties\n\n# Create a matrix using matrix function \nmat &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n\n[1] \"A\" \"B\" \"C\"\n\n# Row Names \nrownames(mat)\n\n[1] \"X\" \"Y\" \"Z\"\n\n# Dimension \ndim(mat)\n\n[1] 3 3"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#list",
    "href": "materials/slides/Day 02/00-data-structures.html#list",
    "title": "",
    "section": "List",
    "text": "List\n\nList is a data structure having components of mixed data types.\nA vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\nWe can check if it‚Äôs a list with typeof() function and find its length using length() function."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-list",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-list",
    "title": "",
    "section": "Creating List",
    "text": "Creating List\nList can be created using the list() function. Here‚Äôs the general syntax:\n\nlist(..., recursive = FALSE)\n\n\n...: The elements to be included in the list, separated by commas.\nrecursive: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default)."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-list-1",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-list-1",
    "title": "",
    "section": "Creating List",
    "text": "Creating List\n\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list &lt;- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#factors",
    "href": "materials/slides/Day 02/00-data-structures.html#factors",
    "title": "",
    "section": "Factors",
    "text": "Factors\n\nIn R, factors are used to represent categorical or discrete data with predefined levels or categories.\nFactors are useful when working with data that has distinct categories or when performing statistical analysis.\nFactors are used to represent categorical data and can be ordered and unordered."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-factors",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-factors",
    "title": "",
    "section": "Creating Factors",
    "text": "Creating Factors\nFactors are created using the factor() function in R. Here‚Äôs the general syntax:\n\nfactor(x, levels, labels, ordered = FALSE)\n\n\nx: A vector or column of data that represents the categorical variable.\nlevels: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\nlabels: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\nordered: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default)."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#creating-factors-1",
    "href": "materials/slides/Day 02/00-data-structures.html#creating-factors-1",
    "title": "",
    "section": "Creating Factors",
    "text": "Creating Factors\n\n# Create a factor using factor() function \nf &lt;- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n\n[1] \"no\"  \"yes\""
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#data-frame",
    "href": "materials/slides/Day 02/00-data-structures.html#data-frame",
    "title": "",
    "section": "Data Frame",
    "text": "Data Frame\n\nIn R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\nIt consists of rows and columns, where each column can have a different data type.\nData frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\nData frames can be created using the data.frame() function or by importing data from external sources."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#create-data-frame",
    "href": "materials/slides/Day 02/00-data-structures.html#create-data-frame",
    "title": "",
    "section": "Create Data Frame",
    "text": "Create Data Frame\nData frames can be created using the data.frame() function or by importing data from external sources. Here‚Äôs an example of creating a data frame in R:\n\n# Create a data frame\ndf &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#data-conversion-functions-in-r",
    "href": "materials/slides/Day 02/00-data-structures.html#data-conversion-functions-in-r",
    "title": "",
    "section": "Data Conversion Functions in R",
    "text": "Data Conversion Functions in R\n\nConversion functions in R help transform data between different types and formats.\nas.character(), as.numeric(), as.integer(), as.logical(), and as.factor() are commonly used conversion functions.\nThese functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types."
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#as.character",
    "href": "materials/slides/Day 02/00-data-structures.html#as.character",
    "title": "",
    "section": "as.character()",
    "text": "as.character()\n\nas.character() function converts an object to a character string representation.\nSyntax: as.character(x)\nx: The object to be converted.\n\n\n# Convert numeric values to character strings\nnumbers &lt;- c(1, 2, 3)\ncharacter_numbers &lt;- as.character(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#as.numeric",
    "href": "materials/slides/Day 02/00-data-structures.html#as.numeric",
    "title": "",
    "section": "as.numeric()",
    "text": "as.numeric()\n\nas.numeric() function converts an object to numeric (floating-point) values.\nSyntax: as.numeric(x)\nx: The object to be converted.\n\n\n# Convert character strings to numeric values\ncharacter_numbers &lt;- c(\"1\", \"2\", \"3\")\nnumeric_numbers &lt;- as.numeric(character_numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#as.integer",
    "href": "materials/slides/Day 02/00-data-structures.html#as.integer",
    "title": "",
    "section": "as.integer()",
    "text": "as.integer()\n\nas.integer() function converts an object to integer values.\nSyntax: as.integer(x)\nx: The object to be converted.\n\n\n# Convert numeric values to integer values\nnumbers &lt;- c(1.5, 2.7, 3.9)\ninteger_numbers &lt;- as.integer(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#as.logical",
    "href": "materials/slides/Day 02/00-data-structures.html#as.logical",
    "title": "",
    "section": "as.logical()",
    "text": "as.logical()\n\nas.logical() function converts an object to logical (boolean) values.\nSyntax: as.logical(x)\nx: The object to be converted.\n\n\n# Convert numeric values to logical values\nnumbers &lt;- c(0, 1, 2)\nlogical_values &lt;- as.logical(numbers)"
  },
  {
    "objectID": "materials/slides/Day 02/00-data-structures.html#as.factor",
    "href": "materials/slides/Day 02/00-data-structures.html#as.factor",
    "title": "",
    "section": "as.factor()",
    "text": "as.factor()\n\nas.factor() function converts an object to a factor, which represents categorical data.\nSyntax: as.factor(x)\nx: The object to be converted."
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html",
    "href": "materials/slides/Day 02/06-simulations.html",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "Simulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations.\n\n\n\n\n\nrunif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)\n\n\n\n\n\nsample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)\n\n\n\n\n\nsample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)\n\n\n\n\n\nR provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)\n\n\n\n\n\nTo reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#simulations",
    "href": "materials/slides/Day 02/06-simulations.html#simulations",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "Simulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations."
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#generating-random-numbers",
    "href": "materials/slides/Day 02/06-simulations.html#generating-random-numbers",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "runif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)"
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#generating-random-integers",
    "href": "materials/slides/Day 02/06-simulations.html#generating-random-integers",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "sample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)"
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#generating-random-samples-from-a-vector",
    "href": "materials/slides/Day 02/06-simulations.html#generating-random-samples-from-a-vector",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "sample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)"
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#generating-random-numbers-from-distributions",
    "href": "materials/slides/Day 02/06-simulations.html#generating-random-numbers-from-distributions",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "R provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)"
  },
  {
    "objectID": "materials/slides/Day 02/06-simulations.html#seeding-random-number-generation",
    "href": "materials/slides/Day 02/06-simulations.html#seeding-random-number-generation",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "To reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html",
    "href": "materials/slides/Day01/00-intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#agenda",
    "href": "materials/slides/Day01/00-intro.html#agenda",
    "title": "Introduction",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#about-the-course",
    "href": "materials/slides/Day01/00-intro.html#about-the-course",
    "title": "Introduction",
    "section": "About the Course",
    "text": "About the Course\n\nWhat do you hope to get out of the course?\n\nR for Bioinformatics is an introductory course designed to equip learners with essential skills in using the R programming language for bioinformatics research.\n\nWhy do you want to use R?\n\nThe course focuses on the practical application of R in genomic data manipulation, statistical analysis, data visualization, and reproducible research."
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#learning-objectives",
    "href": "materials/slides/Day01/00-intro.html#learning-objectives",
    "title": "Introduction",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nData Manipulation: Learn how to import, clean, and transform data in R for research purposes.\nData Visualization: Master techniques for creating effective data visualizations in R to communicate research findings visually.\nStatistical Analysis: Develop skills in conducting statistical analysis using R for hypothesis testing, regression analysis, and other statistical tests.\nReproducible Research: Implement principles of reproducible research using R to document and organize code, data, and analysis for replicability."
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#course-platforms",
    "href": "materials/slides/Day01/00-intro.html#course-platforms",
    "title": "Introduction",
    "section": "Course Platforms",
    "text": "Course Platforms\n\nWebsite: https://omicscenter.github.io/RforResearch/\nGithub: https://github.com/omicscenter/RforResearch\nMaterials will be uploaded the night before class.\nPlease check regularly official Telegram group for this course.\n\n\nWe are constantly trying to improve content! Please refresh/download materials before class."
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#course-format",
    "href": "materials/slides/Day01/00-intro.html#course-format",
    "title": "Introduction",
    "section": "Course Format",
    "text": "Course Format\n\nLecture with live coding (possibly ‚ÄúInteractive‚Äù)\nLab/Practical experience\nTwo 5 min breaks each session - timing may vary"
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#assignment-policy",
    "href": "materials/slides/Day01/00-intro.html#assignment-policy",
    "title": "Introduction",
    "section": "Assignment Policy",
    "text": "Assignment Policy\n\n20% of your grade will be determined by an assignment during normal class hours.\n50% of your grade will come from a 5-10 page report that explores in further detail one of the research areas in the class syllabus\nWe expect that students will use original data collection, whether quantitative or qualitative analysis, to answer the questions posed.\n30% of your grade will be determined by your attendance and participation in class."
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#required-textbooks",
    "href": "materials/slides/Day01/00-intro.html#required-textbooks",
    "title": "Introduction",
    "section": "Required Textbooks",
    "text": "Required Textbooks\nThe following books purchased and are available at the online book store. We have also a placed a copy of each on reserve at our Telegram group.\n\nData Analysis for the Life Sciences with R, by Rafael Irizarry\nIntroduction to Data Science, by Rafael Irizarry"
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#acknowledgements",
    "href": "materials/slides/Day01/00-intro.html#acknowledgements",
    "title": "Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "materials/slides/Day01/00-intro.html#questions",
    "href": "materials/slides/Day01/00-intro.html#questions",
    "title": "Introduction",
    "section": "Questions",
    "text": "Questions\n\n\n\nPlease add any questions to the public Zoom chat.\nCoordinators will monitor the chat\nWe‚Äôll also have time for questions at the break and at the end"
  },
  {
    "objectID": "materials/slides/Day01/index.html",
    "href": "materials/slides/Day01/index.html",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "materials/slides/Day01/index.html#agenda",
    "href": "materials/slides/Day01/index.html#agenda",
    "title": "R for Bioinformatics",
    "section": "Agenda",
    "text": "Agenda\n\nIntroduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "materials/slides/Day01/index.html#about-the-course",
    "href": "materials/slides/Day01/index.html#about-the-course",
    "title": "R for Bioinformatics",
    "section": "About the Course",
    "text": "About the Course\n\nWhat do you hope to get out of the course?\n\nR for Bioinformatics is an introductory course designed to equip learners with essential skills in using the R programming language for bioinformatics research.\n\nWhy do you want to use R?\n\nThe course focuses on the practical application of R in genomic data manipulation, statistical analysis, data visualization, and reproducible research."
  },
  {
    "objectID": "materials/slides/Day01/index.html#learning-objectives",
    "href": "materials/slides/Day01/index.html#learning-objectives",
    "title": "R for Bioinformatics",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nData Manipulation: Learn how to import, clean, and transform data in R for research purposes.\nData Visualization: Master techniques for creating effective data visualizations in R to communicate research findings visually.\nStatistical Analysis: Develop skills in conducting statistical analysis using R for hypothesis testing, regression analysis, and other statistical tests.\nReproducible Research: Implement principles of reproducible research using R to document and organize code, data, and analysis for replicability."
  },
  {
    "objectID": "materials/slides/Day01/index.html#course-platforms",
    "href": "materials/slides/Day01/index.html#course-platforms",
    "title": "R for Bioinformatics",
    "section": "Course Platforms",
    "text": "Course Platforms\n\nWebsite: https://omicscenter.github.io/RforResearch/\nGithub: https://github.com/omicscenter/RforResearch\nMaterials will be uploaded the night before class.\nPlease check regularly official Telegram group for this course.\n\n\nWe are constantly trying to improve content! Please refresh/download materials before class."
  },
  {
    "objectID": "materials/slides/Day01/index.html#course-format",
    "href": "materials/slides/Day01/index.html#course-format",
    "title": "R for Bioinformatics",
    "section": "Course Format",
    "text": "Course Format\n\nLecture with live coding (possibly ‚ÄúInteractive‚Äù)\nLab/Practical experience\nTwo 5 min breaks each session - timing may vary"
  },
  {
    "objectID": "materials/slides/Day01/index.html#assignment-policy",
    "href": "materials/slides/Day01/index.html#assignment-policy",
    "title": "R for Bioinformatics",
    "section": "Assignment Policy",
    "text": "Assignment Policy\n\n20% of your grade will be determined by an assignment during normal class hours.\n50% of your grade will come from a 5-10 page report that explores in further detail one of the research areas in the class syllabus\nWe expect that students will use original data collection, whether quantitative or qualitative analysis, to answer the questions posed.\n30% of your grade will be determined by your attendance and participation in class."
  },
  {
    "objectID": "materials/slides/Day01/index.html#required-textbooks",
    "href": "materials/slides/Day01/index.html#required-textbooks",
    "title": "R for Bioinformatics",
    "section": "Required Textbooks",
    "text": "Required Textbooks\nThe following books purchased and are available at the online book store. We have also a placed a copy of each on reserve at our Telegram group.\n\nData Analysis for the Life Sciences with R, by Rafael Irizarry\nIntroduction to Data Science, by Rafael Irizarry"
  },
  {
    "objectID": "materials/slides/Day01/index.html#acknowledgements",
    "href": "materials/slides/Day01/index.html#acknowledgements",
    "title": "R for Bioinformatics",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "materials/slides/Day01/index.html#questions",
    "href": "materials/slides/Day01/index.html#questions",
    "title": "R for Bioinformatics",
    "section": "Questions",
    "text": "Questions\n\n\n\nPlease add any questions to the public Zoom chat.\nCoordinators will monitor the chat\nWe‚Äôll also have time for questions at the break and at the end"
  },
  {
    "objectID": "materials/slides/Day01/index.html#what-is-r",
    "href": "materials/slides/Day01/index.html#what-is-r",
    "title": "R for Bioinformatics",
    "section": "What is R?",
    "text": "What is R?\n\nR is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis."
  },
  {
    "objectID": "materials/slides/Day01/index.html#why-r",
    "href": "materials/slides/Day01/index.html#why-r",
    "title": "R for Bioinformatics",
    "section": "Why R?",
    "text": "Why R?\n\nFree (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community"
  },
  {
    "objectID": "materials/slides/Day01/index.html#reproducibility-crisis",
    "href": "materials/slides/Day01/index.html#reproducibility-crisis",
    "title": "R for Bioinformatics",
    "section": "Reproducibility Crisis",
    "text": "Reproducibility Crisis\n\n\n\nQuality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "materials/slides/Day01/index.html#variable-and-sample",
    "href": "materials/slides/Day01/index.html#variable-and-sample",
    "title": "R for Bioinformatics",
    "section": "Variable and Sample",
    "text": "Variable and Sample\n\nVariable: something measured or counted that is a characteristic about a sample\n\nExamples: temperature, length, count, color, category\n\nSample: individuals that you have data about.\n\nExamples: people, houses, viruses etc."
  },
  {
    "objectID": "materials/slides/Day01/index.html#object",
    "href": "materials/slides/Day01/index.html#object",
    "title": "R for Bioinformatics",
    "section": "Object",
    "text": "Object\nObject - an object is something that can be worked with in R - can be lots of different things!\n\na matrix of numbers\na plot\na function\n\n‚Ä¶ many more"
  },
  {
    "objectID": "materials/slides/Day01/index.html#columns-and-rows",
    "href": "materials/slides/Day01/index.html#columns-and-rows",
    "title": "R for Bioinformatics",
    "section": "Columns and Rows",
    "text": "Columns and Rows\n\n\n\n\n\n\n  \n    \n    \n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n      Species\n    \n  \n  \n    5.1\n3.5\n1.4\n0.2\nsetosa\n    4.9\n3.0\n1.4\n0.2\nsetosa\n    4.7\n3.2\n1.3\n0.2\nsetosa\n    4.6\n3.1\n1.5\n0.2\nsetosa\n    5.0\n3.6\n1.4\n0.2\nsetosa\n    5.4\n3.9\n1.7\n0.4\nsetosa\n  \n  \n  \n\n\n\n\n\nSample/Observations = Row\n\nVariable = Column\nData objects that looks like this is often called a data frame.\nFancier versions from the tidyverse are called tibbles (more on that soon!)."
  },
  {
    "objectID": "materials/slides/Day01/index.html#function",
    "href": "materials/slides/Day01/index.html#function",
    "title": "R for Bioinformatics",
    "section": "Function",
    "text": "Function\n\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nA function might help you add numbers together, create a plot, or organize your data. More on that soon!"
  },
  {
    "objectID": "materials/slides/Day01/index.html#argumentparameter",
    "href": "materials/slides/Day01/index.html#argumentparameter",
    "title": "R for Bioinformatics",
    "section": "Argument/Parameter",
    "text": "Argument/Parameter\nArgument/Parameter - what you pass to a function\n\nsum(1, 20234)\n[1] 20235\n\n\nCan be data like the number 1 or 20234\nCan be options about how you want the function to work such as digits\n\n\nround(0.627, digits = 2)\n[1] 0.63\nround(0.627, digits = 1)\n[1] 0.6"
  },
  {
    "objectID": "materials/slides/Day01/index.html#package",
    "href": "materials/slides/Day01/index.html#package",
    "title": "R for Bioinformatics",
    "section": "Package",
    "text": "Package\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nPackages are sort of analogous to a software application like Microsoft Word on your computer. Your operating system allows you to use it, just like having R installed (and other required packages) allows you to use packages."
  },
  {
    "objectID": "materials/slides/Day01/index.html#more-on-functions-and-packages",
    "href": "materials/slides/Day01/index.html#more-on-functions-and-packages",
    "title": "R for Bioinformatics",
    "section": "More on Functions and Packages",
    "text": "More on Functions and Packages\n\nWhen you download R, it has a ‚Äúbase‚Äù set of functions/packages (base R)\n\nYou can install additional packages for your uses from CRAN or GitHub\nThese additional packages are written by RStudio or R users/developers (like us)"
  },
  {
    "objectID": "materials/slides/Day01/index.html#using-packages",
    "href": "materials/slides/Day01/index.html#using-packages",
    "title": "R for Bioinformatics",
    "section": "Using Packages",
    "text": "Using Packages\n\nNot all packages available on CRAN or GitHub are trustworthy\nRStudio (the company) makes a lot of great packages\nWho wrote it? Hadley Wickham is a major authority on R (Employee and Developer at RStudio)\nHow to trust an R package\nInstall packages: install.packages(\"package_name\")\nUse packages: library(package_name)"
  },
  {
    "objectID": "materials/slides/Day01/index.html#tidyverse-ecosystem-and-base-r",
    "href": "materials/slides/Day01/index.html#tidyverse-ecosystem-and-base-r",
    "title": "R for Bioinformatics",
    "section": "Tidyverse Ecosystem and Base R",
    "text": "Tidyverse Ecosystem and Base R\n\nWe will mostly show you how to use tidyverse packages and functions.\nThis is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\nTidyverse advantages:\n\nconsistent structure - making it easier to learn how to use different packages\n\nparticularly good for wrangling (manipulating, cleaning, joining) data\n\nmore flexible for visualizing data\n\nPackages for the tidyverse are managed by a team of respected data scientists at RStudio."
  },
  {
    "objectID": "materials/slides/Day01/index.html#installation-and-use",
    "href": "materials/slides/Day01/index.html#installation-and-use",
    "title": "R for Bioinformatics",
    "section": "Installation and Use",
    "text": "Installation and Use\n\nInstall all the packages in the tidyverse by running install.packages(\"tidyverse\").\nRun library(tidyverse) to load the core tidyverse and make it available in your current R session.\nLearn more about the tidyverse package at https://tidyverse.tidyverse.org."
  },
  {
    "objectID": "materials/slides/Day01/index.html#core-tidyverse",
    "href": "materials/slides/Day01/index.html#core-tidyverse",
    "title": "R for Bioinformatics",
    "section": "Core tidyverse",
    "text": "Core tidyverse\n\nThe core tidyverse includes the packages that you‚Äôre likely to use in everyday data analyses.\nAs of tidyverse 1.3.0, the following packages are included in the core tidyverse.\nThe tidyverse also includes many other packages with more specialised usage.\nThey are not loaded automatically with library(tidyverse), so you‚Äôll need to load each one with its own call to library()."
  },
  {
    "objectID": "materials/slides/Day01/index.html#data-import",
    "href": "materials/slides/Day01/index.html#data-import",
    "title": "R for Bioinformatics",
    "section": "Data Import",
    "text": "Data Import\n\nAs well as readr, for reading flat files, the tidyverse package installs a number of other packages for reading data:\n\nDBI for relational databases. (Maintained by Kirill M√ºller.) You‚Äôll need to pair DBI with a database specific backends like RSQLite, RMariaDB, RPostgres, or odbc. Learn more at https://db.rstudio.com.\n\nreadxl for .xls and .xlsx sheets."
  },
  {
    "objectID": "materials/slides/Day01/index.html#data-wrangling",
    "href": "materials/slides/Day01/index.html#data-wrangling",
    "title": "R for Bioinformatics",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn addition to tidyr, and dplyr, there are five packages (including stringr and forcats) which are designed to work with specific types of data:\n\nlubridate for dates and date-times.\nhms for time-of-day values.\nblob for storing blob (binary) data."
  },
  {
    "objectID": "materials/slides/Day01/index.html#program",
    "href": "materials/slides/Day01/index.html#program",
    "title": "R for Bioinformatics",
    "section": "Program",
    "text": "Program\nIn addition to purrr, which provides very consistent and natural methods for iterating on R objects, there are two additional tidyverse packages that help with general programming challenges:\n\nmagrittr provides the pipe, %&gt;% used throughout the tidyverse. It also provide a number of more specialised piping operators (like %$% and %&lt;&gt;%) that can be useful in other places.\nglue provides an alternative to paste() that makes it easier to combine data and strings."
  },
  {
    "objectID": "materials/slides/Day01/index.html#useful-mostly-free-resources",
    "href": "materials/slides/Day01/index.html#useful-mostly-free-resources",
    "title": "R for Bioinformatics",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nTidyverse Skills for Data Science Book: https://jhudatascience.org/tidyversecourse/ (more about the tidyverse, some modeling, and machine learning)\nTidyverse Skills for Data Science Course: https://www.coursera.org/specializations/tidyverse-data-science-r (same content with quizzes, can get certificate with $)\nR for Data Science: http://r4ds.had.co.nz/\n(great general information)\nR basics by Rafael A. Irizarry: https://rafalab.github.io/dsbook/r-basics.html (great general information)\nOpen Case Studies: https://www.opencasestudies.org/\n(resource for specific public health cases with statistical implementation and interpretation)"
  },
  {
    "objectID": "materials/slides/Day01/index.html#useful-mostly-free-resources-1",
    "href": "materials/slides/Day01/index.html#useful-mostly-free-resources-1",
    "title": "R for Bioinformatics",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nDataquest: https://www.dataquest.io/\n(general interactive resource)\nVarious ‚ÄúCheat Sheets‚Äù: https://www.rstudio.com/resources/cheatsheets/\nR reference card: http://cran.r-project.org/doc/contrib/Short-refcard.pdf\nR jargon: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR vs Stata: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR terminology: https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf"
  },
  {
    "objectID": "materials/slides/Day01/index.html#your-setup",
    "href": "materials/slides/Day01/index.html#your-setup",
    "title": "R for Bioinformatics",
    "section": "Your Setup",
    "text": "Your Setup\nIf you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!"
  },
  {
    "objectID": "materials/slides/Day01/index.html#rstudio---major-concepts",
    "href": "materials/slides/Day01/index.html#rstudio---major-concepts",
    "title": "R for Bioinformatics",
    "section": "RStudio - Major concepts",
    "text": "RStudio - Major concepts\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output."
  },
  {
    "objectID": "materials/slides/Day01/index.html#rstudio",
    "href": "materials/slides/Day01/index.html#rstudio",
    "title": "R for Bioinformatics",
    "section": "RStudio",
    "text": "RStudio\n\nQuarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts"
  },
  {
    "objectID": "materials/slides/Day01/index.html#what-is-reproducibility",
    "href": "materials/slides/Day01/index.html#what-is-reproducibility",
    "title": "R for Bioinformatics",
    "section": "What is Reproducibility?",
    "text": "What is Reproducibility?\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "materials/slides/Day01/index.html#running-your-first-r-program",
    "href": "materials/slides/Day01/index.html#running-your-first-r-program",
    "title": "R for Bioinformatics",
    "section": "Running Your First R Program",
    "text": "Running Your First R Program\n\nNow that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n[1] ‚ÄúHello World!‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#running-your-first-r-program-1",
    "href": "materials/slides/Day01/index.html#running-your-first-r-program-1",
    "title": "R for Bioinformatics",
    "section": "Running Your First R Program",
    "text": "Running Your First R Program\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n[1] ‚ÄúHello World!‚Äù\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed."
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-as-a-calculator",
    "href": "materials/slides/Day01/index.html#r-as-a-calculator",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\n2 + 2\n[1] 4\n2 * 4\n[1] 8\n2^3\n[1] 8\n\nNote: when you type your command, R inherently thinks you want to print the result."
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-as-a-calculator-1",
    "href": "materials/slides/Day01/index.html#r-as-a-calculator-1",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\nThe R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder"
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-as-a-calculator-2",
    "href": "materials/slides/Day01/index.html#r-as-a-calculator-2",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\n2 + (2 * 3)^2\n[1] 38\n(1 + 3) / 2 + 45\n[1] 47\n6 / 2 * (1 + 2)\n[1] 9"
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-as-a-calculator-3",
    "href": "materials/slides/Day01/index.html#r-as-a-calculator-3",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nTry evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1"
  },
  {
    "objectID": "materials/slides/Day01/index.html#variables-identifiers-in-r",
    "href": "materials/slides/Day01/index.html#variables-identifiers-in-r",
    "title": "R for Bioinformatics",
    "section": "Variables (Identifiers) in R",
    "text": "Variables (Identifiers) in R\n\nVariables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier."
  },
  {
    "objectID": "materials/slides/Day01/index.html#rules-for-writing-identifiers-in-r",
    "href": "materials/slides/Day01/index.html#rules-for-writing-identifiers-in-r",
    "title": "R for Bioinformatics",
    "section": "Rules for writing Identifiers in R",
    "text": "Rules for writing Identifiers in R\n\nIdentifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)"
  },
  {
    "objectID": "materials/slides/Day01/index.html#basically-there-are-5-naming-conventions",
    "href": "materials/slides/Day01/index.html#basically-there-are-5-naming-conventions",
    "title": "R for Bioinformatics",
    "section": "Basically, there are 5 naming conventions",
    "text": "Basically, there are 5 naming conventions\n\nalllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName"
  },
  {
    "objectID": "materials/slides/Day01/index.html#assigning-values-to-objects",
    "href": "materials/slides/Day01/index.html#assigning-values-to-objects",
    "title": "R for Bioinformatics",
    "section": "Assigning Values to Objects",
    "text": "Assigning Values to Objects\n\nYou can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n[1] 2\nx * 4\n[1] 8\nx + 2\n[1] 4"
  },
  {
    "objectID": "materials/slides/Day01/index.html#creating-variables",
    "href": "materials/slides/Day01/index.html#creating-variables",
    "title": "R for Bioinformatics",
    "section": "Creating Variables",
    "text": "Creating Variables\nUsing equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15"
  },
  {
    "objectID": "materials/slides/Day01/index.html#reserved-keaywords-in-r",
    "href": "materials/slides/Day01/index.html#reserved-keaywords-in-r",
    "title": "R for Bioinformatics",
    "section": "Reserved Keaywords in R",
    "text": "Reserved Keaywords in R\n\nDon‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved"
  },
  {
    "objectID": "materials/slides/Day01/index.html#entering-input",
    "href": "materials/slides/Day01/index.html#entering-input",
    "title": "R for Bioinformatics",
    "section": "Entering Input",
    "text": "Entering Input\nAt the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not."
  },
  {
    "objectID": "materials/slides/Day01/index.html#evaluation",
    "href": "materials/slides/Day01/index.html#evaluation",
    "title": "R for Bioinformatics",
    "section": "Evaluation",
    "text": "Evaluation\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n[1] 10\n\n\nx &lt;- 10\nprint(x)\n[1] 10\n\n\nx &lt;- 10\ncat(x)\n10"
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-comments",
    "href": "materials/slides/Day01/index.html#r-comments",
    "title": "R for Bioinformatics",
    "section": "R Comments",
    "text": "R Comments\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n[1] 24"
  },
  {
    "objectID": "materials/slides/Day01/index.html#types-of-comments-in-r",
    "href": "materials/slides/Day01/index.html#types-of-comments-in-r",
    "title": "R for Bioinformatics",
    "section": "Types of Comments in R",
    "text": "Types of Comments in R\nIn general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R."
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-single-line-comments",
    "href": "materials/slides/Day01/index.html#r-single-line-comments",
    "title": "R for Bioinformatics",
    "section": "R Single-Line Comments",
    "text": "R Single-Line Comments\n\n# this code prints Hello World\nprint(\"Hello World\") \n[1] ‚ÄúHello World‚Äù\n# check type of variables\nage &lt;- 30 \nclass(age)\n[1] ‚Äúnumeric‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-multi-line-comments",
    "href": "materials/slides/Day01/index.html#r-multi-line-comments",
    "title": "R for Bioinformatics",
    "section": "R Multi-Line Comments",
    "text": "R Multi-Line Comments\n\nAs already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n[1] ‚ÄúHello World‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#purpose-of-comments",
    "href": "materials/slides/Day01/index.html#purpose-of-comments",
    "title": "R for Bioinformatics",
    "section": "Purpose of Comments",
    "text": "Purpose of Comments\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program."
  },
  {
    "objectID": "materials/slides/Day01/index.html#how-to-create-better-comments",
    "href": "materials/slides/Day01/index.html#how-to-create-better-comments",
    "title": "R for Bioinformatics",
    "section": "How to Create Better Comments?",
    "text": "How to Create Better Comments?\nYou should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-data-types",
    "href": "materials/slides/Day01/index.html#r-data-types",
    "title": "R for Bioinformatics",
    "section": "R Data Types",
    "text": "R Data Types\n\nA variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer."
  },
  {
    "objectID": "materials/slides/Day01/index.html#r-data-types-1",
    "href": "materials/slides/Day01/index.html#r-data-types-1",
    "title": "R for Bioinformatics",
    "section": "R Data Types",
    "text": "R Data Types\nWe can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n[1] 123\n# print type of x\nclass(x)\n[1] ‚Äúinteger‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#different-types-of-data-types",
    "href": "materials/slides/Day01/index.html#different-types-of-data-types",
    "title": "R for Bioinformatics",
    "section": "Different Types of Data Types",
    "text": "Different Types of Data Types\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,"
  },
  {
    "objectID": "materials/slides/Day01/index.html#different-types-of-data-types-1",
    "href": "materials/slides/Day01/index.html#different-types-of-data-types-1",
    "title": "R for Bioinformatics",
    "section": "Different Types of Data Types",
    "text": "Different Types of Data Types\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes."
  },
  {
    "objectID": "materials/slides/Day01/index.html#logical-data-type",
    "href": "materials/slides/Day01/index.html#logical-data-type",
    "title": "R for Bioinformatics",
    "section": "Logical Data Type",
    "text": "Logical Data Type\nThe logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n[1] TRUE\n# print type of bool1\nclass(bool1)\n[1] ‚Äúlogical‚Äù\n# print bool2\nbool2 &lt;- FALSE\nbool2\n[1] FALSE\n# print type of bool2\nclass(bool2)\n[1] ‚Äúlogical‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#logical-data-type-1",
    "href": "materials/slides/Day01/index.html#logical-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Logical Data Type",
    "text": "Logical Data Type\nYou can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n[1] ‚Äúlogical‚Äù\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n[1] ‚Äúlogical‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#numeric-data-type",
    "href": "materials/slides/Day01/index.html#numeric-data-type",
    "title": "R for Bioinformatics",
    "section": "Numeric Data Type",
    "text": "Numeric Data Type\nIn R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n[1] 63.5\n# check variable types \nclass(weight)\n[1] ‚Äúnumeric‚Äù\n# real numbers\nheight &lt;- 182\nheight\n[1] 182\n# check variable types \nclass(height)\n[1] ‚Äúnumeric‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#integer-data-type",
    "href": "materials/slides/Day01/index.html#integer-data-type",
    "title": "R for Bioinformatics",
    "section": "Integer Data Type",
    "text": "Integer Data Type\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n[1] 186\n# check variable types \nclass(integer_variable)\n[1] ‚Äúinteger‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#complex-data-type",
    "href": "materials/slides/Day01/index.html#complex-data-type",
    "title": "R for Bioinformatics",
    "section": "Complex Data Type",
    "text": "Complex Data Type\nThe complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n[1] ‚Äúcomplex‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#character-data-type",
    "href": "materials/slides/Day01/index.html#character-data-type",
    "title": "R for Bioinformatics",
    "section": "Character Data Type",
    "text": "Character Data Type\n\nThe character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables"
  },
  {
    "objectID": "materials/slides/Day01/index.html#character-data-type-1",
    "href": "materials/slides/Day01/index.html#character-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Character Data Type",
    "text": "Character Data Type\nFor example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n[1] ‚Äúcharacter‚Äù\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n[1] ‚Äúcharacter‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#raw-data-type",
    "href": "materials/slides/Day01/index.html#raw-data-type",
    "title": "R for Bioinformatics",
    "section": "Raw Data Type",
    "text": "Raw Data Type\nA raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data"
  },
  {
    "objectID": "materials/slides/Day01/index.html#raw-data-type-1",
    "href": "materials/slides/Day01/index.html#raw-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Raw Data Type",
    "text": "Raw Data Type\nFor example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n[1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\nprint(class(raw_variable))\n[1] ‚Äúraw‚Äù\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n[1] ‚ÄúWelcome to Programiz‚Äù\nprint(class(char_variable))\n[1] ‚Äúcharacter‚Äù"
  },
  {
    "objectID": "materials/slides/Day01/index.html#operators-in-r-1",
    "href": "materials/slides/Day01/index.html#operators-in-r-1",
    "title": "R for Bioinformatics",
    "section": "Operators in R",
    "text": "Operators in R\n\nIn R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators"
  },
  {
    "objectID": "materials/slides/Day01/index.html#arithmetic-operators",
    "href": "materials/slides/Day01/index.html#arithmetic-operators",
    "title": "R for Bioinformatics",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-arithmetic-operators",
    "href": "materials/slides/Day01/index.html#example-arithmetic-operators",
    "title": "R for Bioinformatics",
    "section": "Example: Arithmetic Operators",
    "text": "Example: Arithmetic Operators\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n[1] 12\n# Subtraction\n2-5\n[1] -3\n# Multiplication\n2 * 5 \n[1] 10\n# Division\n2 / 5 \n[1] 0.4"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-arithmetic-operators-1",
    "href": "materials/slides/Day01/index.html#example-arithmetic-operators-1",
    "title": "R for Bioinformatics",
    "section": "Example: Arithmetic Operators",
    "text": "Example: Arithmetic Operators\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n[1] 32\n# Modulus(Remainder from division)\n2 %% 5\n[1] 2"
  },
  {
    "objectID": "materials/slides/Day01/index.html#relational-operators",
    "href": "materials/slides/Day01/index.html#relational-operators",
    "title": "R for Bioinformatics",
    "section": "Relational Operators",
    "text": "Relational Operators\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-relational-operators",
    "href": "materials/slides/Day01/index.html#example-relational-operators",
    "title": "R for Bioinformatics",
    "section": "Example: Relational Operators",
    "text": "Example: Relational Operators\nThe output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n[1] FALSE\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/index.html#logical-operators",
    "href": "materials/slides/Day01/index.html#logical-operators",
    "title": "R for Bioinformatics",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)"
  },
  {
    "objectID": "materials/slides/Day01/index.html#and-operator",
    "href": "materials/slides/Day01/index.html#and-operator",
    "title": "R for Bioinformatics",
    "section": "AND Operator (&)",
    "text": "AND Operator (&)\n\nThe AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-and-operator",
    "href": "materials/slides/Day01/index.html#example-and-operator",
    "title": "R for Bioinformatics",
    "section": "Example: AND Operator (&)",
    "text": "Example: AND Operator (&)\n\n# print & of TRUE and FALSE combinations\nTRUE & TRUE\n[1] TRUE\nTRUE & FALSE\n[1] FALSE\nFALSE & TRUE\n[1] FALSE\nFALSE & FALSE\n[1] FALSE\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/index.html#or-operator",
    "href": "materials/slides/Day01/index.html#or-operator",
    "title": "R for Bioinformatics",
    "section": "OR Operator (|)",
    "text": "OR Operator (|)\nThe OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-or-operator",
    "href": "materials/slides/Day01/index.html#example-or-operator",
    "title": "R for Bioinformatics",
    "section": "Example: OR Operator (|)",
    "text": "Example: OR Operator (|)\n\n# print | of TRUE and FALSE combinations\nTRUE | TRUE\n[1] TRUE\nTRUE | FALSE\n[1] TRUE\nFALSE | TRUE\n[1] TRUE\nFALSE | FALSE\n[1] FALSE\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/index.html#not-operator",
    "href": "materials/slides/Day01/index.html#not-operator",
    "title": "R for Bioinformatics",
    "section": "NOT (!) Operator",
    "text": "NOT (!) Operator\nThe NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1"
  },
  {
    "objectID": "materials/slides/Day01/index.html#example-not-operator",
    "href": "materials/slides/Day01/index.html#example-not-operator",
    "title": "R for Bioinformatics",
    "section": "Example: NOT (!) Operator",
    "text": "Example: NOT (!) Operator\n\n# print ! of TRUE and FALSE\n!TRUE\n[1] FALSE\n!FALSE\n[1] TRUE\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html",
    "href": "materials/slides/Day01/03-data-types.html",
    "title": "Data Types in R",
    "section": "",
    "text": "A variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer.\n\n\n\n\nWe can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n\n[1] 123\n\n# print type of x\nclass(x)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes.\n\n\n\n\n\n\nThe logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n\n[1] TRUE\n\n# print type of bool1\nclass(bool1)\n\n[1] \"logical\"\n\n# print bool2\nbool2 &lt;- FALSE\nbool2\n\n[1] FALSE\n\n# print type of bool2\nclass(bool2)\n\n[1] \"logical\"\n\n\n\n\n\nYou can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n\n[1] \"logical\"\n\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n\n[1] \"logical\"\n\n\n\n\n\nIn R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n\n[1] 63.5\n\n# check variable types \nclass(weight)\n\n[1] \"numeric\"\n\n# real numbers\nheight &lt;- 182\nheight\n\n[1] 182\n\n# check variable types \nclass(height)\n\n[1] \"numeric\"\n\n\n\n\n\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n\n[1] 186\n\n# check variable types \nclass(integer_variable)\n\n[1] \"integer\"\n\n\n\n\n\nThe complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n\n[1] \"complex\"\n\n\n\n\n\n\nThe character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables\n\n\n\n\n\nFor example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n\n[1] \"character\"\n\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n\n[1] \"character\"\n\n\n\n\n\nA raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data\n\n\n\n\nFor example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#r-data-types",
    "href": "materials/slides/Day01/03-data-types.html#r-data-types",
    "title": "Data Types in R",
    "section": "",
    "text": "A variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer."
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#r-data-types-1",
    "href": "materials/slides/Day01/03-data-types.html#r-data-types-1",
    "title": "Data Types in R",
    "section": "",
    "text": "We can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n\n[1] 123\n\n# print type of x\nclass(x)\n\n[1] \"integer\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#different-types-of-data-types",
    "href": "materials/slides/Day01/03-data-types.html#different-types-of-data-types",
    "title": "Data Types in R",
    "section": "",
    "text": "Data Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,"
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#different-types-of-data-types-1",
    "href": "materials/slides/Day01/03-data-types.html#different-types-of-data-types-1",
    "title": "Data Types in R",
    "section": "",
    "text": "Data Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes."
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#logical-data-type",
    "href": "materials/slides/Day01/03-data-types.html#logical-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n\n[1] TRUE\n\n# print type of bool1\nclass(bool1)\n\n[1] \"logical\"\n\n# print bool2\nbool2 &lt;- FALSE\nbool2\n\n[1] FALSE\n\n# print type of bool2\nclass(bool2)\n\n[1] \"logical\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#logical-data-type-1",
    "href": "materials/slides/Day01/03-data-types.html#logical-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "You can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n\n[1] \"logical\"\n\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n\n[1] \"logical\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#numeric-data-type",
    "href": "materials/slides/Day01/03-data-types.html#numeric-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "In R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n\n[1] 63.5\n\n# check variable types \nclass(weight)\n\n[1] \"numeric\"\n\n# real numbers\nheight &lt;- 182\nheight\n\n[1] 182\n\n# check variable types \nclass(height)\n\n[1] \"numeric\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#integer-data-type",
    "href": "materials/slides/Day01/03-data-types.html#integer-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n\n[1] 186\n\n# check variable types \nclass(integer_variable)\n\n[1] \"integer\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#complex-data-type",
    "href": "materials/slides/Day01/03-data-types.html#complex-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n\n[1] \"complex\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#character-data-type",
    "href": "materials/slides/Day01/03-data-types.html#character-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables"
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#character-data-type-1",
    "href": "materials/slides/Day01/03-data-types.html#character-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "For example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n\n[1] \"character\"\n\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n\n[1] \"character\""
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#raw-data-type",
    "href": "materials/slides/Day01/03-data-types.html#raw-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "A raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data"
  },
  {
    "objectID": "materials/slides/Day01/03-data-types.html#raw-data-type-1",
    "href": "materials/slides/Day01/03-data-types.html#raw-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "For example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\""
  },
  {
    "objectID": "materials/slides/Day01/01-background.html",
    "href": "materials/slides/Day01/01-background.html",
    "title": "Background",
    "section": "",
    "text": "R is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFree (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community\n\n\n\n\n\n\n\nQuality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#what-is-r",
    "href": "materials/slides/Day01/01-background.html#what-is-r",
    "title": "Background",
    "section": "",
    "text": "R is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#why-r",
    "href": "materials/slides/Day01/01-background.html#why-r",
    "title": "Background",
    "section": "",
    "text": "Free (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#reproducibility-crisis",
    "href": "materials/slides/Day01/01-background.html#reproducibility-crisis",
    "title": "Background",
    "section": "",
    "text": "Quality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#variable-and-sample",
    "href": "materials/slides/Day01/01-background.html#variable-and-sample",
    "title": "Background",
    "section": "Variable and Sample",
    "text": "Variable and Sample\n\nVariable: something measured or counted that is a characteristic about a sample\n\nExamples: temperature, length, count, color, category\n\nSample: individuals that you have data about.\n\nExamples: people, houses, viruses etc."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#object",
    "href": "materials/slides/Day01/01-background.html#object",
    "title": "Background",
    "section": "Object",
    "text": "Object\nObject - an object is something that can be worked with in R - can be lots of different things!\n\na matrix of numbers\na plot\na function\n\n‚Ä¶ many more"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#columns-and-rows",
    "href": "materials/slides/Day01/01-background.html#columns-and-rows",
    "title": "Background",
    "section": "Columns and Rows",
    "text": "Columns and Rows\n\n\n\n\n\n\n  \n    \n    \n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n      Species\n    \n  \n  \n    5.1\n3.5\n1.4\n0.2\nsetosa\n    4.9\n3.0\n1.4\n0.2\nsetosa\n    4.7\n3.2\n1.3\n0.2\nsetosa\n    4.6\n3.1\n1.5\n0.2\nsetosa\n    5.0\n3.6\n1.4\n0.2\nsetosa\n    5.4\n3.9\n1.7\n0.4\nsetosa\n  \n  \n  \n\n\n\n\n\nSample/Observations = Row\n\nVariable = Column\nData objects that looks like this is often called a data frame.\nFancier versions from the tidyverse are called tibbles (more on that soon!)."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#function",
    "href": "materials/slides/Day01/01-background.html#function",
    "title": "Background",
    "section": "Function",
    "text": "Function\n\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nA function might help you add numbers together, create a plot, or organize your data. More on that soon!"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#argumentparameter",
    "href": "materials/slides/Day01/01-background.html#argumentparameter",
    "title": "Background",
    "section": "Argument/Parameter",
    "text": "Argument/Parameter\nArgument/Parameter - what you pass to a function\n\nsum(1, 20234)\n\n[1] 20235\n\n\n\nCan be data like the number 1 or 20234\nCan be options about how you want the function to work such as digits\n\n\nround(0.627, digits = 2)\n\n[1] 0.63\n\nround(0.627, digits = 1)\n\n[1] 0.6"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#package",
    "href": "materials/slides/Day01/01-background.html#package",
    "title": "Background",
    "section": "Package",
    "text": "Package\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nPackages are sort of analogous to a software application like Microsoft Word on your computer. Your operating system allows you to use it, just like having R installed (and other required packages) allows you to use packages."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#more-on-functions-and-packages",
    "href": "materials/slides/Day01/01-background.html#more-on-functions-and-packages",
    "title": "Background",
    "section": "More on Functions and Packages",
    "text": "More on Functions and Packages\n\nWhen you download R, it has a ‚Äúbase‚Äù set of functions/packages (base R)\n\nYou can install additional packages for your uses from CRAN or GitHub\nThese additional packages are written by RStudio or R users/developers (like us)"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#using-packages",
    "href": "materials/slides/Day01/01-background.html#using-packages",
    "title": "Background",
    "section": "Using Packages",
    "text": "Using Packages\n\nNot all packages available on CRAN or GitHub are trustworthy\nRStudio (the company) makes a lot of great packages\nWho wrote it? Hadley Wickham is a major authority on R (Employee and Developer at RStudio)\nHow to trust an R package\nInstall packages: install.packages(\"package_name\")\nUse packages: library(package_name)"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#tidyverse-ecosystem-and-base-r",
    "href": "materials/slides/Day01/01-background.html#tidyverse-ecosystem-and-base-r",
    "title": "Background",
    "section": "Tidyverse Ecosystem and Base R",
    "text": "Tidyverse Ecosystem and Base R\n\nWe will mostly show you how to use tidyverse packages and functions.\nThis is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\nTidyverse advantages:\n\nconsistent structure - making it easier to learn how to use different packages\n\nparticularly good for wrangling (manipulating, cleaning, joining) data\n\nmore flexible for visualizing data\n\nPackages for the tidyverse are managed by a team of respected data scientists at RStudio."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#installation-and-use",
    "href": "materials/slides/Day01/01-background.html#installation-and-use",
    "title": "Background",
    "section": "Installation and Use",
    "text": "Installation and Use\n\nInstall all the packages in the tidyverse by running install.packages(\"tidyverse\").\nRun library(tidyverse) to load the core tidyverse and make it available in your current R session.\nLearn more about the tidyverse package at https://tidyverse.tidyverse.org."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#core-tidyverse",
    "href": "materials/slides/Day01/01-background.html#core-tidyverse",
    "title": "Background",
    "section": "Core tidyverse",
    "text": "Core tidyverse\n\nThe core tidyverse includes the packages that you‚Äôre likely to use in everyday data analyses.\nAs of tidyverse 1.3.0, the following packages are included in the core tidyverse.\nThe tidyverse also includes many other packages with more specialised usage.\nThey are not loaded automatically with library(tidyverse), so you‚Äôll need to load each one with its own call to library()."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#data-import",
    "href": "materials/slides/Day01/01-background.html#data-import",
    "title": "Background",
    "section": "Data Import",
    "text": "Data Import\n\nAs well as readr, for reading flat files, the tidyverse package installs a number of other packages for reading data:\n\nDBI for relational databases. (Maintained by Kirill M√ºller.) You‚Äôll need to pair DBI with a database specific backends like RSQLite, RMariaDB, RPostgres, or odbc. Learn more at https://db.rstudio.com.\n\nreadxl for .xls and .xlsx sheets."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#data-wrangling",
    "href": "materials/slides/Day01/01-background.html#data-wrangling",
    "title": "Background",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn addition to tidyr, and dplyr, there are five packages (including stringr and forcats) which are designed to work with specific types of data:\n\nlubridate for dates and date-times.\nhms for time-of-day values.\nblob for storing blob (binary) data."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#program",
    "href": "materials/slides/Day01/01-background.html#program",
    "title": "Background",
    "section": "Program",
    "text": "Program\nIn addition to purrr, which provides very consistent and natural methods for iterating on R objects, there are two additional tidyverse packages that help with general programming challenges:\n\nmagrittr provides the pipe, %&gt;% used throughout the tidyverse. It also provide a number of more specialised piping operators (like %$% and %&lt;&gt;%) that can be useful in other places.\nglue provides an alternative to paste() that makes it easier to combine data and strings."
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#useful-mostly-free-resources",
    "href": "materials/slides/Day01/01-background.html#useful-mostly-free-resources",
    "title": "Background",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nTidyverse Skills for Data Science Book: https://jhudatascience.org/tidyversecourse/ (more about the tidyverse, some modeling, and machine learning)\nTidyverse Skills for Data Science Course: https://www.coursera.org/specializations/tidyverse-data-science-r (same content with quizzes, can get certificate with $)\nR for Data Science: http://r4ds.had.co.nz/\n(great general information)\nR basics by Rafael A. Irizarry: https://rafalab.github.io/dsbook/r-basics.html (great general information)\nOpen Case Studies: https://www.opencasestudies.org/\n(resource for specific public health cases with statistical implementation and interpretation)"
  },
  {
    "objectID": "materials/slides/Day01/01-background.html#useful-mostly-free-resources-1",
    "href": "materials/slides/Day01/01-background.html#useful-mostly-free-resources-1",
    "title": "Background",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nDataquest: https://www.dataquest.io/\n(general interactive resource)\nVarious ‚ÄúCheat Sheets‚Äù: https://www.rstudio.com/resources/cheatsheets/\nR reference card: http://cran.r-project.org/doc/contrib/Short-refcard.pdf\nR jargon: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR vs Stata: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR terminology: https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html",
    "href": "materials/slides/Day01/02-getting-started.html",
    "title": "Getting Started With R",
    "section": "",
    "text": "If you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!\n\n\n\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\n\n\n\n\n\nQuarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts\n\n\n\n\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?\n\n\n\n\n\nNow that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\n\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed.\n\n\n\n\n\n2 + 2\n\n[1] 4\n\n2 * 4\n\n[1] 8\n\n2^3\n\n[1] 8\n\n\nNote: when you type your command, R inherently thinks you want to print the result.\n\n\n\n\nThe R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder\n\n\n\n\n\n\n2 + (2 * 3)^2\n\n[1] 38\n\n(1 + 3) / 2 + 45\n\n[1] 47\n\n6 / 2 * (1 + 2)\n\n[1] 9\n\n\n\n\n\nTry evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1\n\n\n\n\n\nVariables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier.\n\n\n\n\n\nIdentifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)\n\n\n\n\n\nalllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName\n\n\n\n\n\nYou can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n\n[1] 2\n\nx * 4\n\n[1] 8\n\nx + 2\n\n[1] 4\n\n\n\n\n\nUsing equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15  \n\n\n\n\n\nDon‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved\n\n\n\n\nAt the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not.\n\n\n\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n\n[1] 10\n\n\n\nx &lt;- 10\nprint(x)\n\n[1] 10\n\n\n\nx &lt;- 10\ncat(x)\n\n10\n\n\n\n\n\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n\n[1] 24\n\n\n\n\n\nIn general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R.\n\n\n\n\n# this code prints Hello World\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n# check type of variables\nage &lt;- 30 \nclass(age)\n\n[1] \"numeric\"\n\n\n\n\n\n\nAs already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n\n\n\n\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program.\n\n\n\n\nYou should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#your-setup",
    "href": "materials/slides/Day01/02-getting-started.html#your-setup",
    "title": "Getting Started With R",
    "section": "",
    "text": "If you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#rstudio---major-concepts",
    "href": "materials/slides/Day01/02-getting-started.html#rstudio---major-concepts",
    "title": "Getting Started With R",
    "section": "",
    "text": "RStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#rstudio",
    "href": "materials/slides/Day01/02-getting-started.html#rstudio",
    "title": "Getting Started With R",
    "section": "",
    "text": "Quarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#what-is-reproducibility",
    "href": "materials/slides/Day01/02-getting-started.html#what-is-reproducibility",
    "title": "Getting Started With R",
    "section": "",
    "text": "Reproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#running-your-first-r-program",
    "href": "materials/slides/Day01/02-getting-started.html#running-your-first-r-program",
    "title": "Getting Started With R",
    "section": "",
    "text": "Now that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\""
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#running-your-first-r-program-1",
    "href": "materials/slides/Day01/02-getting-started.html#running-your-first-r-program-1",
    "title": "Getting Started With R",
    "section": "",
    "text": "message &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator",
    "href": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator",
    "title": "Getting Started With R",
    "section": "",
    "text": "2 + 2\n\n[1] 4\n\n2 * 4\n\n[1] 8\n\n2^3\n\n[1] 8\n\n\nNote: when you type your command, R inherently thinks you want to print the result."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-1",
    "href": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-1",
    "title": "Getting Started With R",
    "section": "",
    "text": "The R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-2",
    "href": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-2",
    "title": "Getting Started With R",
    "section": "",
    "text": "2 + (2 * 3)^2\n\n[1] 38\n\n(1 + 3) / 2 + 45\n\n[1] 47\n\n6 / 2 * (1 + 2)\n\n[1] 9"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-3",
    "href": "materials/slides/Day01/02-getting-started.html#r-as-a-calculator-3",
    "title": "Getting Started With R",
    "section": "",
    "text": "Try evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#variables-identifiers-in-r",
    "href": "materials/slides/Day01/02-getting-started.html#variables-identifiers-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Variables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#rules-for-writing-identifiers-in-r",
    "href": "materials/slides/Day01/02-getting-started.html#rules-for-writing-identifiers-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Identifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#basically-there-are-5-naming-conventions",
    "href": "materials/slides/Day01/02-getting-started.html#basically-there-are-5-naming-conventions",
    "title": "Getting Started With R",
    "section": "",
    "text": "alllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#assigning-values-to-objects",
    "href": "materials/slides/Day01/02-getting-started.html#assigning-values-to-objects",
    "title": "Getting Started With R",
    "section": "",
    "text": "You can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n\n[1] 2\n\nx * 4\n\n[1] 8\n\nx + 2\n\n[1] 4"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#creating-variables",
    "href": "materials/slides/Day01/02-getting-started.html#creating-variables",
    "title": "Getting Started With R",
    "section": "",
    "text": "Using equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#reserved-keaywords-in-r",
    "href": "materials/slides/Day01/02-getting-started.html#reserved-keaywords-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Don‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#entering-input",
    "href": "materials/slides/Day01/02-getting-started.html#entering-input",
    "title": "Getting Started With R",
    "section": "",
    "text": "At the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#evaluation",
    "href": "materials/slides/Day01/02-getting-started.html#evaluation",
    "title": "Getting Started With R",
    "section": "",
    "text": "When a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n\n[1] 10\n\n\n\nx &lt;- 10\nprint(x)\n\n[1] 10\n\n\n\nx &lt;- 10\ncat(x)\n\n10"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-comments",
    "href": "materials/slides/Day01/02-getting-started.html#r-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "Comments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n\n[1] 24"
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#types-of-comments-in-r",
    "href": "materials/slides/Day01/02-getting-started.html#types-of-comments-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "In general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-single-line-comments",
    "href": "materials/slides/Day01/02-getting-started.html#r-single-line-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "# this code prints Hello World\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n# check type of variables\nage &lt;- 30 \nclass(age)\n\n[1] \"numeric\""
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#r-multi-line-comments",
    "href": "materials/slides/Day01/02-getting-started.html#r-multi-line-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "As already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n\n[1] \"Hello World\""
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#purpose-of-comments",
    "href": "materials/slides/Day01/02-getting-started.html#purpose-of-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "As discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program."
  },
  {
    "objectID": "materials/slides/Day01/02-getting-started.html#how-to-create-better-comments",
    "href": "materials/slides/Day01/02-getting-started.html#how-to-create-better-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "You should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html",
    "href": "materials/slides/Day01/04-operators.html",
    "title": "Operators in R",
    "section": "",
    "text": "In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16\n\n\n\n\n\n\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n\n[1] 12\n\n# Subtraction\n2-5\n\n[1] -3\n\n# Multiplication\n2 * 5 \n\n[1] 10\n\n# Division\n2 / 5 \n\n[1] 0.4\n\n\n\n\n\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n\n[1] 32\n\n# Modulus(Remainder from division)\n2 %% 5\n\n[1] 2\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE\n\n\n\n\n\n\nThe output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n\n[1] FALSE\n\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n\n[1] TRUE\n\n\n\n\n\nLogical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)\n\n\n\n\n\nThe AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0\n\n\n\n\n\n\n\n# print & of TRUE and FALSE combinations\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n\n[1] TRUE\n\n\n\n\n\nThe OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0\n\n\n\n\n\n\n\n# print | of TRUE and FALSE combinations\nTRUE | TRUE\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nFALSE | FALSE\n\n[1] FALSE\n\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n\n[1] TRUE\n\n\n\n\n\nThe NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1\n\n\n\n\n\n\n\n# print ! of TRUE and FALSE\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#operators-in-r-1",
    "href": "materials/slides/Day01/04-operators.html#operators-in-r-1",
    "title": "Operators in R",
    "section": "",
    "text": "In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#arithmetic-operators",
    "href": "materials/slides/Day01/04-operators.html#arithmetic-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Operator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-arithmetic-operators",
    "href": "materials/slides/Day01/04-operators.html#example-arithmetic-operators",
    "title": "Operators in R",
    "section": "",
    "text": "x &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n\n[1] 12\n\n# Subtraction\n2-5\n\n[1] -3\n\n# Multiplication\n2 * 5 \n\n[1] 10\n\n# Division\n2 / 5 \n\n[1] 0.4"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-arithmetic-operators-1",
    "href": "materials/slides/Day01/04-operators.html#example-arithmetic-operators-1",
    "title": "Operators in R",
    "section": "",
    "text": "x &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n\n[1] 32\n\n# Modulus(Remainder from division)\n2 %% 5\n\n[1] 2"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#relational-operators",
    "href": "materials/slides/Day01/04-operators.html#relational-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Operator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-relational-operators",
    "href": "materials/slides/Day01/04-operators.html#example-relational-operators",
    "title": "Operators in R",
    "section": "",
    "text": "The output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n\n[1] FALSE\n\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#logical-operators",
    "href": "materials/slides/Day01/04-operators.html#logical-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Logical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#and-operator",
    "href": "materials/slides/Day01/04-operators.html#and-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-and-operator",
    "href": "materials/slides/Day01/04-operators.html#example-and-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print & of TRUE and FALSE combinations\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#or-operator",
    "href": "materials/slides/Day01/04-operators.html#or-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-or-operator",
    "href": "materials/slides/Day01/04-operators.html#example-or-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print | of TRUE and FALSE combinations\nTRUE | TRUE\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nFALSE | FALSE\n\n[1] FALSE\n\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n\n[1] TRUE"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#not-operator",
    "href": "materials/slides/Day01/04-operators.html#not-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1"
  },
  {
    "objectID": "materials/slides/Day01/04-operators.html#example-not-operator",
    "href": "materials/slides/Day01/04-operators.html#example-not-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print ! of TRUE and FALSE\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "slides/Day02/index.html",
    "href": "slides/Day02/index.html",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "slides/Day02/index.html#agenda",
    "href": "slides/Day02/index.html#agenda",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "slides/Day02/index.html#what-is-data-structure",
    "href": "slides/Day02/index.html#what-is-data-structure",
    "title": "R for Bioinformatics",
    "section": "What is Data Structure?",
    "text": "What is Data Structure?\n\nData structures are ways of organizing and storing data in a computer system.\nThey define the format, organization, and relationship between data elements.\nData structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\nThey provide a foundation for building algorithms and designing efficient programs."
  },
  {
    "objectID": "slides/Day02/index.html#data-structures-in-r",
    "href": "slides/Day02/index.html#data-structures-in-r",
    "title": "R for Bioinformatics",
    "section": "Data Structures in R",
    "text": "Data Structures in R\n\nVectors\nMatrix\nLists\nData Frame\nFactor"
  },
  {
    "objectID": "slides/Day02/index.html#types-of-data-structures-in-r",
    "href": "slides/Day02/index.html#types-of-data-structures-in-r",
    "title": "R for Bioinformatics",
    "section": "Types of Data Structures in R",
    "text": "Types of Data Structures in R\n\nOne-Dimensional Data Structures\n\nOne-dimensional data structures in R are used to store and manipulate data along a single dimension.\nThe main one-dimensional data structure in R is the vector.\n\nTwo-Dimensional Data Structures\n\nTwo-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\nThe main two-dimensional data structures in R are matrices and data frames."
  },
  {
    "objectID": "slides/Day02/index.html#strings",
    "href": "slides/Day02/index.html#strings",
    "title": "R for Bioinformatics",
    "section": "Strings",
    "text": "Strings\n\nA string is a sequence of characters. For example, \"Programming\" is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\nIn R, we represent strings using quotation marks (double quotes, ‚Äù ‚Äù or single quotes, ‚Äô ‚Äô). For example,\n\n\n# string value using single quotes\n'Hello' \n[1] ‚ÄúHello‚Äù\n# string value using double quotes \n\"Hello\" \n[1] ‚ÄúHello‚Äù"
  },
  {
    "objectID": "slides/Day02/index.html#string-operations-in-r",
    "href": "slides/Day02/index.html#string-operations-in-r",
    "title": "R for Bioinformatics",
    "section": "String Operations in R",
    "text": "String Operations in R\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\nFind the length of a string\nJoin two strings\nCompare two strings\nChange the string case"
  },
  {
    "objectID": "slides/Day02/index.html#find-length-of-string",
    "href": "slides/Day02/index.html#find-length-of-string",
    "title": "R for Bioinformatics",
    "section": "Find Length of String",
    "text": "Find Length of String\nWe use the nchar() method to find the length of a string. For example,\n\nmessage1 &lt;- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n[1] 17\n\nHere, nchar() returns the number of characters present inside the string."
  },
  {
    "objectID": "slides/Day02/index.html#join-strings-together",
    "href": "slides/Day02/index.html#join-strings-together",
    "title": "R for Bioinformatics",
    "section": "Join Strings Together",
    "text": "Join Strings Together\nIn R, we can use the paste() function to join two or more strings together. For example,\n\nmessage1 &lt;- \"CHIRAL\"\nmessage2 &lt;- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n[1] ‚ÄúCHIRAL Bangladesh‚Äù\n\nHere, we have used the paste() function to join two strings: message1 and message2."
  },
  {
    "objectID": "slides/Day02/index.html#compare-two-strings-in-r-programming",
    "href": "slides/Day02/index.html#compare-two-strings-in-r-programming",
    "title": "R for Bioinformatics",
    "section": "Compare Two Strings in R Programming",
    "text": "Compare Two Strings in R Programming\nWe use the == operator to compare two strings. If two strings are equal, the operator returns TRUE. Otherwise, it returns FALSE. For example,\n\nmessage1 &lt;- \"Hello, World!\"\nmessage2 &lt;- \"Hi, Bangladesh!\"\nmessage3 &lt;- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n[1] FALSE\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n[1] FALSE"
  },
  {
    "objectID": "slides/Day02/index.html#change-case-of-r-string",
    "href": "slides/Day02/index.html#change-case-of-r-string",
    "title": "R for Bioinformatics",
    "section": "Change Case of R String",
    "text": "Change Case of R String\nIn R, we can change the case of a string using\n\ntoupper() - convert string to uppercase\ntolower() - convert string to lowercase\n\n\nmessage &lt;- \"R Programming\"\n\n# change string to uppercase\nmessage_upper &lt;- toupper(message)\nmessage_upper\n[1] ‚ÄúR PROGRAMMING‚Äù\n# change string to lowercase\nmessage_lower &lt;- tolower(message)\nmessage_lower\n[1] ‚Äúr programming‚Äù"
  },
  {
    "objectID": "slides/Day02/index.html#vector",
    "href": "slides/Day02/index.html#vector",
    "title": "R for Bioinformatics",
    "section": "Vector",
    "text": "Vector\n\nVector is a basic data structure in R.\nIt contains element of the same type.\nThe data types can be logical, integer, double, character, and complex.\nA vector‚Äôs type can be checked with the typeof() function."
  },
  {
    "objectID": "slides/Day02/index.html#creating-vectors---using-the-c-function",
    "href": "slides/Day02/index.html#creating-vectors---using-the-c-function",
    "title": "R for Bioinformatics",
    "section": "Creating Vectors - Using the c() Function",
    "text": "Creating Vectors - Using the c() Function\nThe c() function is used to concatenate or combine elements into a vector.\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)"
  },
  {
    "objectID": "slides/Day02/index.html#creating-vectors---using-the-operator",
    "href": "slides/Day02/index.html#creating-vectors---using-the-operator",
    "title": "R for Bioinformatics",
    "section": "Creating Vectors - Using the : Operator",
    "text": "Creating Vectors - Using the : Operator\nThe : operator generates a sequence of numbers from the starting value to the ending value.\n\n# Numeric sequence vector\nnumeric_sequence &lt;- 1:10"
  },
  {
    "objectID": "slides/Day02/index.html#creating-vectors---using-sequence-generation-functions",
    "href": "slides/Day02/index.html#creating-vectors---using-sequence-generation-functions",
    "title": "R for Bioinformatics",
    "section": "Creating Vectors - Using Sequence Generation Functions",
    "text": "Creating Vectors - Using Sequence Generation Functions\nR provides functions like seq(), rep(), and seq_len() to generate sequences of numbers.\n\n# Numeric sequence vector using seq()\nnumeric_sequence &lt;- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values &lt;- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence &lt;- seq_len(10)"
  },
  {
    "objectID": "slides/Day02/index.html#creating-vectors---using-vectorized-operations",
    "href": "slides/Day02/index.html#creating-vectors---using-vectorized-operations",
    "title": "R for Bioinformatics",
    "section": "Creating Vectors - Using Vectorized Operations",
    "text": "Creating Vectors - Using Vectorized Operations\nVectors can be created by performing operations on existing vectors or values.\n\n# Vector created using vectorized operation\nnew_vector &lt;- numeric_vector * 2"
  },
  {
    "objectID": "slides/Day02/index.html#creating-vectors---mixing-objects",
    "href": "slides/Day02/index.html#creating-vectors---mixing-objects",
    "title": "R for Bioinformatics",
    "section": "Creating Vectors - Mixing Objects",
    "text": "Creating Vectors - Mixing Objects\n\n# Character \nx &lt;- c(1.7, \"a\")\n# Numeric \ny &lt;- c(TRUE, 2)\n# Character \nz &lt;- c(\"a\", TRUE)"
  },
  {
    "objectID": "slides/Day02/index.html#matrix",
    "href": "slides/Day02/index.html#matrix",
    "title": "R for Bioinformatics",
    "section": "Matrix",
    "text": "Matrix\n\nMatrix is a two dimensional data structure in R programming.\nMatrix is similar to vector but additionally contains the dimension attributes.\nAll attributes of an object can be checked by attributes() function.\nDimension can be checked by directly with the dim()function. We can check if a variable is a matrix or not with the class() function."
  },
  {
    "objectID": "slides/Day02/index.html#creatinig-matrix",
    "href": "slides/Day02/index.html#creatinig-matrix",
    "title": "R for Bioinformatics",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\nMatrix can be created using the matrix() function. Here‚Äôs the general syntax:\n\n\nmatrix(data, nrow, ncol, byrow, dimnames)\n\n\ndata: The data elements used to fill the matrix. It can be a vector or a combination of vectors.\nnrow: The number of rows in the matrix.\nncol: The number of columns in the matrix.\nbyrow: A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\ndimnames: Optional names for the rows and columns of the matrix."
  },
  {
    "objectID": "slides/Day02/index.html#creatinig-matrix-1",
    "href": "slides/Day02/index.html#creatinig-matrix-1",
    "title": "R for Bioinformatics",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\n# Create a matrix using matrix function \nmat1 &lt;- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 &lt;- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))"
  },
  {
    "objectID": "slides/Day02/index.html#matrix-properties",
    "href": "slides/Day02/index.html#matrix-properties",
    "title": "R for Bioinformatics",
    "section": "Matrix Properties",
    "text": "Matrix Properties\n\n# Create a matrix using matrix function \nmat &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n[1] ‚ÄúA‚Äù ‚ÄúB‚Äù ‚ÄúC‚Äù\n# Row Names \nrownames(mat)\n[1] ‚ÄúX‚Äù ‚ÄúY‚Äù ‚ÄúZ‚Äù\n# Dimension \ndim(mat)\n[1] 3 3"
  },
  {
    "objectID": "slides/Day02/index.html#list",
    "href": "slides/Day02/index.html#list",
    "title": "R for Bioinformatics",
    "section": "List",
    "text": "List\n\nList is a data structure having components of mixed data types.\nA vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\nWe can check if it‚Äôs a list with typeof() function and find its length using length() function."
  },
  {
    "objectID": "slides/Day02/index.html#creating-list",
    "href": "slides/Day02/index.html#creating-list",
    "title": "R for Bioinformatics",
    "section": "Creating List",
    "text": "Creating List\nList can be created using the list() function. Here‚Äôs the general syntax:\n\nlist(..., recursive = FALSE)\n\n\n...: The elements to be included in the list, separated by commas.\nrecursive: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default)."
  },
  {
    "objectID": "slides/Day02/index.html#creating-list-1",
    "href": "slides/Day02/index.html#creating-list-1",
    "title": "R for Bioinformatics",
    "section": "Creating List",
    "text": "Creating List\n\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list &lt;- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)"
  },
  {
    "objectID": "slides/Day02/index.html#factors",
    "href": "slides/Day02/index.html#factors",
    "title": "R for Bioinformatics",
    "section": "Factors",
    "text": "Factors\n\nIn R, factors are used to represent categorical or discrete data with predefined levels or categories.\nFactors are useful when working with data that has distinct categories or when performing statistical analysis.\nFactors are used to represent categorical data and can be ordered and unordered."
  },
  {
    "objectID": "slides/Day02/index.html#creating-factors",
    "href": "slides/Day02/index.html#creating-factors",
    "title": "R for Bioinformatics",
    "section": "Creating Factors",
    "text": "Creating Factors\nFactors are created using the factor() function in R. Here‚Äôs the general syntax:\n\nfactor(x, levels, labels, ordered = FALSE)\n\n\nx: A vector or column of data that represents the categorical variable.\nlevels: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\nlabels: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\nordered: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default)."
  },
  {
    "objectID": "slides/Day02/index.html#creating-factors-1",
    "href": "slides/Day02/index.html#creating-factors-1",
    "title": "R for Bioinformatics",
    "section": "Creating Factors",
    "text": "Creating Factors\n\n# Create a factor using factor() function \nf &lt;- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n[1] ‚Äúno‚Äù ‚Äúyes‚Äù"
  },
  {
    "objectID": "slides/Day02/index.html#data-frame",
    "href": "slides/Day02/index.html#data-frame",
    "title": "R for Bioinformatics",
    "section": "Data Frame",
    "text": "Data Frame\n\nIn R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\nIt consists of rows and columns, where each column can have a different data type.\nData frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\nData frames can be created using the data.frame() function or by importing data from external sources."
  },
  {
    "objectID": "slides/Day02/index.html#create-data-frame",
    "href": "slides/Day02/index.html#create-data-frame",
    "title": "R for Bioinformatics",
    "section": "Create Data Frame",
    "text": "Create Data Frame\nData frames can be created using the data.frame() function or by importing data from external sources. Here‚Äôs an example of creating a data frame in R:\n\n# Create a data frame\ndf &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)"
  },
  {
    "objectID": "slides/Day02/index.html#data-conversion-functions-in-r",
    "href": "slides/Day02/index.html#data-conversion-functions-in-r",
    "title": "R for Bioinformatics",
    "section": "Data Conversion Functions in R",
    "text": "Data Conversion Functions in R\n\nConversion functions in R help transform data between different types and formats.\nas.character(), as.numeric(), as.integer(), as.logical(), and as.factor() are commonly used conversion functions.\nThese functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types."
  },
  {
    "objectID": "slides/Day02/index.html#as.character",
    "href": "slides/Day02/index.html#as.character",
    "title": "R for Bioinformatics",
    "section": "as.character()",
    "text": "as.character()\n\nas.character() function converts an object to a character string representation.\nSyntax: as.character(x)\nx: The object to be converted.\n\n\n# Convert numeric values to character strings\nnumbers &lt;- c(1, 2, 3)\ncharacter_numbers &lt;- as.character(numbers)"
  },
  {
    "objectID": "slides/Day02/index.html#as.numeric",
    "href": "slides/Day02/index.html#as.numeric",
    "title": "R for Bioinformatics",
    "section": "as.numeric()",
    "text": "as.numeric()\n\nas.numeric() function converts an object to numeric (floating-point) values.\nSyntax: as.numeric(x)\nx: The object to be converted.\n\n\n# Convert character strings to numeric values\ncharacter_numbers &lt;- c(\"1\", \"2\", \"3\")\nnumeric_numbers &lt;- as.numeric(character_numbers)"
  },
  {
    "objectID": "slides/Day02/index.html#as.integer",
    "href": "slides/Day02/index.html#as.integer",
    "title": "R for Bioinformatics",
    "section": "as.integer()",
    "text": "as.integer()\n\nas.integer() function converts an object to integer values.\nSyntax: as.integer(x)\nx: The object to be converted.\n\n\n# Convert numeric values to integer values\nnumbers &lt;- c(1.5, 2.7, 3.9)\ninteger_numbers &lt;- as.integer(numbers)"
  },
  {
    "objectID": "slides/Day02/index.html#as.logical",
    "href": "slides/Day02/index.html#as.logical",
    "title": "R for Bioinformatics",
    "section": "as.logical()",
    "text": "as.logical()\n\nas.logical() function converts an object to logical (boolean) values.\nSyntax: as.logical(x)\nx: The object to be converted.\n\n\n# Convert numeric values to logical values\nnumbers &lt;- c(0, 1, 2)\nlogical_values &lt;- as.logical(numbers)"
  },
  {
    "objectID": "slides/Day02/index.html#as.factor",
    "href": "slides/Day02/index.html#as.factor",
    "title": "R for Bioinformatics",
    "section": "as.factor()",
    "text": "as.factor()\n\nas.factor() function converts an object to a factor, which represents categorical data.\nSyntax: as.factor(x)\nx: The object to be converted."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-a-vector",
    "href": "slides/Day02/index.html#subsetting-a-vector",
    "title": "R for Bioinformatics",
    "section": "Subsetting a Vector",
    "text": "Subsetting a Vector\n\nSubsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-vector-elements-by-index",
    "href": "slides/Day02/index.html#subsetting-vector-elements-by-index",
    "title": "R for Bioinformatics",
    "section": "Subsetting Vector Elements by Index",
    "text": "Subsetting Vector Elements by Index\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n[1] 30\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-vector-elements-by-logical-condition",
    "href": "slides/Day02/index.html#subsetting-vector-elements-by-logical-condition",
    "title": "R for Bioinformatics",
    "section": "Subsetting Vector Elements by Logical Condition",
    "text": "Subsetting Vector Elements by Logical Condition\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n[1] 40 50\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-vector-elements-using-operator",
    "href": "slides/Day02/index.html#subsetting-vector-elements-using-operator",
    "title": "R for Bioinformatics",
    "section": "Subsetting Vector Elements Using : Operator",
    "text": "Subsetting Vector Elements Using : Operator\nThe : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n[1] 20 30 40\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-vector-elements-using-c-function",
    "href": "slides/Day02/index.html#subsetting-vector-elements-using-c-function",
    "title": "R for Bioinformatics",
    "section": "Subsetting Vector Elements Using c() Function",
    "text": "Subsetting Vector Elements Using c() Function\nThe c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n[1] 10 30 50\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-list",
    "href": "slides/Day02/index.html#subsetting-list",
    "title": "R for Bioinformatics",
    "section": "Subsetting List",
    "text": "Subsetting List\n\nSubsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ]."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-list-elements-by-index",
    "href": "slides/Day02/index.html#subsetting-list-elements-by-index",
    "title": "R for Bioinformatics",
    "section": "Subsetting List Elements by Index",
    "text": "Subsetting List Elements by Index\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n[1] ‚Äúbanana‚Äù\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-list-elements-by-name",
    "href": "slides/Day02/index.html#subsetting-list-elements-by-name",
    "title": "R for Bioinformatics",
    "section": "Subsetting List Elements by Name",
    "text": "Subsetting List Elements by Name\n\nmy_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n[1] ‚Äúorange‚Äù\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-a-subset-of-list-elements",
    "href": "slides/Day02/index.html#subsetting-a-subset-of-list-elements",
    "title": "R for Bioinformatics",
    "section": "Subsetting a Subset of List Elements",
    "text": "Subsetting a Subset of List Elements\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n[[1]] [1] ‚Äúbanana‚Äù\n[[2]] [1] ‚Äúorange‚Äù\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-matrix",
    "href": "slides/Day02/index.html#subsetting-matrix",
    "title": "R for Bioinformatics",
    "section": "Subsetting Matrix",
    "text": "Subsetting Matrix\n\nSubsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-rows",
    "href": "slides/Day02/index.html#subsetting-rows",
    "title": "R for Bioinformatics",
    "section": "Subsetting Rows",
    "text": "Subsetting Rows\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n[1] 1 3 5\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-columns",
    "href": "slides/Day02/index.html#subsetting-columns",
    "title": "R for Bioinformatics",
    "section": "Subsetting Columns",
    "text": "Subsetting Columns\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n[1] 3 4\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#subsetting-elements",
    "href": "slides/Day02/index.html#subsetting-elements",
    "title": "R for Bioinformatics",
    "section": "Subsetting Elements",
    "text": "Subsetting Elements\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n[1] 2\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "slides/Day02/index.html#control-flow-structure",
    "href": "slides/Day02/index.html#control-flow-structure",
    "title": "R for Bioinformatics",
    "section": "Control Flow Structure",
    "text": "Control Flow Structure\n\nControl flow refers to the order in which instructions are executed in a program.\nIn R, control flow is managed through various constructs that allow for conditional execution, loop iterations, and branching.\nConditionals - if, if..else, if..else..elif\nLoops - for, while, repeat"
  },
  {
    "objectID": "slides/Day02/index.html#if-statement",
    "href": "slides/Day02/index.html#if-statement",
    "title": "R for Bioinformatics",
    "section": "if statement",
    "text": "if statement\nThe if statement allows for conditional execution of code blocks.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}"
  },
  {
    "objectID": "slides/Day02/index.html#if-statement-1",
    "href": "slides/Day02/index.html#if-statement-1",
    "title": "R for Bioinformatics",
    "section": "if statement",
    "text": "if statement\n\n# example \nx &lt;- 5\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n}\n[1] ‚Äúx is positive.‚Äù\n\n\nThe variable x is assigned a value of 5.\nThe if statement checks if x is greater than 0.\nSince the condition is TRUE (5 is greater than 0), the code block inside the curly braces is executed.\nResult: The message \"x is positive.\" is printed."
  },
  {
    "objectID": "slides/Day02/index.html#if..else-statement",
    "href": "slides/Day02/index.html#if..else-statement",
    "title": "R for Bioinformatics",
    "section": "if..else statement",
    "text": "if..else statement\nThe if-else statement allows you to execute different code blocks based on a condition.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}"
  },
  {
    "objectID": "slides/Day02/index.html#if..else-statement-1",
    "href": "slides/Day02/index.html#if..else-statement-1",
    "title": "R for Bioinformatics",
    "section": "if..else statement",
    "text": "if..else statement\n\n# example \nx &lt;- -2\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n[1] ‚Äúx is negative.‚Äù\n\n\nThe variable x is assigned a value of -2.\nThe if statement checks if x is greater than 0.\nSince the condition is FALSE (-2 is not greater than 0), the code block inside the else clause is executed.\nResult: The message \"x is negative.\" is printed."
  },
  {
    "objectID": "slides/Day02/index.html#if..else-if..else-statement",
    "href": "slides/Day02/index.html#if..else-if..else-statement",
    "title": "R for Bioinformatics",
    "section": "if..else if..else statement",
    "text": "if..else if..else statement\nThe if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}"
  },
  {
    "objectID": "slides/Day02/index.html#if..else-if..else-statement-1",
    "href": "slides/Day02/index.html#if..else-if..else-statement-1",
    "title": "R for Bioinformatics",
    "section": "if..else if..else statement",
    "text": "if..else if..else statement\n\n# example \nx &lt;- 0\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else if (x &lt; 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n[1] ‚Äúx is zero.‚Äù\n\n\nThe variable x is assigned a value of0.\nThe if statement checks if x is greater than 0, then if it is less than 0.\nSince none of the conditions are TRUE, the code block inside the else clause is executed.\nResult: The message \"x is zero.\" is printed."
  },
  {
    "objectID": "slides/Day02/index.html#ifelse-function",
    "href": "slides/Day02/index.html#ifelse-function",
    "title": "R for Bioinformatics",
    "section": "ifelse function",
    "text": "ifelse function\n\nThe ifelse() function in R is a vectorized version of the if-else statement.\nIt allows you to perform conditional operations on elements of a vector or data frame based on a specified condition.\n\n\n# Syntax \nifelse(condition, true_value, false_value)"
  },
  {
    "objectID": "slides/Day02/index.html#ifelse-function-1",
    "href": "slides/Day02/index.html#ifelse-function-1",
    "title": "R for Bioinformatics",
    "section": "ifelse function",
    "text": "ifelse function\n\n# example \nx &lt;- c(1, 2, 3, 4, 5)\nresult &lt;- ifelse(x &gt; 3, \"Greater\", \"Less or equal\")\nresult\n[1] ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúGreater‚Äù\n[5] ‚ÄúGreater‚Äù\n\n\nThe vector x contains numeric values.\nThe ifelse function checks if each element of x is greater than 3.\nFor elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value ‚ÄúGreater‚Äù. Otherwise, it is assigned the value ‚ÄúLess or equal‚Äù.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "slides/Day02/index.html#handling-missing-values-with-ifelse",
    "href": "slides/Day02/index.html#handling-missing-values-with-ifelse",
    "title": "R for Bioinformatics",
    "section": "Handling Missing Values with ifelse()",
    "text": "Handling Missing Values with ifelse()\nThe ifelse function can handle missing values (NA) in the input vectors.\n\nx &lt;- c(1, 2, NA, 4, 5)\n\nresult &lt;- ifelse(is.na(x), \"Missing\", ifelse(x &gt; 3, \"Greater\", \"Less or equal\"))\nresult\n[1] ‚ÄúLess or equal‚Äù ‚ÄúLess or equal‚Äù ‚ÄúMissing‚Äù ‚ÄúGreater‚Äù\n[5] ‚ÄúGreater‚Äù\n\n\nThe vector x contains numeric values, including a missing value (NA).\nThe first ifelse checks if each element of x is missing (NA).\nIf TRUE, the element is assigned the value ‚ÄúMissing‚Äù.\nIf FALSE, the second ifelse checks if the element is greater than 3, assigning ‚ÄúGreater‚Äù or ‚ÄúLess or equal‚Äù accordingly.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúMissing‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "slides/Day02/index.html#ifelse-with-data-frames",
    "href": "slides/Day02/index.html#ifelse-with-data-frames",
    "title": "R for Bioinformatics",
    "section": "ifelse() with Data Frames",
    "text": "ifelse() with Data Frames\nThe ifelse() function can be applied to specific columns of a data frame.\n\ndf &lt;- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category &lt;- ifelse(df$Age &gt;= 30, \"Senior\", \"Junior\")\n\n\nThe data frame df contains columns for names and ages.\nThe ifelse function is applied to the Age column.\nIf the age is greater than or equal to 30, the Category column is assigned the value ‚ÄúSenior‚Äù. Otherwise, it is assigned ‚ÄúJunior‚Äù.\nResult: The df data frame will have an additional column Category with values c(‚ÄúJunior‚Äù, ‚ÄúJunior‚Äù, ‚ÄúSenior‚Äù)."
  },
  {
    "objectID": "slides/Day02/index.html#for-loop",
    "href": "slides/Day02/index.html#for-loop",
    "title": "R for Bioinformatics",
    "section": "for loop",
    "text": "for loop\nThe for loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}"
  },
  {
    "objectID": "slides/Day02/index.html#for-loop-example",
    "href": "slides/Day02/index.html#for-loop-example",
    "title": "R for Bioinformatics",
    "section": "for loop Example",
    "text": "for loop Example\n\n# Example \nfor (i in 1:5) {\n  print(i)\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5\n\n\nThe for loop iterates over the sequence 1:5.\nIn each iteration, the loop variable i takes the value of the current element in the sequence.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "slides/Day02/index.html#using-for-loop-with-vector",
    "href": "slides/Day02/index.html#using-for-loop-with-vector",
    "title": "R for Bioinformatics",
    "section": "Using for Loop with Vector",
    "text": "Using for Loop with Vector\nThe for loop can be used to iterate over elements of a vector.\n\nfruits &lt;- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n[1] ‚Äúapple‚Äù [1] ‚Äúbanana‚Äù [1] ‚Äúorange‚Äù\n\n\nThe vector fruits contains strings representing different fruits.\nThe for loop iterates over each element of the fruits vector.\nIn each iteration, the loop variable fruit takes the value of the current element.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\nResult: The strings ‚Äúapple‚Äù, ‚Äúbanana‚Äù, and ‚Äúorange‚Äù are printed."
  },
  {
    "objectID": "slides/Day02/index.html#controlling-for-loop-with-conditions",
    "href": "slides/Day02/index.html#controlling-for-loop-with-conditions",
    "title": "R for Bioinformatics",
    "section": "Controlling for Loop with Conditions",
    "text": "Controlling for Loop with Conditions\nYou can control the behavior of a for loop using conditional statements.\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n[1] ‚Äú1 is odd‚Äù [1] ‚Äú2 is even‚Äù [1] ‚Äú3 is odd‚Äù [1] ‚Äú4 is even‚Äù [1] ‚Äú5 is odd‚Äù [1] ‚Äú6 is even‚Äù [1] ‚Äú7 is odd‚Äù [1] ‚Äú8 is even‚Äù [1] ‚Äú9 is odd‚Äù [1] ‚Äú10 is even‚Äù"
  },
  {
    "objectID": "slides/Day02/index.html#controlling-for-loop-with-conditions-1",
    "href": "slides/Day02/index.html#controlling-for-loop-with-conditions-1",
    "title": "R for Bioinformatics",
    "section": "Controlling for Loop with Conditions",
    "text": "Controlling for Loop with Conditions\n\nThe for loop iterates over the sequence 1:10.\nIn each iteration, the loop variable i takes the value of the current element.\nThe if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "slides/Day02/index.html#while-loop",
    "href": "slides/Day02/index.html#while-loop",
    "title": "R for Bioinformatics",
    "section": "while loop",
    "text": "while loop\nThe while loop in R allows for executing a block of code repeatedly as long as a specified condition is TRUE.\n\nwhile (condition) {\n  # Code block to be executed\n}"
  },
  {
    "objectID": "slides/Day02/index.html#while-loop-example",
    "href": "slides/Day02/index.html#while-loop-example",
    "title": "R for Bioinformatics",
    "section": "while Loop Example",
    "text": "while Loop Example\n\ni &lt;- 1\n\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 5.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nAfter printing, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "slides/Day02/index.html#using-while-loop-with-conditional-statements",
    "href": "slides/Day02/index.html#using-while-loop-with-conditional-statements",
    "title": "R for Bioinformatics",
    "section": "Using while Loop with Conditional Statements",
    "text": "Using while Loop with Conditional Statements\nYou can use conditional statements within a while loop to control its behavior.\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i &lt;- i + 1\n}\n[1] ‚Äú1 is odd‚Äù [1] ‚Äú2 is even‚Äù [1] ‚Äú3 is odd‚Äù [1] ‚Äú4 is even‚Äù [1] ‚Äú5 is odd‚Äù [1] ‚Äú6 is even‚Äù [1] ‚Äú7 is odd‚Äù [1] ‚Äú8 is even‚Äù [1] ‚Äú9 is odd‚Äù [1] ‚Äú10 is even‚Äù"
  },
  {
    "objectID": "slides/Day02/index.html#using-while-loop-with-conditional-statements-1",
    "href": "slides/Day02/index.html#using-while-loop-with-conditional-statements-1",
    "title": "R for Bioinformatics",
    "section": "Using while Loop with Conditional Statements",
    "text": "Using while Loop with Conditional Statements\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nAfter executing the code block, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "slides/Day02/index.html#controlling-while-loop-with-external-conditions",
    "href": "slides/Day02/index.html#controlling-while-loop-with-external-conditions",
    "title": "R for Bioinformatics",
    "section": "Controlling while Loop with External Conditions",
    "text": "Controlling while Loop with External Conditions\nYou can control the behavior of a while loop by modifying external conditions within the loop.\n\nx &lt;- 10\n\nwhile (x &gt; 0) {\n  print(x)\n  x &lt;- x - 2\n}\n[1] 10 [1] 8 [1] 6 [1] 4 [1] 2"
  },
  {
    "objectID": "slides/Day02/index.html#controlling-while-loop-with-external-conditions-1",
    "href": "slides/Day02/index.html#controlling-while-loop-with-external-conditions-1",
    "title": "R for Bioinformatics",
    "section": "Controlling while Loop with External Conditions",
    "text": "Controlling while Loop with External Conditions\n\nThe variable x is initially set to 10.\nThe while loop continues executing as long as x is greater than 0.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\nAfter printing, x is decremented by 2 using the assignment statement x &lt;- x - 2.\nThe loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 10, 8, 6, 4, and 2 are printed."
  },
  {
    "objectID": "slides/Day02/index.html#break-statement",
    "href": "slides/Day02/index.html#break-statement",
    "title": "R for Bioinformatics",
    "section": "break statement",
    "text": "break statement\n\nThe break statement in R is used to exit a loop prematurely.\nIt is typically used within conditional statements to terminate the loop based on a specific condition."
  },
  {
    "objectID": "slides/Day02/index.html#break-statement-example",
    "href": "slides/Day02/index.html#break-statement-example",
    "title": "R for Bioinformatics",
    "section": "break Statement Example",
    "text": "break Statement Example\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i &lt;- i + 1\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5"
  },
  {
    "objectID": "slides/Day02/index.html#break-statement-example-1",
    "href": "slides/Day02/index.html#break-statement-example-1",
    "title": "R for Bioinformatics",
    "section": "break Statement Example",
    "text": "break Statement Example\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nThe if statement checks if i is equal to 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\nAfter the break statement, the remaining code within the loop is not executed.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5."
  },
  {
    "objectID": "slides/Day02/index.html#next-statement",
    "href": "slides/Day02/index.html#next-statement",
    "title": "R for Bioinformatics",
    "section": "next statement",
    "text": "next statement\n\nThe next statement in R is used to skip the current iteration of a loop and move to the next iteration.\nIt is typically used within conditional statements to control the flow of the loop based on a specific condition."
  },
  {
    "objectID": "slides/Day02/index.html#next-statement-example",
    "href": "slides/Day02/index.html#next-statement-example",
    "title": "R for Bioinformatics",
    "section": "next Statement Example",
    "text": "next Statement Example\n\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n[1] 1 [1] 2 [1] 4 [1] 5\n\n\nThe for loop iterates over the values 1 to 5.\nIn each iteration, the code block inside the curly braces is executed.\nThe if statement checks if i is equal to 3.\nIf the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\nIf the condition is FALSE, the code block continues executing, and the value of i is printed.\nResult: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped."
  },
  {
    "objectID": "slides/Day02/index.html#repeat-loop",
    "href": "slides/Day02/index.html#repeat-loop",
    "title": "R for Bioinformatics",
    "section": "repeat loop",
    "text": "repeat loop\n\nThe repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\nIt provides a way to create an infinite loop that can be terminated using control flow statements."
  },
  {
    "objectID": "slides/Day02/index.html#repeat-loop-example",
    "href": "slides/Day02/index.html#repeat-loop-example",
    "title": "R for Bioinformatics",
    "section": "repeat loop Example",
    "text": "repeat loop Example\n\ni &lt;- 1\n\nrepeat {\n  print(i)\n  i &lt;- i + 1\n  if (i &gt; 5) {\n    break\n  }\n}\n[1] 1 [1] 2 [1] 3 [1] 4 [1] 5"
  },
  {
    "objectID": "slides/Day02/index.html#repeat-loop-example-1",
    "href": "slides/Day02/index.html#repeat-loop-example-1",
    "title": "R for Bioinformatics",
    "section": "repeat loop Example",
    "text": "repeat loop Example\n\nThe variable i is initially set to 1.\nThe repeat loop continues executing the code block inside the curly braces indefinitely.\nIn each iteration, the value of i is printed.\nThe variable i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe if statement checks if i is greater than 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate.\nAfter the break statement, the program flow continues with the next statement after the loop.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5."
  },
  {
    "objectID": "slides/Day02/index.html#functions-in-r",
    "href": "slides/Day02/index.html#functions-in-r",
    "title": "R for Bioinformatics",
    "section": "Functions in R",
    "text": "Functions in R\n\nFunctions in R are blocks of reusable code that perform specific tasks.\nThey provide modularity and allow for the organization and reuse of code.\nFunctions can accept input arguments, perform computations, and return output values."
  },
  {
    "objectID": "slides/Day02/index.html#types-of-functions-in-r",
    "href": "slides/Day02/index.html#types-of-functions-in-r",
    "title": "R for Bioinformatics",
    "section": "Types of Functions in R",
    "text": "Types of Functions in R\n\nBuilt-in Functions\nUser-Defined Functions\nRecursive Functions\nAnonymous Functions (Lambda Functions)\nHigher-Order Functions"
  },
  {
    "objectID": "slides/Day02/index.html#built-in-functions",
    "href": "slides/Day02/index.html#built-in-functions",
    "title": "R for Bioinformatics",
    "section": "Built-in Functions",
    "text": "Built-in Functions\n\nR comes with a wide range of built-in functions that are available for immediate use.\nExamples: mean(), sum(), max(), min(), sqrt(), length(), etc.\nThese functions are part of the R language and provide basic operations and computations."
  },
  {
    "objectID": "slides/Day02/index.html#user-defined-functions",
    "href": "slides/Day02/index.html#user-defined-functions",
    "title": "R for Bioinformatics",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\n\nUsers can define their own functions in R to perform specific tasks.\nThese functions are created using the function keyword followed by the function name, arguments, and function body.\nExamples: Custom functions created by users to solve specific problems."
  },
  {
    "objectID": "slides/Day02/index.html#recursive-functions",
    "href": "slides/Day02/index.html#recursive-functions",
    "title": "R for Bioinformatics",
    "section": "Recursive Functions",
    "text": "Recursive Functions\n\nRecursive functions are functions that call themselves during their execution.\nThey are useful for solving problems that can be broken down into smaller, similar sub-problems.\nExamples: Functions that calculate factorials, Fibonacci series, or perform tree traversal."
  },
  {
    "objectID": "slides/Day02/index.html#anonymous-functions-lambda-functions",
    "href": "slides/Day02/index.html#anonymous-functions-lambda-functions",
    "title": "R for Bioinformatics",
    "section": "Anonymous Functions (Lambda Functions)",
    "text": "Anonymous Functions (Lambda Functions)\n\nAnonymous functions, also known as lambda functions, are functions without a formal name.\nThey are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\nExamples: Functions used with higher-order functions like apply(), lapply(), sapply(), etc."
  },
  {
    "objectID": "slides/Day02/index.html#higher-order-functions",
    "href": "slides/Day02/index.html#higher-order-functions",
    "title": "R for Bioinformatics",
    "section": "Higher-Order Functions",
    "text": "Higher-Order Functions\n\nHigher-order functions take other functions as arguments or return functions as their output.\nThey allow for functional programming paradigms in R.\nExamples: apply() family of functions, map() functions from the purrr package."
  },
  {
    "objectID": "slides/Day02/index.html#creating-a-function",
    "href": "slides/Day02/index.html#creating-a-function",
    "title": "R for Bioinformatics",
    "section": "Creating a Function",
    "text": "Creating a Function\n\nTo create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\nThe function body is enclosed in curly braces {} and contains the code to be executed.\n\n\nf &lt;- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()"
  },
  {
    "objectID": "slides/Day02/index.html#creating-a-function-1",
    "href": "slides/Day02/index.html#creating-a-function-1",
    "title": "R for Bioinformatics",
    "section": "Creating a Function",
    "text": "Creating a Function\n\n# Function definition\nmy_function &lt;- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result &lt;- arg1 + arg2\n  return(result)\n}"
  },
  {
    "objectID": "slides/Day02/index.html#calling-a-function",
    "href": "slides/Day02/index.html#calling-a-function",
    "title": "R for Bioinformatics",
    "section": "Calling a Function",
    "text": "Calling a Function\n\nTo call a function in R, use the function name followed by parentheses, passing the required input arguments.\nThe function executes the code within its body and returns the specified output.\n\n\n# Function call\nresult &lt;- my_function(3, 5)\nprint(result)\n[1] 8"
  },
  {
    "objectID": "slides/Day02/index.html#function-with-default-arguments",
    "href": "slides/Day02/index.html#function-with-default-arguments",
    "title": "R for Bioinformatics",
    "section": "Function with Default Arguments",
    "text": "Function with Default Arguments\n\nFunctions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\nDefault arguments are defined using the assignment operator (=) within the function definition.\n\n\n# Function definition with default argument\ngreet &lt;- function(name = \"Guest\") {\n  message &lt;- paste(\"Hello,\", name)\n  print(message)\n}"
  },
  {
    "objectID": "slides/Day02/index.html#function-with-variable-arguments",
    "href": "slides/Day02/index.html#function-with-variable-arguments",
    "title": "R for Bioinformatics",
    "section": "Function with Variable Arguments",
    "text": "Function with Variable Arguments\n\nIn R, functions can accept variable arguments using the ... notation.\nVariable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n# Function definition with variable arguments\ncalculate_sum &lt;- function(...) {\n  numbers &lt;- list(...)\n  total &lt;- sum(numbers)\n  return(total)\n}"
  },
  {
    "objectID": "slides/Day02/index.html#working-with-dates-and-times-in-r",
    "href": "slides/Day02/index.html#working-with-dates-and-times-in-r",
    "title": "R for Bioinformatics",
    "section": "Working with Dates and Times in R",
    "text": "Working with Dates and Times in R\n\nDates and times in R can be represented using different classes and functions.\nLet‚Äôs explore some common operations and functions related to dates and times in R."
  },
  {
    "objectID": "slides/Day02/index.html#date-and-time-classes",
    "href": "slides/Day02/index.html#date-and-time-classes",
    "title": "R for Bioinformatics",
    "section": "Date and Time Classes",
    "text": "Date and Time Classes\n\nDate class: Represents dates without time information.\nPOSIXct class: Represents dates and times with second-level precision.\nPOSIXlt class: Represents dates and times as a list of components."
  },
  {
    "objectID": "slides/Day02/index.html#creating-dates-and-times",
    "href": "slides/Day02/index.html#creating-dates-and-times",
    "title": "R for Bioinformatics",
    "section": "Creating Dates and Times",
    "text": "Creating Dates and Times\n\nas.Date(): Converts a character or numeric value to a Date object.\nas.POSIXct() or as.POSIXlt(): Converts a character or numeric value to a POSIXct or POSIXlt object.\n\n\ndate &lt;- as.Date(\"2023-07-05\")\ndatetime &lt;- as.POSIXct(\"2023-07-05 10:30:00\")"
  },
  {
    "objectID": "slides/Day02/index.html#formatting-and-parsing-dates-and-times",
    "href": "slides/Day02/index.html#formatting-and-parsing-dates-and-times",
    "title": "R for Bioinformatics",
    "section": "Formatting and Parsing Dates and Times",
    "text": "Formatting and Parsing Dates and Times\n\nformat(): Converts a date or time object to a character string with a specified format.\nstrptime(): Parses a character string representing a date or time into a POSIXlt object, based on a specified format.\n\n\nformatted_date &lt;- format(date, format = \"%Y/%m/%d\")\nparsed_datetime &lt;- strptime(\"2023-07-05 10:30:00\", format = \"%Y-%m-%d %H:%M:%S\")"
  },
  {
    "objectID": "slides/Day02/index.html#extracting-components",
    "href": "slides/Day02/index.html#extracting-components",
    "title": "R for Bioinformatics",
    "section": "Extracting Components",
    "text": "Extracting Components\nFunctions likeyear(), month(), day(), hour(), minute(), second() can be used to extract specific components from date and time objects.\n\nhour &lt;- parsed_datetime$hour\nminute &lt;- parsed_datetime$min\nsecond &lt;- parsed_datetime$sec"
  },
  {
    "objectID": "slides/Day02/index.html#arithmetic-operations",
    "href": "slides/Day02/index.html#arithmetic-operations",
    "title": "R for Bioinformatics",
    "section": "Arithmetic Operations",
    "text": "Arithmetic Operations\n\nDates and times can be manipulated using arithmetic operations.\nArithmetic operations on Date objects return new Date objects.\nArithmetic operations on POSIXct objects return new POSIXct objects, maintaining the time information.\n\n\nnext_day &lt;- date + 1"
  },
  {
    "objectID": "slides/Day02/index.html#time-zones",
    "href": "slides/Day02/index.html#time-zones",
    "title": "R for Bioinformatics",
    "section": "Time Zones",
    "text": "Time Zones\n\nR allows working with dates and times in different time zones.\nTime zones can be specified using the tz parameter when creating or converting date and time objects.\n\n\ndatetime_ny &lt;- as.POSIXct(\"2023-07-05 10:30:00\", tz = \"America/New_York\")\n\n\nDates and times in R are represented using different classes: Date, POSIXct, and POSIXlt.\nFunctions like as.Date(), as.POSIXct(), format(), strptime(), etc., facilitate working with dates and times."
  },
  {
    "objectID": "slides/Day02/index.html#loop-functions---apply-family",
    "href": "slides/Day02/index.html#loop-functions---apply-family",
    "title": "R for Bioinformatics",
    "section": "Loop Functions - Apply Family",
    "text": "Loop Functions - Apply Family\n\nThe apply family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\nThese functions eliminate the need for explicit looping and can significantly simplify code."
  },
  {
    "objectID": "slides/Day02/index.html#apply",
    "href": "slides/Day02/index.html#apply",
    "title": "R for Bioinformatics",
    "section": "apply()",
    "text": "apply()\n\napply() function applies a function over margins of an array or matrix.\nSyntax: apply(X, MARGIN, FUN, ‚Ä¶)\nX: The input data structure (array or matrix).\nMARGIN: The dimension or dimensions along which the function should be applied.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to rows of a matrix\nmat &lt;- matrix(1:9, nrow = 3)\nresult &lt;- apply(mat, 1, sum)\nresult\n[1] 12 15 18"
  },
  {
    "objectID": "slides/Day02/index.html#lapply",
    "href": "slides/Day02/index.html#lapply",
    "title": "R for Bioinformatics",
    "section": "lapply()",
    "text": "lapply()\n\nlapply() function applies a function to each element of a list or vector.\nSyntax: lapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sqrt function to each element of a list\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- lapply(numbers, sqrt)"
  },
  {
    "objectID": "slides/Day02/index.html#sapply",
    "href": "slides/Day02/index.html#sapply",
    "title": "R for Bioinformatics",
    "section": "sapply()",
    "text": "sapply()\n\nsapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\nSyntax: sapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and simplify the result\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- sapply(numbers, sum)"
  },
  {
    "objectID": "slides/Day02/index.html#vapply",
    "href": "slides/Day02/index.html#vapply",
    "title": "R for Bioinformatics",
    "section": "vapply()",
    "text": "vapply()\n\nvapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\nSyntax: vapply(X, FUN, FUN.VALUE, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\nFUN.VALUE: The desired output type and shape.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and specify the output type\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- vapply(numbers, sum, FUN.VALUE = numeric(1))"
  },
  {
    "objectID": "slides/Day02/index.html#mapply",
    "href": "slides/Day02/index.html#mapply",
    "title": "R for Bioinformatics",
    "section": "mapply()",
    "text": "mapply()\n\nmapply() function applies a function to multiple vectors or lists in parallel.\nSyntax: mapply(FUN, ‚Ä¶, MoreArgs = NULL, SIMPLIFY = TRUE)\nFUN: The function to be applied.\n‚Ä¶: Multiple input vectors or lists.\nMoreArgs: Additional arguments to be passed to the function.\nSIMPLIFY: Whether to simplify the result if possible.\n\n\n# Apply a function to multiple vectors in parallel\nvector1 &lt;- c(1, 2, 3)\nvector2 &lt;- c(4, 5, 10)"
  },
  {
    "objectID": "slides/Day02/index.html#simulations",
    "href": "slides/Day02/index.html#simulations",
    "title": "R for Bioinformatics",
    "section": "Simulations",
    "text": "Simulations\n\nSimulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations."
  },
  {
    "objectID": "slides/Day02/index.html#generating-random-numbers",
    "href": "slides/Day02/index.html#generating-random-numbers",
    "title": "R for Bioinformatics",
    "section": "Generating Random Numbers",
    "text": "Generating Random Numbers\n\nrunif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)"
  },
  {
    "objectID": "slides/Day02/index.html#generating-random-integers",
    "href": "slides/Day02/index.html#generating-random-integers",
    "title": "R for Bioinformatics",
    "section": "Generating Random Integers",
    "text": "Generating Random Integers\n\nsample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)"
  },
  {
    "objectID": "slides/Day02/index.html#generating-random-samples-from-a-vector",
    "href": "slides/Day02/index.html#generating-random-samples-from-a-vector",
    "title": "R for Bioinformatics",
    "section": "Generating Random Samples from a Vector",
    "text": "Generating Random Samples from a Vector\n\nsample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)"
  },
  {
    "objectID": "slides/Day02/index.html#generating-random-numbers-from-distributions",
    "href": "slides/Day02/index.html#generating-random-numbers-from-distributions",
    "title": "R for Bioinformatics",
    "section": "Generating Random Numbers from Distributions",
    "text": "Generating Random Numbers from Distributions\n\nR provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)"
  },
  {
    "objectID": "slides/Day02/index.html#seeding-random-number-generation",
    "href": "slides/Day02/index.html#seeding-random-number-generation",
    "title": "R for Bioinformatics",
    "section": "Seeding Random Number Generation",
    "text": "Seeding Random Number Generation\n\nTo reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html",
    "href": "slides/Day02/05-loop-functions.html",
    "title": "Loop Functions",
    "section": "",
    "text": "The apply family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\nThese functions eliminate the need for explicit looping and can significantly simplify code.\n\n\n\n\n\napply() function applies a function over margins of an array or matrix.\nSyntax: apply(X, MARGIN, FUN, ‚Ä¶)\nX: The input data structure (array or matrix).\nMARGIN: The dimension or dimensions along which the function should be applied.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to rows of a matrix\nmat &lt;- matrix(1:9, nrow = 3)\nresult &lt;- apply(mat, 1, sum)\nresult\n\n[1] 12 15 18\n\n\n\n\n\n\nlapply() function applies a function to each element of a list or vector.\nSyntax: lapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sqrt function to each element of a list\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- lapply(numbers, sqrt)\n\n\n\n\n\nsapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\nSyntax: sapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and simplify the result\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- sapply(numbers, sum)\n\n\n\n\n\nvapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\nSyntax: vapply(X, FUN, FUN.VALUE, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\nFUN.VALUE: The desired output type and shape.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and specify the output type\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- vapply(numbers, sum, FUN.VALUE = numeric(1))\n\n\n\n\n\nmapply() function applies a function to multiple vectors or lists in parallel.\nSyntax: mapply(FUN, ‚Ä¶, MoreArgs = NULL, SIMPLIFY = TRUE)\nFUN: The function to be applied.\n‚Ä¶: Multiple input vectors or lists.\nMoreArgs: Additional arguments to be passed to the function.\nSIMPLIFY: Whether to simplify the result if possible.\n\n\n# Apply a function to multiple vectors in parallel\nvector1 &lt;- c(1, 2, 3)\nvector2 &lt;- c(4, 5, 10)"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#loop-functions---apply-family",
    "href": "slides/Day02/05-loop-functions.html#loop-functions---apply-family",
    "title": "Loop Functions",
    "section": "",
    "text": "The apply family of functions in R provides a convenient way to apply a function to subsets of data structures such as vectors, matrices, and data frames.\nThese functions eliminate the need for explicit looping and can significantly simplify code."
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#apply",
    "href": "slides/Day02/05-loop-functions.html#apply",
    "title": "Loop Functions",
    "section": "",
    "text": "apply() function applies a function over margins of an array or matrix.\nSyntax: apply(X, MARGIN, FUN, ‚Ä¶)\nX: The input data structure (array or matrix).\nMARGIN: The dimension or dimensions along which the function should be applied.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to rows of a matrix\nmat &lt;- matrix(1:9, nrow = 3)\nresult &lt;- apply(mat, 1, sum)\nresult\n\n[1] 12 15 18"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#lapply",
    "href": "slides/Day02/05-loop-functions.html#lapply",
    "title": "Loop Functions",
    "section": "",
    "text": "lapply() function applies a function to each element of a list or vector.\nSyntax: lapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sqrt function to each element of a list\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- lapply(numbers, sqrt)"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#sapply",
    "href": "slides/Day02/05-loop-functions.html#sapply",
    "title": "Loop Functions",
    "section": "",
    "text": "sapply() function is similar to lapply() but simplifies the result into a vector, matrix, or array if possible.\nSyntax: sapply(X, FUN, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and simplify the result\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- sapply(numbers, sum)"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#vapply",
    "href": "slides/Day02/05-loop-functions.html#vapply",
    "title": "Loop Functions",
    "section": "",
    "text": "vapply() function is similar to sapply() but allows specifying the output type and shape explicitly.\nSyntax: vapply(X, FUN, FUN.VALUE, ‚Ä¶)\nX: The input list or vector.\nFUN: The function to be applied.\nFUN.VALUE: The desired output type and shape.\n‚Ä¶: Additional arguments to be passed to the function.\n\n\n# Apply sum function to each element of a list and specify the output type\nnumbers &lt;- list(a = 4, b = 9, c = 16)\nresult &lt;- vapply(numbers, sum, FUN.VALUE = numeric(1))"
  },
  {
    "objectID": "slides/Day02/05-loop-functions.html#mapply",
    "href": "slides/Day02/05-loop-functions.html#mapply",
    "title": "Loop Functions",
    "section": "",
    "text": "mapply() function applies a function to multiple vectors or lists in parallel.\nSyntax: mapply(FUN, ‚Ä¶, MoreArgs = NULL, SIMPLIFY = TRUE)\nFUN: The function to be applied.\n‚Ä¶: Multiple input vectors or lists.\nMoreArgs: Additional arguments to be passed to the function.\nSIMPLIFY: Whether to simplify the result if possible.\n\n\n# Apply a function to multiple vectors in parallel\nvector1 &lt;- c(1, 2, 3)\nvector2 &lt;- c(4, 5, 10)"
  },
  {
    "objectID": "slides/Day02/03-functions.html",
    "href": "slides/Day02/03-functions.html",
    "title": "Functions",
    "section": "",
    "text": "Functions in R are blocks of reusable code that perform specific tasks.\nThey provide modularity and allow for the organization and reuse of code.\nFunctions can accept input arguments, perform computations, and return output values.\n\n\n\n\n\nBuilt-in Functions\nUser-Defined Functions\nRecursive Functions\nAnonymous Functions (Lambda Functions)\nHigher-Order Functions\n\n\n\n\n\nR comes with a wide range of built-in functions that are available for immediate use.\nExamples: mean(), sum(), max(), min(), sqrt(), length(), etc.\nThese functions are part of the R language and provide basic operations and computations.\n\n\n\n\n\nUsers can define their own functions in R to perform specific tasks.\nThese functions are created using the function keyword followed by the function name, arguments, and function body.\nExamples: Custom functions created by users to solve specific problems.\n\n\n\n\n\nRecursive functions are functions that call themselves during their execution.\nThey are useful for solving problems that can be broken down into smaller, similar sub-problems.\nExamples: Functions that calculate factorials, Fibonacci series, or perform tree traversal.\n\n\n\n\n\nAnonymous functions, also known as lambda functions, are functions without a formal name.\nThey are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\nExamples: Functions used with higher-order functions like apply(), lapply(), sapply(), etc.\n\n\n\n\n\nHigher-order functions take other functions as arguments or return functions as their output.\nThey allow for functional programming paradigms in R.\nExamples: apply() family of functions, map() functions from the purrr package.\n\n\n\n\n\nTo create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\nThe function body is enclosed in curly braces {} and contains the code to be executed.\n\n\nf &lt;- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()\n\n\n\n\n\n# Function definition\nmy_function &lt;- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result &lt;- arg1 + arg2\n  return(result)\n}\n\n\n\n\n\nTo call a function in R, use the function name followed by parentheses, passing the required input arguments.\nThe function executes the code within its body and returns the specified output.\n\n\n# Function call\nresult &lt;- my_function(3, 5)\nprint(result)\n\n[1] 8\n\n\n\n\n\n\nFunctions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\nDefault arguments are defined using the assignment operator (=) within the function definition.\n\n\n# Function definition with default argument\ngreet &lt;- function(name = \"Guest\") {\n  message &lt;- paste(\"Hello,\", name)\n  print(message)\n}\n\n\n\n\n\nIn R, functions can accept variable arguments using the ... notation.\nVariable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n# Function definition with variable arguments\ncalculate_sum &lt;- function(...) {\n  numbers &lt;- list(...)\n  total &lt;- sum(numbers)\n  return(total)\n}"
  },
  {
    "objectID": "slides/Day02/03-functions.html#functions-in-r",
    "href": "slides/Day02/03-functions.html#functions-in-r",
    "title": "Functions",
    "section": "",
    "text": "Functions in R are blocks of reusable code that perform specific tasks.\nThey provide modularity and allow for the organization and reuse of code.\nFunctions can accept input arguments, perform computations, and return output values."
  },
  {
    "objectID": "slides/Day02/03-functions.html#types-of-functions-in-r",
    "href": "slides/Day02/03-functions.html#types-of-functions-in-r",
    "title": "Functions",
    "section": "",
    "text": "Built-in Functions\nUser-Defined Functions\nRecursive Functions\nAnonymous Functions (Lambda Functions)\nHigher-Order Functions"
  },
  {
    "objectID": "slides/Day02/03-functions.html#built-in-functions",
    "href": "slides/Day02/03-functions.html#built-in-functions",
    "title": "Functions",
    "section": "",
    "text": "R comes with a wide range of built-in functions that are available for immediate use.\nExamples: mean(), sum(), max(), min(), sqrt(), length(), etc.\nThese functions are part of the R language and provide basic operations and computations."
  },
  {
    "objectID": "slides/Day02/03-functions.html#user-defined-functions",
    "href": "slides/Day02/03-functions.html#user-defined-functions",
    "title": "Functions",
    "section": "",
    "text": "Users can define their own functions in R to perform specific tasks.\nThese functions are created using the function keyword followed by the function name, arguments, and function body.\nExamples: Custom functions created by users to solve specific problems."
  },
  {
    "objectID": "slides/Day02/03-functions.html#recursive-functions",
    "href": "slides/Day02/03-functions.html#recursive-functions",
    "title": "Functions",
    "section": "",
    "text": "Recursive functions are functions that call themselves during their execution.\nThey are useful for solving problems that can be broken down into smaller, similar sub-problems.\nExamples: Functions that calculate factorials, Fibonacci series, or perform tree traversal."
  },
  {
    "objectID": "slides/Day02/03-functions.html#anonymous-functions-lambda-functions",
    "href": "slides/Day02/03-functions.html#anonymous-functions-lambda-functions",
    "title": "Functions",
    "section": "",
    "text": "Anonymous functions, also known as lambda functions, are functions without a formal name.\nThey are typically used for one-time or short computations and are defined using the function keyword without assigning them to a variable.\nExamples: Functions used with higher-order functions like apply(), lapply(), sapply(), etc."
  },
  {
    "objectID": "slides/Day02/03-functions.html#higher-order-functions",
    "href": "slides/Day02/03-functions.html#higher-order-functions",
    "title": "Functions",
    "section": "",
    "text": "Higher-order functions take other functions as arguments or return functions as their output.\nThey allow for functional programming paradigms in R.\nExamples: apply() family of functions, map() functions from the purrr package."
  },
  {
    "objectID": "slides/Day02/03-functions.html#creating-a-function",
    "href": "slides/Day02/03-functions.html#creating-a-function",
    "title": "Functions",
    "section": "",
    "text": "To create a function in R, use the function keyword followed by the function name and parentheses for the input arguments.\nThe function body is enclosed in curly braces {} and contains the code to be executed.\n\n\nf &lt;- function() {\n  # empty function\n}\n# Function have their own class \n\nclass(f) \n\n# Execute / Call this function\nf()"
  },
  {
    "objectID": "slides/Day02/03-functions.html#creating-a-function-1",
    "href": "slides/Day02/03-functions.html#creating-a-function-1",
    "title": "Functions",
    "section": "",
    "text": "# Function definition\nmy_function &lt;- function(arg1, arg2) {\n  # Code block\n  # Perform computations\n  result &lt;- arg1 + arg2\n  return(result)\n}"
  },
  {
    "objectID": "slides/Day02/03-functions.html#calling-a-function",
    "href": "slides/Day02/03-functions.html#calling-a-function",
    "title": "Functions",
    "section": "",
    "text": "To call a function in R, use the function name followed by parentheses, passing the required input arguments.\nThe function executes the code within its body and returns the specified output.\n\n\n# Function call\nresult &lt;- my_function(3, 5)\nprint(result)\n\n[1] 8"
  },
  {
    "objectID": "slides/Day02/03-functions.html#function-with-default-arguments",
    "href": "slides/Day02/03-functions.html#function-with-default-arguments",
    "title": "Functions",
    "section": "",
    "text": "Functions in R can have default values assigned to their arguments, which are used when the arguments are not explicitly provided during function call.\nDefault arguments are defined using the assignment operator (=) within the function definition.\n\n\n# Function definition with default argument\ngreet &lt;- function(name = \"Guest\") {\n  message &lt;- paste(\"Hello,\", name)\n  print(message)\n}"
  },
  {
    "objectID": "slides/Day02/03-functions.html#function-with-variable-arguments",
    "href": "slides/Day02/03-functions.html#function-with-variable-arguments",
    "title": "Functions",
    "section": "",
    "text": "In R, functions can accept variable arguments using the ... notation.\nVariable arguments allow for flexibility in the number of inputs passed to the function.\n\n\n# Function definition with variable arguments\ncalculate_sum &lt;- function(...) {\n  numbers &lt;- list(...)\n  total &lt;- sum(numbers)\n  return(total)\n}"
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html",
    "href": "slides/Day02/01-subsetting-robjects.html",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition.\n\n\n\n\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n\n[1] 30\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed.\n\n\n\n\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n\n[1] 40 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed.\n\n\n\n\nThe : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n\n[1] 20 30 40\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed.\n\n\n\n\nThe c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n\n[1] 10 30 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed.\n\n\n\n\n\nSubsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ].\n\n\n\n\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n\n[1] \"banana\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed.\n\n\n\n\n\nmy_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n\n[1] \"orange\"\n\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed.\n\n\n\n\n\nmy_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed.\n\n\n\n\n\nSubsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n\n[1] 1 3 5\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n\n[1] 3 4\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed.\n\n\n\n\n\nmatrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n\n[1] 2\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-a-vector",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-a-vector",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a vector allows you to extract specific elements based on their index or logical conditions.\nIt is done using square brackets [ ] in R.\nSubsetting Vector Elements by Index - Subsetting elements by index retrieves specific elements from a vector.\nSubsetting Vector Elements by Logical Condition - Subsetting elements by logical condition retrieves elements based on a specified condition."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-by-index",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-by-index",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "vector &lt;- c(10, 20, 30, 40, 50)\nvector[3]\n\n[1] 30\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector[3] retrieves the third element, which is 30.\nResult: The third element (30) is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-by-logical-condition",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-by-logical-condition",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "vector &lt;- c(10, 20, 30, 40, 50)\nvector[vector &gt; 30]\n\n[1] 40 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nvector &gt; 30 evaluates to a logical vector: FALSE, FALSE, FALSE, TRUE, TRUE.\nvector[vector &gt; 30] retrieves elements where the condition is TRUE.\nResult: Elements greater than 30 (40, 50) are displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-using-operator",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-using-operator",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "The : operator allows you to specify a range of elements to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[2:4]\n\n[1] 20 30 40\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\n2:4 creates a sequence of indices from 2 to 4.\nvector[2:4] retrieves elements at indices 2, 3, and 4.\nResult: Elements 20, 30, and 40 are displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-using-c-function",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-vector-elements-using-c-function",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "The c() function allows you to create a vector of specific indices to subset from a vector.\n\nvector &lt;- c(10, 20, 30, 40, 50)\nvector[c(1, 3, 5)]\n\n[1] 10 30 50\n\n\n\nThe vector contains elements: 10, 20, 30, 40, 50.\nc(1, 3, 5) creates a vector of indices: 1, 3, 5.\nvector[c(1, 3, 5)] retrieves elements at indices 1, 3, and 5.\nResult: Elements 10, 30, and 50 are displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-list",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-list",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a list allows you to extract specific elements or subsets from a list in R.\nIt is done using double square brackets [[ ]] or single square brackets[ ] in R.\nSubsetting List Elements by Index - Subsetting elements by index retrieves specific elements from a list.\nSubsetting List Elements by Name - Subsetting elements by name allows you to retrieve elements based on their assigned names.\nSubsetting a Subset of List Elements - You can subset a subset of elements from a list using single square brackets [ ]."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-list-elements-by-index",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-list-elements-by-index",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[[2]]\n\n[1] \"banana\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[[2]] retrieves the second element of the list, which is ‚Äúbanana‚Äù.\nResult: The second element (‚Äúbanana‚Äù) is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-list-elements-by-name",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-list-elements-by-name",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(fruit1 = \"apple\", fruit2 = \"banana\", fruit3 = \"orange\")\nmy_list$fruit3\n\n[1] \"orange\"\n\n\n\nThe list contains named elements: fruit1, fruit2, fruit3.\nmy_list$fruit3 retrieves the element with the name ‚Äúfruit3‚Äù, which is ‚Äúorange‚Äù.\nResult: The element ‚Äúorange‚Äù is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-a-subset-of-list-elements",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-a-subset-of-list-elements",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "my_list &lt;- list(\"apple\", \"banana\", \"orange\")\nmy_list[2:3]\n\n[[1]]\n[1] \"banana\"\n\n[[2]]\n[1] \"orange\"\n\n\n\nThe list contains elements: ‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù.\nmy_list[2:3] retrieves the second and third elements of the list.\nResult: The second and third elements (‚Äúbanana‚Äù, ‚Äúorange‚Äù) are displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-matrix",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-matrix",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "Subsetting a matrix allows you to extract specific rows, columns, or elements from a matrix in R.\nIt is done using square brackets [ ] in combination with row and column indices.\nSubsetting Rows - Subsetting rows allows you to retrieve specific rows from a matrix.\nSubsetting Columns - Subsetting columns allows you to retrieve specific columns from a matrix.\nSubsetting Elements - Subsetting individual elements allows you to retrieve specific elements from a matrix."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-rows",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-rows",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[1, ]\n\n[1] 1 3 5\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[1, ] retrieves the first row of the matrix.\nResult: The first row (1, 2) is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-columns",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-columns",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[, 2]\n\n[1] 3 4\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[, 2] retrieves the second column of the matrix.\nResult: The second column (2, 4) is displayed."
  },
  {
    "objectID": "slides/Day02/01-subsetting-robjects.html#subsetting-elements",
    "href": "slides/Day02/01-subsetting-robjects.html#subsetting-elements",
    "title": "Subsetting R Objects",
    "section": "",
    "text": "matrix &lt;- matrix(1:6, nrow = 2)\nmatrix[2, 1]\n\n[1] 2\n\n\n\nThe matrix contains elements: 1, 2, 3, 4, 5, 6.\nmatrix[2, 1]retrieves the element at the second row and first column.\nResult: The element at the second row and first column (3) is displayed."
  },
  {
    "objectID": "slides/Day01/index.html",
    "href": "slides/Day01/index.html",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "slides/Day01/index.html#agenda",
    "href": "slides/Day01/index.html#agenda",
    "title": "R for Bioinformatics",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "slides/Day01/index.html#about-the-course",
    "href": "slides/Day01/index.html#about-the-course",
    "title": "R for Bioinformatics",
    "section": "About the Course",
    "text": "About the Course\n\nWhat do you hope to get out of the course?\n\nR for Bioinformatics is an introductory course designed to equip learners with essential skills in using the R programming language for bioinformatics research.\n\nWhy do you want to use R?\n\nThe course focuses on the practical application of R in genomic data manipulation, statistical analysis, data visualization, and reproducible research."
  },
  {
    "objectID": "slides/Day01/index.html#learning-objectives",
    "href": "slides/Day01/index.html#learning-objectives",
    "title": "R for Bioinformatics",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nData Manipulation: Learn how to import, clean, and transform data in R for research purposes.\nData Visualization: Master techniques for creating effective data visualizations in R to communicate research findings visually.\nStatistical Analysis: Develop skills in conducting statistical analysis using R for hypothesis testing, regression analysis, and other statistical tests.\nReproducible Research: Implement principles of reproducible research using R to document and organize code, data, and analysis for replicability."
  },
  {
    "objectID": "slides/Day01/index.html#course-platforms",
    "href": "slides/Day01/index.html#course-platforms",
    "title": "R for Bioinformatics",
    "section": "Course Platforms",
    "text": "Course Platforms\n\nWebsite: https://omicscenter.github.io/RforResearch/\nGithub: https://github.com/omicscenter/RforResearch\nMaterials will be uploaded the night before class.\nPlease check regularly official Telegram group for this course.\n\n\nWe are constantly trying to improve content! Please refresh/download materials before class."
  },
  {
    "objectID": "slides/Day01/index.html#course-format",
    "href": "slides/Day01/index.html#course-format",
    "title": "R for Bioinformatics",
    "section": "Course Format",
    "text": "Course Format\n\nLecture with live coding (possibly ‚ÄúInteractive‚Äù)\nLab/Practical experience\nTwo 5 min breaks each session - timing may vary"
  },
  {
    "objectID": "slides/Day01/index.html#assignment-policy",
    "href": "slides/Day01/index.html#assignment-policy",
    "title": "R for Bioinformatics",
    "section": "Assignment Policy",
    "text": "Assignment Policy\n\n20% of your grade will be determined by an assignment during normal class hours.\n50% of your grade will come from a 5-10 page report that explores in further detail one of the research areas in the class syllabus\nWe expect that students will use original data collection, whether quantitative or qualitative analysis, to answer the questions posed.\n30% of your grade will be determined by your attendance and participation in class."
  },
  {
    "objectID": "slides/Day01/index.html#required-textbooks",
    "href": "slides/Day01/index.html#required-textbooks",
    "title": "R for Bioinformatics",
    "section": "Required Textbooks",
    "text": "Required Textbooks\nThe following books purchased and are available at the online book store. We have also a placed a copy of each on reserve at our Telegram group.\n\nData Analysis for the Life Sciences with R, by Rafael Irizarry\nIntroduction to Data Science, by Rafael Irizarry"
  },
  {
    "objectID": "slides/Day01/index.html#acknowledgements",
    "href": "slides/Day01/index.html#acknowledgements",
    "title": "R for Bioinformatics",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "slides/Day01/index.html#questions",
    "href": "slides/Day01/index.html#questions",
    "title": "R for Bioinformatics",
    "section": "Questions",
    "text": "Questions\n\n\n\nPlease add any questions to the public Zoom chat.\nCoordinators will monitor the chat\nWe‚Äôll also have time for questions at the break and at the end"
  },
  {
    "objectID": "slides/Day01/index.html#what-is-r",
    "href": "slides/Day01/index.html#what-is-r",
    "title": "R for Bioinformatics",
    "section": "What is R?",
    "text": "What is R?\n\nR is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis."
  },
  {
    "objectID": "slides/Day01/index.html#why-r",
    "href": "slides/Day01/index.html#why-r",
    "title": "R for Bioinformatics",
    "section": "Why R?",
    "text": "Why R?\n\nFree (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community"
  },
  {
    "objectID": "slides/Day01/index.html#reproducibility-crisis",
    "href": "slides/Day01/index.html#reproducibility-crisis",
    "title": "R for Bioinformatics",
    "section": "Reproducibility Crisis",
    "text": "Reproducibility Crisis\n\n\n\nQuality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "slides/Day01/index.html#variable-and-sample",
    "href": "slides/Day01/index.html#variable-and-sample",
    "title": "R for Bioinformatics",
    "section": "Variable and Sample",
    "text": "Variable and Sample\n\nVariable: something measured or counted that is a characteristic about a sample\n\nExamples: temperature, length, count, color, category\n\nSample: individuals that you have data about.\n\nExamples: people, houses, viruses etc."
  },
  {
    "objectID": "slides/Day01/index.html#object",
    "href": "slides/Day01/index.html#object",
    "title": "R for Bioinformatics",
    "section": "Object",
    "text": "Object\nObject - an object is something that can be worked with in R - can be lots of different things!\n\na matrix of numbers\na plot\na function\n\n‚Ä¶ many more"
  },
  {
    "objectID": "slides/Day01/index.html#columns-and-rows",
    "href": "slides/Day01/index.html#columns-and-rows",
    "title": "R for Bioinformatics",
    "section": "Columns and Rows",
    "text": "Columns and Rows\n\n\n\n\n\n\n  \n    \n    \n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n      Species\n    \n  \n  \n    5.1\n3.5\n1.4\n0.2\nsetosa\n    4.9\n3.0\n1.4\n0.2\nsetosa\n    4.7\n3.2\n1.3\n0.2\nsetosa\n    4.6\n3.1\n1.5\n0.2\nsetosa\n    5.0\n3.6\n1.4\n0.2\nsetosa\n    5.4\n3.9\n1.7\n0.4\nsetosa\n  \n  \n  \n\n\n\n\n\nSample/Observations = Row\n\nVariable = Column\nData objects that looks like this is often called a data frame.\nFancier versions from the tidyverse are called tibbles (more on that soon!)."
  },
  {
    "objectID": "slides/Day01/index.html#function",
    "href": "slides/Day01/index.html#function",
    "title": "R for Bioinformatics",
    "section": "Function",
    "text": "Function\n\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nA function might help you add numbers together, create a plot, or organize your data. More on that soon!"
  },
  {
    "objectID": "slides/Day01/index.html#argumentparameter",
    "href": "slides/Day01/index.html#argumentparameter",
    "title": "R for Bioinformatics",
    "section": "Argument/Parameter",
    "text": "Argument/Parameter\nArgument/Parameter - what you pass to a function\n\nsum(1, 20234)\n[1] 20235\n\n\nCan be data like the number 1 or 20234\nCan be options about how you want the function to work such as digits\n\n\nround(0.627, digits = 2)\n[1] 0.63\nround(0.627, digits = 1)\n[1] 0.6"
  },
  {
    "objectID": "slides/Day01/index.html#package",
    "href": "slides/Day01/index.html#package",
    "title": "R for Bioinformatics",
    "section": "Package",
    "text": "Package\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nPackages are sort of analogous to a software application like Microsoft Word on your computer. Your operating system allows you to use it, just like having R installed (and other required packages) allows you to use packages."
  },
  {
    "objectID": "slides/Day01/index.html#more-on-functions-and-packages",
    "href": "slides/Day01/index.html#more-on-functions-and-packages",
    "title": "R for Bioinformatics",
    "section": "More on Functions and Packages",
    "text": "More on Functions and Packages\n\nWhen you download R, it has a ‚Äúbase‚Äù set of functions/packages (base R)\n\nYou can install additional packages for your uses from CRAN or GitHub\nThese additional packages are written by RStudio or R users/developers (like us)"
  },
  {
    "objectID": "slides/Day01/index.html#using-packages",
    "href": "slides/Day01/index.html#using-packages",
    "title": "R for Bioinformatics",
    "section": "Using Packages",
    "text": "Using Packages\n\nNot all packages available on CRAN or GitHub are trustworthy\nRStudio (the company) makes a lot of great packages\nWho wrote it? Hadley Wickham is a major authority on R (Employee and Developer at RStudio)\nHow to trust an R package\nInstall packages: install.packages(\"package_name\")\nUse packages: library(package_name)"
  },
  {
    "objectID": "slides/Day01/index.html#tidyverse-ecosystem-and-base-r",
    "href": "slides/Day01/index.html#tidyverse-ecosystem-and-base-r",
    "title": "R for Bioinformatics",
    "section": "Tidyverse Ecosystem and Base R",
    "text": "Tidyverse Ecosystem and Base R\n\nWe will mostly show you how to use tidyverse packages and functions.\nThis is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\nTidyverse advantages:\n\nconsistent structure - making it easier to learn how to use different packages\n\nparticularly good for wrangling (manipulating, cleaning, joining) data\n\nmore flexible for visualizing data\n\nPackages for the tidyverse are managed by a team of respected data scientists at RStudio."
  },
  {
    "objectID": "slides/Day01/index.html#installation-and-use",
    "href": "slides/Day01/index.html#installation-and-use",
    "title": "R for Bioinformatics",
    "section": "Installation and Use",
    "text": "Installation and Use\n\nInstall all the packages in the tidyverse by running install.packages(\"tidyverse\").\nRun library(tidyverse) to load the core tidyverse and make it available in your current R session.\nLearn more about the tidyverse package at https://tidyverse.tidyverse.org."
  },
  {
    "objectID": "slides/Day01/index.html#core-tidyverse",
    "href": "slides/Day01/index.html#core-tidyverse",
    "title": "R for Bioinformatics",
    "section": "Core tidyverse",
    "text": "Core tidyverse\n\nThe core tidyverse includes the packages that you‚Äôre likely to use in everyday data analyses.\nAs of tidyverse 1.3.0, the following packages are included in the core tidyverse.\nThe tidyverse also includes many other packages with more specialised usage.\nThey are not loaded automatically with library(tidyverse), so you‚Äôll need to load each one with its own call to library()."
  },
  {
    "objectID": "slides/Day01/index.html#data-import",
    "href": "slides/Day01/index.html#data-import",
    "title": "R for Bioinformatics",
    "section": "Data Import",
    "text": "Data Import\n\nAs well as readr, for reading flat files, the tidyverse package installs a number of other packages for reading data:\n\nDBI for relational databases. (Maintained by Kirill M√ºller.) You‚Äôll need to pair DBI with a database specific backends like RSQLite, RMariaDB, RPostgres, or odbc. Learn more at https://db.rstudio.com.\n\nreadxl for .xls and .xlsx sheets."
  },
  {
    "objectID": "slides/Day01/index.html#data-wrangling",
    "href": "slides/Day01/index.html#data-wrangling",
    "title": "R for Bioinformatics",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn addition to tidyr, and dplyr, there are five packages (including stringr and forcats) which are designed to work with specific types of data:\n\nlubridate for dates and date-times.\nhms for time-of-day values.\nblob for storing blob (binary) data."
  },
  {
    "objectID": "slides/Day01/index.html#program",
    "href": "slides/Day01/index.html#program",
    "title": "R for Bioinformatics",
    "section": "Program",
    "text": "Program\nIn addition to purrr, which provides very consistent and natural methods for iterating on R objects, there are two additional tidyverse packages that help with general programming challenges:\n\nmagrittr provides the pipe, %&gt;% used throughout the tidyverse. It also provide a number of more specialised piping operators (like %$% and %&lt;&gt;%) that can be useful in other places.\nglue provides an alternative to paste() that makes it easier to combine data and strings."
  },
  {
    "objectID": "slides/Day01/index.html#useful-mostly-free-resources",
    "href": "slides/Day01/index.html#useful-mostly-free-resources",
    "title": "R for Bioinformatics",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nTidyverse Skills for Data Science Book: https://jhudatascience.org/tidyversecourse/ (more about the tidyverse, some modeling, and machine learning)\nTidyverse Skills for Data Science Course: https://www.coursera.org/specializations/tidyverse-data-science-r (same content with quizzes, can get certificate with $)\nR for Data Science: http://r4ds.had.co.nz/\n(great general information)\nR basics by Rafael A. Irizarry: https://rafalab.github.io/dsbook/r-basics.html (great general information)\nOpen Case Studies: https://www.opencasestudies.org/\n(resource for specific public health cases with statistical implementation and interpretation)"
  },
  {
    "objectID": "slides/Day01/index.html#useful-mostly-free-resources-1",
    "href": "slides/Day01/index.html#useful-mostly-free-resources-1",
    "title": "R for Bioinformatics",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nDataquest: https://www.dataquest.io/\n(general interactive resource)\nVarious ‚ÄúCheat Sheets‚Äù: https://www.rstudio.com/resources/cheatsheets/\nR reference card: http://cran.r-project.org/doc/contrib/Short-refcard.pdf\nR jargon: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR vs Stata: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR terminology: https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf"
  },
  {
    "objectID": "slides/Day01/index.html#your-setup",
    "href": "slides/Day01/index.html#your-setup",
    "title": "R for Bioinformatics",
    "section": "Your Setup",
    "text": "Your Setup\nIf you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!"
  },
  {
    "objectID": "slides/Day01/index.html#rstudio---major-concepts",
    "href": "slides/Day01/index.html#rstudio---major-concepts",
    "title": "R for Bioinformatics",
    "section": "RStudio - Major concepts",
    "text": "RStudio - Major concepts\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output."
  },
  {
    "objectID": "slides/Day01/index.html#rstudio",
    "href": "slides/Day01/index.html#rstudio",
    "title": "R for Bioinformatics",
    "section": "RStudio",
    "text": "RStudio\n\nQuarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts"
  },
  {
    "objectID": "slides/Day01/index.html#what-is-reproducibility",
    "href": "slides/Day01/index.html#what-is-reproducibility",
    "title": "R for Bioinformatics",
    "section": "What is Reproducibility?",
    "text": "What is Reproducibility?\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "slides/Day01/index.html#running-your-first-r-program",
    "href": "slides/Day01/index.html#running-your-first-r-program",
    "title": "R for Bioinformatics",
    "section": "Running Your First R Program",
    "text": "Running Your First R Program\n\nNow that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n[1] ‚ÄúHello World!‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#running-your-first-r-program-1",
    "href": "slides/Day01/index.html#running-your-first-r-program-1",
    "title": "R for Bioinformatics",
    "section": "Running Your First R Program",
    "text": "Running Your First R Program\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n[1] ‚ÄúHello World!‚Äù\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed."
  },
  {
    "objectID": "slides/Day01/index.html#r-as-a-calculator",
    "href": "slides/Day01/index.html#r-as-a-calculator",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\n2 + 2\n[1] 4\n2 * 4\n[1] 8\n2^3\n[1] 8\n\nNote: when you type your command, R inherently thinks you want to print the result."
  },
  {
    "objectID": "slides/Day01/index.html#r-as-a-calculator-1",
    "href": "slides/Day01/index.html#r-as-a-calculator-1",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\nThe R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder"
  },
  {
    "objectID": "slides/Day01/index.html#r-as-a-calculator-2",
    "href": "slides/Day01/index.html#r-as-a-calculator-2",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\n\n2 + (2 * 3)^2\n[1] 38\n(1 + 3) / 2 + 45\n[1] 47\n6 / 2 * (1 + 2)\n[1] 9"
  },
  {
    "objectID": "slides/Day01/index.html#r-as-a-calculator-3",
    "href": "slides/Day01/index.html#r-as-a-calculator-3",
    "title": "R for Bioinformatics",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nTry evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1"
  },
  {
    "objectID": "slides/Day01/index.html#variables-identifiers-in-r",
    "href": "slides/Day01/index.html#variables-identifiers-in-r",
    "title": "R for Bioinformatics",
    "section": "Variables (Identifiers) in R",
    "text": "Variables (Identifiers) in R\n\nVariables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier."
  },
  {
    "objectID": "slides/Day01/index.html#rules-for-writing-identifiers-in-r",
    "href": "slides/Day01/index.html#rules-for-writing-identifiers-in-r",
    "title": "R for Bioinformatics",
    "section": "Rules for writing Identifiers in R",
    "text": "Rules for writing Identifiers in R\n\nIdentifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)"
  },
  {
    "objectID": "slides/Day01/index.html#basically-there-are-5-naming-conventions",
    "href": "slides/Day01/index.html#basically-there-are-5-naming-conventions",
    "title": "R for Bioinformatics",
    "section": "Basically, there are 5 naming conventions",
    "text": "Basically, there are 5 naming conventions\n\nalllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName"
  },
  {
    "objectID": "slides/Day01/index.html#assigning-values-to-objects",
    "href": "slides/Day01/index.html#assigning-values-to-objects",
    "title": "R for Bioinformatics",
    "section": "Assigning Values to Objects",
    "text": "Assigning Values to Objects\n\nYou can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n[1] 2\nx * 4\n[1] 8\nx + 2\n[1] 4"
  },
  {
    "objectID": "slides/Day01/index.html#creating-variables",
    "href": "slides/Day01/index.html#creating-variables",
    "title": "R for Bioinformatics",
    "section": "Creating Variables",
    "text": "Creating Variables\nUsing equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15"
  },
  {
    "objectID": "slides/Day01/index.html#reserved-keaywords-in-r",
    "href": "slides/Day01/index.html#reserved-keaywords-in-r",
    "title": "R for Bioinformatics",
    "section": "Reserved Keaywords in R",
    "text": "Reserved Keaywords in R\n\nDon‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved"
  },
  {
    "objectID": "slides/Day01/index.html#entering-input",
    "href": "slides/Day01/index.html#entering-input",
    "title": "R for Bioinformatics",
    "section": "Entering Input",
    "text": "Entering Input\nAt the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not."
  },
  {
    "objectID": "slides/Day01/index.html#evaluation",
    "href": "slides/Day01/index.html#evaluation",
    "title": "R for Bioinformatics",
    "section": "Evaluation",
    "text": "Evaluation\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n[1] 10\n\n\nx &lt;- 10\nprint(x)\n[1] 10\n\n\nx &lt;- 10\ncat(x)\n10"
  },
  {
    "objectID": "slides/Day01/index.html#r-comments",
    "href": "slides/Day01/index.html#r-comments",
    "title": "R for Bioinformatics",
    "section": "R Comments",
    "text": "R Comments\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n[1] 24"
  },
  {
    "objectID": "slides/Day01/index.html#types-of-comments-in-r",
    "href": "slides/Day01/index.html#types-of-comments-in-r",
    "title": "R for Bioinformatics",
    "section": "Types of Comments in R",
    "text": "Types of Comments in R\nIn general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R."
  },
  {
    "objectID": "slides/Day01/index.html#r-single-line-comments",
    "href": "slides/Day01/index.html#r-single-line-comments",
    "title": "R for Bioinformatics",
    "section": "R Single-Line Comments",
    "text": "R Single-Line Comments\n\n# this code prints Hello World\nprint(\"Hello World\") \n[1] ‚ÄúHello World‚Äù\n# check type of variables\nage &lt;- 30 \nclass(age)\n[1] ‚Äúnumeric‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#r-multi-line-comments",
    "href": "slides/Day01/index.html#r-multi-line-comments",
    "title": "R for Bioinformatics",
    "section": "R Multi-Line Comments",
    "text": "R Multi-Line Comments\n\nAs already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n[1] ‚ÄúHello World‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#purpose-of-comments",
    "href": "slides/Day01/index.html#purpose-of-comments",
    "title": "R for Bioinformatics",
    "section": "Purpose of Comments",
    "text": "Purpose of Comments\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program."
  },
  {
    "objectID": "slides/Day01/index.html#how-to-create-better-comments",
    "href": "slides/Day01/index.html#how-to-create-better-comments",
    "title": "R for Bioinformatics",
    "section": "How to Create Better Comments?",
    "text": "How to Create Better Comments?\nYou should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "slides/Day01/index.html#r-data-types",
    "href": "slides/Day01/index.html#r-data-types",
    "title": "R for Bioinformatics",
    "section": "R Data Types",
    "text": "R Data Types\n\nA variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer."
  },
  {
    "objectID": "slides/Day01/index.html#r-data-types-1",
    "href": "slides/Day01/index.html#r-data-types-1",
    "title": "R for Bioinformatics",
    "section": "R Data Types",
    "text": "R Data Types\nWe can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n[1] 123\n# print type of x\nclass(x)\n[1] ‚Äúinteger‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#different-types-of-data-types",
    "href": "slides/Day01/index.html#different-types-of-data-types",
    "title": "R for Bioinformatics",
    "section": "Different Types of Data Types",
    "text": "Different Types of Data Types\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,"
  },
  {
    "objectID": "slides/Day01/index.html#different-types-of-data-types-1",
    "href": "slides/Day01/index.html#different-types-of-data-types-1",
    "title": "R for Bioinformatics",
    "section": "Different Types of Data Types",
    "text": "Different Types of Data Types\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes."
  },
  {
    "objectID": "slides/Day01/index.html#logical-data-type",
    "href": "slides/Day01/index.html#logical-data-type",
    "title": "R for Bioinformatics",
    "section": "Logical Data Type",
    "text": "Logical Data Type\nThe logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n[1] TRUE\n# print type of bool1\nclass(bool1)\n[1] ‚Äúlogical‚Äù\n# print bool2\nbool2 &lt;- FALSE\nbool2\n[1] FALSE\n# print type of bool2\nclass(bool2)\n[1] ‚Äúlogical‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#logical-data-type-1",
    "href": "slides/Day01/index.html#logical-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Logical Data Type",
    "text": "Logical Data Type\nYou can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n[1] ‚Äúlogical‚Äù\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n[1] ‚Äúlogical‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#numeric-data-type",
    "href": "slides/Day01/index.html#numeric-data-type",
    "title": "R for Bioinformatics",
    "section": "Numeric Data Type",
    "text": "Numeric Data Type\nIn R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n[1] 63.5\n# check variable types \nclass(weight)\n[1] ‚Äúnumeric‚Äù\n# real numbers\nheight &lt;- 182\nheight\n[1] 182\n# check variable types \nclass(height)\n[1] ‚Äúnumeric‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#integer-data-type",
    "href": "slides/Day01/index.html#integer-data-type",
    "title": "R for Bioinformatics",
    "section": "Integer Data Type",
    "text": "Integer Data Type\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n[1] 186\n# check variable types \nclass(integer_variable)\n[1] ‚Äúinteger‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#complex-data-type",
    "href": "slides/Day01/index.html#complex-data-type",
    "title": "R for Bioinformatics",
    "section": "Complex Data Type",
    "text": "Complex Data Type\nThe complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n[1] ‚Äúcomplex‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#character-data-type",
    "href": "slides/Day01/index.html#character-data-type",
    "title": "R for Bioinformatics",
    "section": "Character Data Type",
    "text": "Character Data Type\n\nThe character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables"
  },
  {
    "objectID": "slides/Day01/index.html#character-data-type-1",
    "href": "slides/Day01/index.html#character-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Character Data Type",
    "text": "Character Data Type\nFor example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n[1] ‚Äúcharacter‚Äù\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n[1] ‚Äúcharacter‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#raw-data-type",
    "href": "slides/Day01/index.html#raw-data-type",
    "title": "R for Bioinformatics",
    "section": "Raw Data Type",
    "text": "Raw Data Type\nA raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data"
  },
  {
    "objectID": "slides/Day01/index.html#raw-data-type-1",
    "href": "slides/Day01/index.html#raw-data-type-1",
    "title": "R for Bioinformatics",
    "section": "Raw Data Type",
    "text": "Raw Data Type\nFor example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n[1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\nprint(class(raw_variable))\n[1] ‚Äúraw‚Äù\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n[1] ‚ÄúWelcome to Programiz‚Äù\nprint(class(char_variable))\n[1] ‚Äúcharacter‚Äù"
  },
  {
    "objectID": "slides/Day01/index.html#operators-in-r-1",
    "href": "slides/Day01/index.html#operators-in-r-1",
    "title": "R for Bioinformatics",
    "section": "Operators in R",
    "text": "Operators in R\n\nIn R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators"
  },
  {
    "objectID": "slides/Day01/index.html#arithmetic-operators",
    "href": "slides/Day01/index.html#arithmetic-operators",
    "title": "R for Bioinformatics",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16"
  },
  {
    "objectID": "slides/Day01/index.html#example-arithmetic-operators",
    "href": "slides/Day01/index.html#example-arithmetic-operators",
    "title": "R for Bioinformatics",
    "section": "Example: Arithmetic Operators",
    "text": "Example: Arithmetic Operators\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n[1] 12\n# Subtraction\n2-5\n[1] -3\n# Multiplication\n2 * 5 \n[1] 10\n# Division\n2 / 5 \n[1] 0.4"
  },
  {
    "objectID": "slides/Day01/index.html#example-arithmetic-operators-1",
    "href": "slides/Day01/index.html#example-arithmetic-operators-1",
    "title": "R for Bioinformatics",
    "section": "Example: Arithmetic Operators",
    "text": "Example: Arithmetic Operators\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n[1] 32\n# Modulus(Remainder from division)\n2 %% 5\n[1] 2"
  },
  {
    "objectID": "slides/Day01/index.html#relational-operators",
    "href": "slides/Day01/index.html#relational-operators",
    "title": "R for Bioinformatics",
    "section": "Relational Operators",
    "text": "Relational Operators\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE"
  },
  {
    "objectID": "slides/Day01/index.html#example-relational-operators",
    "href": "slides/Day01/index.html#example-relational-operators",
    "title": "R for Bioinformatics",
    "section": "Example: Relational Operators",
    "text": "Example: Relational Operators\nThe output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n[1] FALSE\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/index.html#logical-operators",
    "href": "slides/Day01/index.html#logical-operators",
    "title": "R for Bioinformatics",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)"
  },
  {
    "objectID": "slides/Day01/index.html#and-operator",
    "href": "slides/Day01/index.html#and-operator",
    "title": "R for Bioinformatics",
    "section": "AND Operator (&)",
    "text": "AND Operator (&)\n\nThe AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0"
  },
  {
    "objectID": "slides/Day01/index.html#example-and-operator",
    "href": "slides/Day01/index.html#example-and-operator",
    "title": "R for Bioinformatics",
    "section": "Example: AND Operator (&)",
    "text": "Example: AND Operator (&)\n\n# print & of TRUE and FALSE combinations\nTRUE & TRUE\n[1] TRUE\nTRUE & FALSE\n[1] FALSE\nFALSE & TRUE\n[1] FALSE\nFALSE & FALSE\n[1] FALSE\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/index.html#or-operator",
    "href": "slides/Day01/index.html#or-operator",
    "title": "R for Bioinformatics",
    "section": "OR Operator (|)",
    "text": "OR Operator (|)\nThe OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0"
  },
  {
    "objectID": "slides/Day01/index.html#example-or-operator",
    "href": "slides/Day01/index.html#example-or-operator",
    "title": "R for Bioinformatics",
    "section": "Example: OR Operator (|)",
    "text": "Example: OR Operator (|)\n\n# print | of TRUE and FALSE combinations\nTRUE | TRUE\n[1] TRUE\nTRUE | FALSE\n[1] TRUE\nFALSE | TRUE\n[1] TRUE\nFALSE | FALSE\n[1] FALSE\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/index.html#not-operator",
    "href": "slides/Day01/index.html#not-operator",
    "title": "R for Bioinformatics",
    "section": "NOT (!) Operator",
    "text": "NOT (!) Operator\nThe NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1"
  },
  {
    "objectID": "slides/Day01/index.html#example-not-operator",
    "href": "slides/Day01/index.html#example-not-operator",
    "title": "R for Bioinformatics",
    "section": "Example: NOT (!) Operator",
    "text": "Example: NOT (!) Operator\n\n# print ! of TRUE and FALSE\n!TRUE\n[1] FALSE\n!FALSE\n[1] TRUE\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "slides/Day01/03-data-types.html",
    "href": "slides/Day01/03-data-types.html",
    "title": "Data Types in R",
    "section": "",
    "text": "A variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer.\n\n\n\n\nWe can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n\n[1] 123\n\n# print type of x\nclass(x)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes.\n\n\n\n\n\n\nThe logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n\n[1] TRUE\n\n# print type of bool1\nclass(bool1)\n\n[1] \"logical\"\n\n# print bool2\nbool2 &lt;- FALSE\nbool2\n\n[1] FALSE\n\n# print type of bool2\nclass(bool2)\n\n[1] \"logical\"\n\n\n\n\n\nYou can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n\n[1] \"logical\"\n\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n\n[1] \"logical\"\n\n\n\n\n\nIn R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n\n[1] 63.5\n\n# check variable types \nclass(weight)\n\n[1] \"numeric\"\n\n# real numbers\nheight &lt;- 182\nheight\n\n[1] 182\n\n# check variable types \nclass(height)\n\n[1] \"numeric\"\n\n\n\n\n\nThe integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n\n[1] 186\n\n# check variable types \nclass(integer_variable)\n\n[1] \"integer\"\n\n\n\n\n\nThe complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n\n[1] \"complex\"\n\n\n\n\n\n\nThe character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables\n\n\n\n\n\nFor example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n\n[1] \"character\"\n\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n\n[1] \"character\"\n\n\n\n\n\nA raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data\n\n\n\n\nFor example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#r-data-types",
    "href": "slides/Day01/03-data-types.html#r-data-types",
    "title": "Data Types in R",
    "section": "",
    "text": "A variable can store different types of values such as numbers, characters etc.\nThese different types of data that we can use in our code are called data types. For example,\n\n\nx &lt;- 123L\n\n\nHere, 123L is an integer data. So the data type of the variable x is integer."
  },
  {
    "objectID": "slides/Day01/03-data-types.html#r-data-types-1",
    "href": "slides/Day01/03-data-types.html#r-data-types-1",
    "title": "Data Types in R",
    "section": "",
    "text": "We can verify this by printing the class of x using class() function.\n\nx &lt;- 123L\n# print value of x\nx\n\n[1] 123\n\n# print type of x\nclass(x)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#different-types-of-data-types",
    "href": "slides/Day01/03-data-types.html#different-types-of-data-types",
    "title": "Data Types in R",
    "section": "",
    "text": "Data Type\nExample\nDescription\n\n\n\n\nLogical\nTrue, False\nIt is a special data type for data with only two possible values which can be construed as true/false.\n\n\nNumeric\n12,32,112,5432\nDecimal value is called numeric in R, and it is the default computational data type.\n\n\nInteger\n3L, 66L, 2346L\nHere, L tells R to store the value as an integer,"
  },
  {
    "objectID": "slides/Day01/03-data-types.html#different-types-of-data-types-1",
    "href": "slides/Day01/03-data-types.html#different-types-of-data-types-1",
    "title": "Data Types in R",
    "section": "",
    "text": "Data Type\nExample\nDescription\n\n\n\n\nComplex\nZ=1+2i, t=7+3i\nA complex value in R is defined as the pure imaginary value i.\n\n\nCharacter\n‚Äòa‚Äô, ‚Äò‚Äúgood‚Äô‚Äù, ‚ÄúTRUE‚Äù, ‚Äô35.4‚Äô\nIn R programming, a character is used to represent string values. We convert objects into character values with the help of as.character() function.\n\n\nRaw\n\nA raw data type is used to holds raw bytes."
  },
  {
    "objectID": "slides/Day01/03-data-types.html#logical-data-type",
    "href": "slides/Day01/03-data-types.html#logical-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. For example,\n\nbool1 &lt;- TRUE\n# print bool1\nbool1\n\n[1] TRUE\n\n# print type of bool1\nclass(bool1)\n\n[1] \"logical\"\n\n# print bool2\nbool2 &lt;- FALSE\nbool2\n\n[1] FALSE\n\n# print type of bool2\nclass(bool2)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#logical-data-type-1",
    "href": "slides/Day01/03-data-types.html#logical-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "You can also define logical variables with a single letter - T for TRUE or F for FALSE. For example,\n\nis_weekend &lt;- F\nclass(is_weekend)  # \"logical\"\n\n[1] \"logical\"\n\nis_weekday &lt;- T\nclass(is_weekday)  # \"logical\"\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#numeric-data-type",
    "href": "slides/Day01/03-data-types.html#numeric-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "In R, the numeric data type represents all real numbers with or without decimal values. For example,\n\n# floating point values\nweight &lt;- 63.5\nweight\n\n[1] 63.5\n\n# check variable types \nclass(weight)\n\n[1] \"numeric\"\n\n# real numbers\nheight &lt;- 182\nheight\n\n[1] 182\n\n# check variable types \nclass(height)\n\n[1] \"numeric\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#integer-data-type",
    "href": "slides/Day01/03-data-types.html#integer-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The integer data type specifies real values without decimal points. We use the suffix L to specify integer data. For example,\n\ninteger_variable &lt;- 186L\ninteger_variable\n\n[1] 186\n\n# check variable types \nclass(integer_variable)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#complex-data-type",
    "href": "slides/Day01/03-data-types.html#complex-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The complex data type is used to specify purely imaginary values in R. We use the suffix i to specify the imaginary part. For example,\n\n# 2i represents imaginary part\ncomplex_value &lt;- 3 + 2i\n\n# print class of complex_value\nclass(complex_value)\n\n[1] \"complex\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#character-data-type",
    "href": "slides/Day01/03-data-types.html#character-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "The character data type is used to specify character or string values in a variable.\nIn programming, a string is a set of characters. For example, 'A' is a single character and \"Apple\" is a string.\nYou can use single quotes '' or double quotes \"\" to represent strings. In general, we use:\n\n'' for character variables\n\"\" for string variables"
  },
  {
    "objectID": "slides/Day01/03-data-types.html#character-data-type-1",
    "href": "slides/Day01/03-data-types.html#character-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "For example,\n\n# create a string variable\nfruit &lt;- \"Apple\"\nclass(fruit)\n\n[1] \"character\"\n\n# create a character variable\nmy_char &lt;- 'A'\nclass(my_char)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/Day01/03-data-types.html#raw-data-type",
    "href": "slides/Day01/03-data-types.html#raw-data-type",
    "title": "Data Types in R",
    "section": "",
    "text": "A raw data type specifies values as raw bytes. You can use the following methods to convert character data types to a raw data type and vice-versa:\n\ncharToRaw() - converts character data to raw data\nrawToChar() - converts raw data to character data"
  },
  {
    "objectID": "slides/Day01/03-data-types.html#raw-data-type-1",
    "href": "slides/Day01/03-data-types.html#raw-data-type-1",
    "title": "Data Types in R",
    "section": "",
    "text": "For example,\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\""
  },
  {
    "objectID": "slides/Day01/01-background.html",
    "href": "slides/Day01/01-background.html",
    "title": "Background",
    "section": "",
    "text": "R is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFree (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community\n\n\n\n\n\n\n\nQuality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "slides/Day01/01-background.html#what-is-r",
    "href": "slides/Day01/01-background.html#what-is-r",
    "title": "Background",
    "section": "",
    "text": "R is a dialect of S(R is an implementation of the S programming language).\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is developed by the R Development Core Team.\nR is a programming language and environment commonly used in statistical computing, data analytics and scientific research.\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.\nThe R language is widely used among statisticians and data miners for developing statistical software and data analysis."
  },
  {
    "objectID": "slides/Day01/01-background.html#why-r",
    "href": "slides/Day01/01-background.html#why-r",
    "title": "Background",
    "section": "",
    "text": "Free (open source)\nHigh level language designed for statistical computing\nPowerful and flexible - especially for data wrangling and visualization\nExtensive add-on software (packages)\nR is popular ‚Äì and increasing in popularity.\nR runs on all platforms.(Windows, Linux and Mac)\nR is being used by the biggest tech giants(google, facebook, microsoft, twitter)\nStrong community"
  },
  {
    "objectID": "slides/Day01/01-background.html#reproducibility-crisis",
    "href": "slides/Day01/01-background.html#reproducibility-crisis",
    "title": "Background",
    "section": "",
    "text": "Quality of medical research is often low\nLow quality code in medical research part of the problem\nLow quality code is more likely to contain errors\nReproducibility is often cumbersome and time-consuming"
  },
  {
    "objectID": "slides/Day01/01-background.html#variable-and-sample",
    "href": "slides/Day01/01-background.html#variable-and-sample",
    "title": "Background",
    "section": "Variable and Sample",
    "text": "Variable and Sample\n\nVariable: something measured or counted that is a characteristic about a sample\n\nExamples: temperature, length, count, color, category\n\nSample: individuals that you have data about.\n\nExamples: people, houses, viruses etc."
  },
  {
    "objectID": "slides/Day01/01-background.html#object",
    "href": "slides/Day01/01-background.html#object",
    "title": "Background",
    "section": "Object",
    "text": "Object\nObject - an object is something that can be worked with in R - can be lots of different things!\n\na matrix of numbers\na plot\na function\n\n‚Ä¶ many more"
  },
  {
    "objectID": "slides/Day01/01-background.html#columns-and-rows",
    "href": "slides/Day01/01-background.html#columns-and-rows",
    "title": "Background",
    "section": "Columns and Rows",
    "text": "Columns and Rows\n\n\n\n\n\n\n  \n    \n    \n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n      Species\n    \n  \n  \n    5.1\n3.5\n1.4\n0.2\nsetosa\n    4.9\n3.0\n1.4\n0.2\nsetosa\n    4.7\n3.2\n1.3\n0.2\nsetosa\n    4.6\n3.1\n1.5\n0.2\nsetosa\n    5.0\n3.6\n1.4\n0.2\nsetosa\n    5.4\n3.9\n1.7\n0.4\nsetosa\n  \n  \n  \n\n\n\n\n\nSample/Observations = Row\n\nVariable = Column\nData objects that looks like this is often called a data frame.\nFancier versions from the tidyverse are called tibbles (more on that soon!)."
  },
  {
    "objectID": "slides/Day01/01-background.html#function",
    "href": "slides/Day01/01-background.html#function",
    "title": "Background",
    "section": "Function",
    "text": "Function\n\nFunction - a function is a particular piece of code that allows you to do something in R. You can write your own, use functions that come directly from installing R, or use functions from additional packages.\nA function might help you add numbers together, create a plot, or organize your data. More on that soon!"
  },
  {
    "objectID": "slides/Day01/01-background.html#argumentparameter",
    "href": "slides/Day01/01-background.html#argumentparameter",
    "title": "Background",
    "section": "Argument/Parameter",
    "text": "Argument/Parameter\nArgument/Parameter - what you pass to a function\n\nsum(1, 20234)\n\n[1] 20235\n\n\n\nCan be data like the number 1 or 20234\nCan be options about how you want the function to work such as digits\n\n\nround(0.627, digits = 2)\n\n[1] 0.63\n\nround(0.627, digits = 1)\n\n[1] 0.6"
  },
  {
    "objectID": "slides/Day01/01-background.html#package",
    "href": "slides/Day01/01-background.html#package",
    "title": "Background",
    "section": "Package",
    "text": "Package\n\nPackage - a package in R is a bundle or ‚Äúpackage‚Äù of code (and or possibly data) that can be loaded together for easy repeated use or for sharing with others.\nPackages are sort of analogous to a software application like Microsoft Word on your computer. Your operating system allows you to use it, just like having R installed (and other required packages) allows you to use packages."
  },
  {
    "objectID": "slides/Day01/01-background.html#more-on-functions-and-packages",
    "href": "slides/Day01/01-background.html#more-on-functions-and-packages",
    "title": "Background",
    "section": "More on Functions and Packages",
    "text": "More on Functions and Packages\n\nWhen you download R, it has a ‚Äúbase‚Äù set of functions/packages (base R)\n\nYou can install additional packages for your uses from CRAN or GitHub\nThese additional packages are written by RStudio or R users/developers (like us)"
  },
  {
    "objectID": "slides/Day01/01-background.html#using-packages",
    "href": "slides/Day01/01-background.html#using-packages",
    "title": "Background",
    "section": "Using Packages",
    "text": "Using Packages\n\nNot all packages available on CRAN or GitHub are trustworthy\nRStudio (the company) makes a lot of great packages\nWho wrote it? Hadley Wickham is a major authority on R (Employee and Developer at RStudio)\nHow to trust an R package\nInstall packages: install.packages(\"package_name\")\nUse packages: library(package_name)"
  },
  {
    "objectID": "slides/Day01/01-background.html#tidyverse-ecosystem-and-base-r",
    "href": "slides/Day01/01-background.html#tidyverse-ecosystem-and-base-r",
    "title": "Background",
    "section": "Tidyverse Ecosystem and Base R",
    "text": "Tidyverse Ecosystem and Base R\n\nWe will mostly show you how to use tidyverse packages and functions.\nThis is a newer set of packages designed for data science that can make your code more intuitive as compared to the original older Base R.\nTidyverse advantages:\n\nconsistent structure - making it easier to learn how to use different packages\n\nparticularly good for wrangling (manipulating, cleaning, joining) data\n\nmore flexible for visualizing data\n\nPackages for the tidyverse are managed by a team of respected data scientists at RStudio."
  },
  {
    "objectID": "slides/Day01/01-background.html#installation-and-use",
    "href": "slides/Day01/01-background.html#installation-and-use",
    "title": "Background",
    "section": "Installation and Use",
    "text": "Installation and Use\n\nInstall all the packages in the tidyverse by running install.packages(\"tidyverse\").\nRun library(tidyverse) to load the core tidyverse and make it available in your current R session.\nLearn more about the tidyverse package at https://tidyverse.tidyverse.org."
  },
  {
    "objectID": "slides/Day01/01-background.html#core-tidyverse",
    "href": "slides/Day01/01-background.html#core-tidyverse",
    "title": "Background",
    "section": "Core tidyverse",
    "text": "Core tidyverse\n\nThe core tidyverse includes the packages that you‚Äôre likely to use in everyday data analyses.\nAs of tidyverse 1.3.0, the following packages are included in the core tidyverse.\nThe tidyverse also includes many other packages with more specialised usage.\nThey are not loaded automatically with library(tidyverse), so you‚Äôll need to load each one with its own call to library()."
  },
  {
    "objectID": "slides/Day01/01-background.html#data-import",
    "href": "slides/Day01/01-background.html#data-import",
    "title": "Background",
    "section": "Data Import",
    "text": "Data Import\n\nAs well as readr, for reading flat files, the tidyverse package installs a number of other packages for reading data:\n\nDBI for relational databases. (Maintained by Kirill M√ºller.) You‚Äôll need to pair DBI with a database specific backends like RSQLite, RMariaDB, RPostgres, or odbc. Learn more at https://db.rstudio.com.\n\nreadxl for .xls and .xlsx sheets."
  },
  {
    "objectID": "slides/Day01/01-background.html#data-wrangling",
    "href": "slides/Day01/01-background.html#data-wrangling",
    "title": "Background",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn addition to tidyr, and dplyr, there are five packages (including stringr and forcats) which are designed to work with specific types of data:\n\nlubridate for dates and date-times.\nhms for time-of-day values.\nblob for storing blob (binary) data."
  },
  {
    "objectID": "slides/Day01/01-background.html#program",
    "href": "slides/Day01/01-background.html#program",
    "title": "Background",
    "section": "Program",
    "text": "Program\nIn addition to purrr, which provides very consistent and natural methods for iterating on R objects, there are two additional tidyverse packages that help with general programming challenges:\n\nmagrittr provides the pipe, %&gt;% used throughout the tidyverse. It also provide a number of more specialised piping operators (like %$% and %&lt;&gt;%) that can be useful in other places.\nglue provides an alternative to paste() that makes it easier to combine data and strings."
  },
  {
    "objectID": "slides/Day01/01-background.html#useful-mostly-free-resources",
    "href": "slides/Day01/01-background.html#useful-mostly-free-resources",
    "title": "Background",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nTidyverse Skills for Data Science Book: https://jhudatascience.org/tidyversecourse/ (more about the tidyverse, some modeling, and machine learning)\nTidyverse Skills for Data Science Course: https://www.coursera.org/specializations/tidyverse-data-science-r (same content with quizzes, can get certificate with $)\nR for Data Science: http://r4ds.had.co.nz/\n(great general information)\nR basics by Rafael A. Irizarry: https://rafalab.github.io/dsbook/r-basics.html (great general information)\nOpen Case Studies: https://www.opencasestudies.org/\n(resource for specific public health cases with statistical implementation and interpretation)"
  },
  {
    "objectID": "slides/Day01/01-background.html#useful-mostly-free-resources-1",
    "href": "slides/Day01/01-background.html#useful-mostly-free-resources-1",
    "title": "Background",
    "section": "Useful (+ mostly Free) Resources",
    "text": "Useful (+ mostly Free) Resources\n\nDataquest: https://www.dataquest.io/\n(general interactive resource)\nVarious ‚ÄúCheat Sheets‚Äù: https://www.rstudio.com/resources/cheatsheets/\nR reference card: http://cran.r-project.org/doc/contrib/Short-refcard.pdf\nR jargon: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR vs Stata: https://link.springer.com/content/pdf/bbm%3A978-1-4419-1318-0%2F1.pdf\nR terminology: https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf"
  },
  {
    "objectID": "sessions.html#session-01-fundamentals-of-r---part-1-1",
    "href": "sessions.html#session-01-fundamentals-of-r---part-1-1",
    "title": "Sessions",
    "section": "Session 01: Fundamentals of R - Part 1",
    "text": "Session 01: Fundamentals of R - Part 1"
  },
  {
    "objectID": "slides/Day01/00-intro.html",
    "href": "slides/Day01/00-intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "slides/Day01/00-intro.html#agenda",
    "href": "slides/Day01/00-intro.html#agenda",
    "title": "Introduction",
    "section": "",
    "text": "Introduction & Setup\nBackground\nBasic Terms in R\nGetting Started With R\nR Data Types\nOperators in R"
  },
  {
    "objectID": "slides/Day01/00-intro.html#about-the-course",
    "href": "slides/Day01/00-intro.html#about-the-course",
    "title": "Introduction",
    "section": "About the Course",
    "text": "About the Course\n\nWhat do you hope to get out of the course?\n\nR for Bioinformatics is an introductory course designed to equip learners with essential skills in using the R programming language for bioinformatics research.\n\nWhy do you want to use R?\n\nThe course focuses on the practical application of R in genomic data manipulation, statistical analysis, data visualization, and reproducible research."
  },
  {
    "objectID": "slides/Day01/00-intro.html#learning-objectives",
    "href": "slides/Day01/00-intro.html#learning-objectives",
    "title": "Introduction",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nData Manipulation: Learn how to import, clean, and transform data in R for research purposes.\nData Visualization: Master techniques for creating effective data visualizations in R to communicate research findings visually.\nStatistical Analysis: Develop skills in conducting statistical analysis using R for hypothesis testing, regression analysis, and other statistical tests.\nReproducible Research: Implement principles of reproducible research using R to document and organize code, data, and analysis for replicability."
  },
  {
    "objectID": "slides/Day01/00-intro.html#course-platforms",
    "href": "slides/Day01/00-intro.html#course-platforms",
    "title": "Introduction",
    "section": "Course Platforms",
    "text": "Course Platforms\n\nWebsite: https://omicscenter.github.io/RforResearch/\nGithub: https://github.com/omicscenter/RforResearch\nMaterials will be uploaded the night before class.\nPlease check regularly official Telegram group for this course.\n\n\nWe are constantly trying to improve content! Please refresh/download materials before class."
  },
  {
    "objectID": "slides/Day01/00-intro.html#course-format",
    "href": "slides/Day01/00-intro.html#course-format",
    "title": "Introduction",
    "section": "Course Format",
    "text": "Course Format\n\nLecture with live coding (possibly ‚ÄúInteractive‚Äù)\nLab/Practical experience\nTwo 5 min breaks each session - timing may vary"
  },
  {
    "objectID": "slides/Day01/00-intro.html#assignment-policy",
    "href": "slides/Day01/00-intro.html#assignment-policy",
    "title": "Introduction",
    "section": "Assignment Policy",
    "text": "Assignment Policy\n\n20% of your grade will be determined by an assignment during normal class hours.\n50% of your grade will come from a 5-10 page report that explores in further detail one of the research areas in the class syllabus\nWe expect that students will use original data collection, whether quantitative or qualitative analysis, to answer the questions posed.\n30% of your grade will be determined by your attendance and participation in class."
  },
  {
    "objectID": "slides/Day01/00-intro.html#required-textbooks",
    "href": "slides/Day01/00-intro.html#required-textbooks",
    "title": "Introduction",
    "section": "Required Textbooks",
    "text": "Required Textbooks\nThe following books purchased and are available at the online book store. We have also a placed a copy of each on reserve at our Telegram group.\n\nData Analysis for the Life Sciences with R, by Rafael Irizarry\nIntroduction to Data Science, by Rafael Irizarry"
  },
  {
    "objectID": "slides/Day01/00-intro.html#acknowledgements",
    "href": "slides/Day01/00-intro.html#acknowledgements",
    "title": "Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "slides/Day01/00-intro.html#questions",
    "href": "slides/Day01/00-intro.html#questions",
    "title": "Introduction",
    "section": "Questions",
    "text": "Questions\n\n\n\nPlease add any questions to the public Zoom chat.\nCoordinators will monitor the chat\nWe‚Äôll also have time for questions at the break and at the end"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html",
    "href": "slides/Day01/02-getting-started.html",
    "title": "Getting Started With R",
    "section": "",
    "text": "If you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!\n\n\n\n\nRStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output.\n\n\n\n\n\nQuarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts\n\n\n\n\n\nReproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?\n\n\n\n\n\nNow that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\n\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed.\n\n\n\n\n\n2 + 2\n\n[1] 4\n\n2 * 4\n\n[1] 8\n\n2^3\n\n[1] 8\n\n\nNote: when you type your command, R inherently thinks you want to print the result.\n\n\n\n\nThe R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder\n\n\n\n\n\n\n2 + (2 * 3)^2\n\n[1] 38\n\n(1 + 3) / 2 + 45\n\n[1] 47\n\n6 / 2 * (1 + 2)\n\n[1] 9\n\n\n\n\n\nTry evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1\n\n\n\n\n\nVariables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier.\n\n\n\n\n\nIdentifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)\n\n\n\n\n\nalllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName\n\n\n\n\n\nYou can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n\n[1] 2\n\nx * 4\n\n[1] 8\n\nx + 2\n\n[1] 4\n\n\n\n\n\nUsing equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15  \n\n\n\n\n\nDon‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved\n\n\n\n\nAt the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not.\n\n\n\nWhen a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n\n[1] 10\n\n\n\nx &lt;- 10\nprint(x)\n\n[1] 10\n\n\n\nx &lt;- 10\ncat(x)\n\n10\n\n\n\n\n\nComments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n\n[1] 24\n\n\n\n\n\nIn general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R.\n\n\n\n\n# this code prints Hello World\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n# check type of variables\nage &lt;- 30 \nclass(age)\n\n[1] \"numeric\"\n\n\n\n\n\n\nAs already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n\n\n\n\nAs discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program.\n\n\n\n\nYou should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#your-setup",
    "href": "slides/Day01/02-getting-started.html#your-setup",
    "title": "Getting Started With R",
    "section": "",
    "text": "If you can, we suggest working virtually with a large monitor or two screens. This setup allows you to follow along on Zoom while also doing the hands-on coding.\n\nInstall the latest version from: https://posit.co/\nInstall RStudio from : https://posit.co/download/rstudio-desktop/\n\nRStudio is an integrated development environment (IDE) that makes it easier to work with R.\nMore on that soon!"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#rstudio---major-concepts",
    "href": "slides/Day01/02-getting-started.html#rstudio---major-concepts",
    "title": "Getting Started With R",
    "section": "",
    "text": "RStudio - an Integrated Development Environment (IDE) for R - makes it easier to use R.\nSource/Editor - ‚ÄúAnalysis‚Äù Script + Interactive Exploration - In a .R file (we call a script), code is saved on your disk\nR Console - Where code is executed (where things happen) - Code is not saved on your disk\nWorkspace/Environment - Tells you what objects are in R. What exists in memory/what is loaded?/what did I read in?\nR Markdown - Files (.Rmd) help generate reports that include your code and output."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#rstudio",
    "href": "slides/Day01/02-getting-started.html#rstudio",
    "title": "Getting Started With R",
    "section": "",
    "text": "Quarto - An open-source scientific and technical publishing system. Files (.qmd) help generate reports that include your code and output. https://quarto.org/\nR Project - Helps you organize your work. Helps with working directories (discussed later). Allows you to easily know which project you‚Äôre on.\nQuarto Project - Quarto projects are directories that provide: A way to render all or some of the files in a directory with a single command (e.g.¬†quarto render myproject).\nRStudio Keyboard shortcuts: http://www.rstudio.com/ide/docs/using/keyboard_shortcuts"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#what-is-reproducibility",
    "href": "slides/Day01/02-getting-started.html#what-is-reproducibility",
    "title": "Getting Started With R",
    "section": "",
    "text": "Reproducibility - A different analyst re-performs the analysis with the same code and the same data and obtains the same result.\nRepeatable - keeping everything the same but repeating the analysis - do we get the same results\nReproducible - using the same data and analysis but in the hands of another researcher - do we get the same results?\nReplicable - with new data do we obtain the same inferences?"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#running-your-first-r-program",
    "href": "slides/Day01/02-getting-started.html#running-your-first-r-program",
    "title": "Getting Started With R",
    "section": "",
    "text": "Now that you have installed R and RStudio successfully, let‚Äôs try to create your first R program. We will try to create a simple Hello World program.\nA Hello World program is a simple program that simply prints a Hello World message on the screen. It‚Äôs generally used to introduce a new language to learners.\n\n\nmessage &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\""
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#running-your-first-r-program-1",
    "href": "slides/Day01/02-getting-started.html#running-your-first-r-program-1",
    "title": "Getting Started With R",
    "section": "",
    "text": "message &lt;-\"Hello World!\"\nprint(message)  \n\n[1] \"Hello World!\"\n\n\n\nHere, we have created a simple variable called message. We have initialized this variable with a simple message string called \"Hello World!\". On execution, this program prints the message stored inside the variable.\nEvery output in R is preceded by a number (say n) in square brackets. This number means that the displayed value is the nth element printed."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-as-a-calculator",
    "href": "slides/Day01/02-getting-started.html#r-as-a-calculator",
    "title": "Getting Started With R",
    "section": "",
    "text": "2 + 2\n\n[1] 4\n\n2 * 4\n\n[1] 8\n\n2^3\n\n[1] 8\n\n\nNote: when you type your command, R inherently thinks you want to print the result."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-as-a-calculator-1",
    "href": "slides/Day01/02-getting-started.html#r-as-a-calculator-1",
    "title": "Getting Started With R",
    "section": "",
    "text": "The R console is a full calculator\nTry to play around with it:\n\n+, -, /, * are add, subtract, divide and multiply\n^ or ** is power\nparentheses ‚Äì ( and ) ‚Äì work with order of operations\n%% finds the remainder"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-as-a-calculator-2",
    "href": "slides/Day01/02-getting-started.html#r-as-a-calculator-2",
    "title": "Getting Started With R",
    "section": "",
    "text": "2 + (2 * 3)^2\n\n[1] 38\n\n(1 + 3) / 2 + 45\n\n[1] 47\n\n6 / 2 * (1 + 2)\n\n[1] 9"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-as-a-calculator-3",
    "href": "slides/Day01/02-getting-started.html#r-as-a-calculator-3",
    "title": "Getting Started With R",
    "section": "",
    "text": "Try evaluating the following:\n\n2 + 2 * 3 / 4 -3\n2 * 3 / 4 * 2\n2^4 - 1"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#variables-identifiers-in-r",
    "href": "slides/Day01/02-getting-started.html#variables-identifiers-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Variables are used to store data, whose value can be changed according to our need.\nA variable is a name given to a memory location, which is used to store values in a computer program.\nVariables in R programming can be used to store numbers (real and complex), words, matrices, and even tables.\nR is a dynamically programmed language which means that unlike other programming languages, we do not have to declare the data type of a variable before we can use it in our program.\nUnique name given to variable (function and objects as well) is identifier."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#rules-for-writing-identifiers-in-r",
    "href": "slides/Day01/02-getting-started.html#rules-for-writing-identifiers-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Identifiers can be a combination of letters, digits, period (.) and underscore (_).\nIt must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\nIt should not start with a number (e.g: 2x)\nIt should not start with a dot followed by a number (e.g: .2x)\nIt should not start with an underscore (e.g: _x)\nReserved words in R cannot be used as identifiers(e.g: TRUE, FALSE)"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#basically-there-are-5-naming-conventions",
    "href": "slides/Day01/02-getting-started.html#basically-there-are-5-naming-conventions",
    "title": "Getting Started With R",
    "section": "",
    "text": "alllowercase: e.g.¬†myname\nperiod.separated: e.g.¬†new.name\nunderscore_separated: e.g.¬†my_name\nlowerCamelCase: e.g.¬†myName\nUpperCamelCase: e.g.¬†MyName"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#assigning-values-to-objects",
    "href": "slides/Day01/02-getting-started.html#assigning-values-to-objects",
    "title": "Getting Started With R",
    "section": "",
    "text": "You can create objects from within the R environment and from files on your computer\nR uses &lt;- to assign values to an object name (you might also see = used, but this is not best practice)\nObject names are case-sensitive, i.e.¬†X and x are different\n\n\nx &lt;- 2\nx\n\n[1] 2\n\nx * 4\n\n[1] 8\n\nx + 2\n\n[1] 4"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#creating-variables",
    "href": "slides/Day01/02-getting-started.html#creating-variables",
    "title": "Getting Started With R",
    "section": "",
    "text": "Using equal(=) operator\n\nx = 10 \n\nUsing leftward(&lt;-) operator\n\ny &lt;- 15"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#reserved-keaywords-in-r",
    "href": "slides/Day01/02-getting-started.html#reserved-keaywords-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "Don‚Äôt use any reserved keyword as variable name. List all of reserved words in R by using (?Reserved).\n\n\n?Reserved"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#entering-input",
    "href": "slides/Day01/02-getting-started.html#entering-input",
    "title": "Getting Started With R",
    "section": "",
    "text": "At the R prompt/console we type expressions.\n\nnum &lt;- 10\n\nThe &lt;- symbol is the assignment operator. The grammar of the language determines whether an expression is complete or not."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#evaluation",
    "href": "slides/Day01/02-getting-started.html#evaluation",
    "title": "Getting Started With R",
    "section": "",
    "text": "When a complete expression is entered at the R console, it is evaluated and the result of evaluated expression is returned. The result may be auto-printed.\n\nx &lt;- 10\nx\n\n[1] 10\n\n\n\nx &lt;- 10\nprint(x)\n\n[1] 10\n\n\n\nx &lt;- 10\ncat(x)\n\n10"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-comments",
    "href": "slides/Day01/02-getting-started.html#r-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "Comments are portions of a computer program that are used to describe a piece of code. For example,\n\n# declare variable\nage = 24\n\n# print variable\nprint(age)\n\n[1] 24"
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#types-of-comments-in-r",
    "href": "slides/Day01/02-getting-started.html#types-of-comments-in-r",
    "title": "Getting Started With R",
    "section": "",
    "text": "In general, all programming languages have the following types of comments:\n\nsingle-line comments\nmulti-line comments\n\nHowever, in R programming, there is no functionality for multi-line comments. Thus, you can only write single-line comments in R."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-single-line-comments",
    "href": "slides/Day01/02-getting-started.html#r-single-line-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "# this code prints Hello World\nprint(\"Hello World\") \n\n[1] \"Hello World\"\n\n# check type of variables\nage &lt;- 30 \nclass(age)\n\n[1] \"numeric\""
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#r-multi-line-comments",
    "href": "slides/Day01/02-getting-started.html#r-multi-line-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "As already mentioned, R does not have any syntax to create multi-line comments.\nHowever, you can use consecutive single-line comments to create a multi-line comment in R. For example,\n\n\n# this is a print statement\n# it prints Hello World\n\nprint(\"Hello World\") \n\n[1] \"Hello World\""
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#purpose-of-comments",
    "href": "slides/Day01/02-getting-started.html#purpose-of-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "As discussed above, R comments are used to just document pieces of code. This can help others to understand the working of our code.\nHere are a few purposes of commenting on an R code:\n\nIt increases readability of the program for users other than the developers.\nComments in R provide metadata of the code or the overall project.\nComments are generally used by programmers to ignore some pieces of code during testing.\nThey are used to write a simple pseudo-code of the program."
  },
  {
    "objectID": "slides/Day01/02-getting-started.html#how-to-create-better-comments",
    "href": "slides/Day01/02-getting-started.html#how-to-create-better-comments",
    "title": "Getting Started With R",
    "section": "",
    "text": "You should always keep in mind the following points while writing comments.\n\nUse comments only to describe what a particular block of code does, not how it does.\nDon‚Äôt overuse comments. Try to make your code self-explanatory.\nTry to create comments that are as precise as possible.\nDon‚Äôt use redundant comments."
  },
  {
    "objectID": "slides/Day01/04-operators.html",
    "href": "slides/Day01/04-operators.html",
    "title": "Operators in R",
    "section": "",
    "text": "In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16\n\n\n\n\n\n\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n\n[1] 12\n\n# Subtraction\n2-5\n\n[1] -3\n\n# Multiplication\n2 * 5 \n\n[1] 10\n\n# Division\n2 / 5 \n\n[1] 0.4\n\n\n\n\n\n\nx &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n\n[1] 32\n\n# Modulus(Remainder from division)\n2 %% 5\n\n[1] 2\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE\n\n\n\n\n\n\nThe output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n\n[1] FALSE\n\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n\n[1] TRUE\n\n\n\n\n\nLogical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)\n\n\n\n\n\nThe AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0\n\n\n\n\n\n\n\n# print & of TRUE and FALSE combinations\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n\n[1] TRUE\n\n\n\n\n\nThe OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0\n\n\n\n\n\n\n\n# print | of TRUE and FALSE combinations\nTRUE | TRUE\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nFALSE | FALSE\n\n[1] FALSE\n\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n\n[1] TRUE\n\n\n\n\n\nThe NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1\n\n\n\n\n\n\n\n# print ! of TRUE and FALSE\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "slides/Day01/04-operators.html#operators-in-r-1",
    "href": "slides/Day01/04-operators.html#operators-in-r-1",
    "title": "Operators in R",
    "section": "",
    "text": "In R, operators are symbols or characters that perform specific operations on variables, values, or expressions.\nR provides various types of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more.\nOperators in R can mainly be classified into the following categories.\n\nArithmetic Operators\nRelational Operators\nLogical Operators"
  },
  {
    "objectID": "slides/Day01/04-operators.html#arithmetic-operators",
    "href": "slides/Day01/04-operators.html#arithmetic-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Operator\nOperation\nExample\n\n\n\n\n+\nAddition\n5 + 2 = 7\n\n\n-\nSubtraction\n4 - 2 = 2\n\n\n*\nMultiplication\n2 * 3 = 6\n\n\n/\nDivision\n4 / 2 = 2\n\n\n%%\nModulo\n5 %% 2 = 1\n\n\n^\nPower\n4 ^ 2 = 16"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-arithmetic-operators",
    "href": "slides/Day01/04-operators.html#example-arithmetic-operators",
    "title": "Operators in R",
    "section": "",
    "text": "x &lt;- 10 \ny &lt;- 2 \n\n# Addition\nx+y\n\n[1] 12\n\n# Subtraction\n2-5\n\n[1] -3\n\n# Multiplication\n2 * 5 \n\n[1] 10\n\n# Division\n2 / 5 \n\n[1] 0.4"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-arithmetic-operators-1",
    "href": "slides/Day01/04-operators.html#example-arithmetic-operators-1",
    "title": "Operators in R",
    "section": "",
    "text": "x &lt;- 10 \ny &lt;- 2 \n\n# Exponent \n2 ^ 5\n\n[1] 32\n\n# Modulus(Remainder from division)\n2 %% 5\n\n[1] 2"
  },
  {
    "objectID": "slides/Day01/04-operators.html#relational-operators",
    "href": "slides/Day01/04-operators.html#relational-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Operator\nOperation\nExample\n\n\n\n\n&gt;\nGreater that\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-relational-operators",
    "href": "slides/Day01/04-operators.html#example-relational-operators",
    "title": "Operators in R",
    "section": "",
    "text": "The output of a comparison is a boolean value. For example, to check if two numbers are equal, you can use the == operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx == y # FALSE\n\n[1] FALSE\n\n\nSimilarly, to check if x is less than y, you can use the &lt; operator.\n\nx &lt;- 10\ny &lt;- 23\n\n# compare x and y\nx &lt; y # TRUE\n\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/04-operators.html#logical-operators",
    "href": "slides/Day01/04-operators.html#logical-operators",
    "title": "Operators in R",
    "section": "",
    "text": "Logical operators are used to compare the output of two comparisons. There are three types of logical operators in R. They are:\n\nAND operator (&)\nOR operator (|)\nNOT operator (!)"
  },
  {
    "objectID": "slides/Day01/04-operators.html#and-operator",
    "href": "slides/Day01/04-operators.html#and-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The AND operator & takes as input two logical values and returns the output as another logical value.\nThe output of the operator is TRUE only when both the input logical values are either TRUE or evaluated to TRUE.\nLet a and b represent two operands. 0 represents FALSE and 1 represents TRUE. Then,\n\n\n\n\na\nb\na & b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n0"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-and-operator",
    "href": "slides/Day01/04-operators.html#example-and-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print & of TRUE and FALSE combinations\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\n\n# print & of TRUE and FALSE combinations\nx &lt;- 10\ny &lt;- 23\nz &lt;- 12\n\n# compare \nx&lt;y & y&gt;z\n\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/04-operators.html#or-operator",
    "href": "slides/Day01/04-operators.html#or-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The OR operator | returns TRUE if all or any one of the logical inputs is TRUE or evaluates to TRUE. If all of them are FALSE, then it returns FALSE. Consider the table below.\n\n\n\na\nb\na | b\n\n\n\n\n1\n1\n1\n\n\n1\n0\n1\n\n\n0\n1\n1\n\n\n0\n0\n0"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-or-operator",
    "href": "slides/Day01/04-operators.html#example-or-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print | of TRUE and FALSE combinations\nTRUE | TRUE\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nFALSE | FALSE\n\n[1] FALSE\n\n\n\n# print | of TRUE and FALSE combinations\nw &lt;- 54\nx &lt;- 12\ny &lt;- 25\nz &lt;- 1\n\nw&gt;x | x&gt;y | z&gt;w\n\n[1] TRUE"
  },
  {
    "objectID": "slides/Day01/04-operators.html#not-operator",
    "href": "slides/Day01/04-operators.html#not-operator",
    "title": "Operators in R",
    "section": "",
    "text": "The NOT operator ! is used to negate the logical values it is used on. If the input value is TRUE, it will turn to FALSE and vice-versa.\n\n\n\na\n!a\n\n\n\n\n1\n0\n\n\n0\n1"
  },
  {
    "objectID": "slides/Day01/04-operators.html#example-not-operator",
    "href": "slides/Day01/04-operators.html#example-not-operator",
    "title": "Operators in R",
    "section": "",
    "text": "# print ! of TRUE and FALSE\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\nHere, the output is the negation of the input.\n\nWe can use the ! operator with comparisons.\nFor example, !(x &gt; 12) is the same as x &lt;= 12. This means that x is not greater than 12. Which means that x can be less than or equal to 12."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html",
    "href": "slides/Day02/00-data-structures.html",
    "title": "",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#agenda",
    "href": "slides/Day02/00-data-structures.html#agenda",
    "title": "",
    "section": "",
    "text": "Data Structurs in R\nSubsetting R Objects\nControl Flow in R\nFunctions\nDates and Times\nLoop Functions\nSimulations - Generating Random Numbers"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#what-is-data-structure",
    "href": "slides/Day02/00-data-structures.html#what-is-data-structure",
    "title": "",
    "section": "What is Data Structure?",
    "text": "What is Data Structure?\n\nData structures are ways of organizing and storing data in a computer system.\nThey define the format, organization, and relationship between data elements.\nData structures facilitate efficient operations such as insertion, deletion, searching, and sorting of data.\nThey provide a foundation for building algorithms and designing efficient programs."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#data-structures-in-r",
    "href": "slides/Day02/00-data-structures.html#data-structures-in-r",
    "title": "",
    "section": "Data Structures in R",
    "text": "Data Structures in R\n\nVectors\nMatrix\nLists\nData Frame\nFactor"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#types-of-data-structures-in-r",
    "href": "slides/Day02/00-data-structures.html#types-of-data-structures-in-r",
    "title": "",
    "section": "Types of Data Structures in R",
    "text": "Types of Data Structures in R\n\nOne-Dimensional Data Structures\n\nOne-dimensional data structures in R are used to store and manipulate data along a single dimension.\nThe main one-dimensional data structure in R is the vector.\n\nTwo-Dimensional Data Structures\n\nTwo-dimensional data structures in R are used to store and manipulate data in a tabular format with rows and columns.\nThe main two-dimensional data structures in R are matrices and data frames."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#strings",
    "href": "slides/Day02/00-data-structures.html#strings",
    "title": "",
    "section": "Strings",
    "text": "Strings\n\nA string is a sequence of characters. For example, \"Programming\" is a string that includes characters: P, r, o, g, r, a, m, m, i, n, g.\nIn R, we represent strings using quotation marks (double quotes, ‚Äù ‚Äù or single quotes, ‚Äô ‚Äô). For example,\n\n\n# string value using single quotes\n'Hello' \n\n[1] \"Hello\"\n\n# string value using double quotes \n\"Hello\" \n\n[1] \"Hello\""
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#string-operations-in-r",
    "href": "slides/Day02/00-data-structures.html#string-operations-in-r",
    "title": "",
    "section": "String Operations in R",
    "text": "String Operations in R\nR provides us various built-in functions that allow us to perform different operations on strings. Here, we will look at some of the commonly used string functions.\n\nFind the length of a string\nJoin two strings\nCompare two strings\nChange the string case"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#find-length-of-string",
    "href": "slides/Day02/00-data-structures.html#find-length-of-string",
    "title": "",
    "section": "Find Length of String",
    "text": "Find Length of String\nWe use the nchar() method to find the length of a string. For example,\n\nmessage1 &lt;- \"CHIRAL Bangladesh\"\n# use of nchar() to find length of message1 \nnchar(message1)\n\n[1] 17\n\n\nHere, nchar() returns the number of characters present inside the string."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#join-strings-together",
    "href": "slides/Day02/00-data-structures.html#join-strings-together",
    "title": "",
    "section": "Join Strings Together",
    "text": "Join Strings Together\nIn R, we can use the paste() function to join two or more strings together. For example,\n\nmessage1 &lt;- \"CHIRAL\"\nmessage2 &lt;- \"Bangladesh\"\n\n# use paste() to join two strings\npaste(message1, message2)\n\n[1] \"CHIRAL Bangladesh\"\n\n\nHere, we have used the paste() function to join two strings: message1 and message2."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#compare-two-strings-in-r-programming",
    "href": "slides/Day02/00-data-structures.html#compare-two-strings-in-r-programming",
    "title": "",
    "section": "Compare Two Strings in R Programming",
    "text": "Compare Two Strings in R Programming\nWe use the == operator to compare two strings. If two strings are equal, the operator returns TRUE. Otherwise, it returns FALSE. For example,\n\nmessage1 &lt;- \"Hello, World!\"\nmessage2 &lt;- \"Hi, Bangladesh!\"\nmessage3 &lt;- \"Hello, CHIRAL!\"\n# `message1 == message2` - returns FALSE because two strings are not equal\nprint(message1 == message2)\n\n[1] FALSE\n\n#`message1 == message3` - returns TRUE because both strings are equal \nprint(message1 == message3)\n\n[1] FALSE"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#change-case-of-r-string",
    "href": "slides/Day02/00-data-structures.html#change-case-of-r-string",
    "title": "",
    "section": "Change Case of R String",
    "text": "Change Case of R String\nIn R, we can change the case of a string using\n\ntoupper() - convert string to uppercase\ntolower() - convert string to lowercase\n\n\nmessage &lt;- \"R Programming\"\n\n# change string to uppercase\nmessage_upper &lt;- toupper(message)\nmessage_upper\n\n[1] \"R PROGRAMMING\"\n\n# change string to lowercase\nmessage_lower &lt;- tolower(message)\nmessage_lower\n\n[1] \"r programming\""
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#vector",
    "href": "slides/Day02/00-data-structures.html#vector",
    "title": "",
    "section": "Vector",
    "text": "Vector\n\nVector is a basic data structure in R.\nIt contains element of the same type.\nThe data types can be logical, integer, double, character, and complex.\nA vector‚Äôs type can be checked with the typeof() function."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-vectors---using-the-c-function",
    "href": "slides/Day02/00-data-structures.html#creating-vectors---using-the-c-function",
    "title": "",
    "section": "Creating Vectors - Using the c() Function",
    "text": "Creating Vectors - Using the c() Function\nThe c() function is used to concatenate or combine elements into a vector.\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\")\n\n# Logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-vectors---using-the-operator",
    "href": "slides/Day02/00-data-structures.html#creating-vectors---using-the-operator",
    "title": "",
    "section": "Creating Vectors - Using the : Operator",
    "text": "Creating Vectors - Using the : Operator\nThe : operator generates a sequence of numbers from the starting value to the ending value.\n\n# Numeric sequence vector\nnumeric_sequence &lt;- 1:10"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-vectors---using-sequence-generation-functions",
    "href": "slides/Day02/00-data-structures.html#creating-vectors---using-sequence-generation-functions",
    "title": "",
    "section": "Creating Vectors - Using Sequence Generation Functions",
    "text": "Creating Vectors - Using Sequence Generation Functions\nR provides functions like seq(), rep(), and seq_len() to generate sequences of numbers.\n\n# Numeric sequence vector using seq()\nnumeric_sequence &lt;- seq(from = 1, to = 10, by = 2)\n\n# Repeated values vector using rep()\nrepeated_values &lt;- rep(0, times = 5)\n\n# Index sequence vector using seq_len()\nindex_sequence &lt;- seq_len(10)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-vectors---using-vectorized-operations",
    "href": "slides/Day02/00-data-structures.html#creating-vectors---using-vectorized-operations",
    "title": "",
    "section": "Creating Vectors - Using Vectorized Operations",
    "text": "Creating Vectors - Using Vectorized Operations\nVectors can be created by performing operations on existing vectors or values.\n\n# Vector created using vectorized operation\nnew_vector &lt;- numeric_vector * 2"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-vectors---mixing-objects",
    "href": "slides/Day02/00-data-structures.html#creating-vectors---mixing-objects",
    "title": "",
    "section": "Creating Vectors - Mixing Objects",
    "text": "Creating Vectors - Mixing Objects\n\n# Character \nx &lt;- c(1.7, \"a\")\n# Numeric \ny &lt;- c(TRUE, 2)\n# Character \nz &lt;- c(\"a\", TRUE)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#matrix",
    "href": "slides/Day02/00-data-structures.html#matrix",
    "title": "",
    "section": "Matrix",
    "text": "Matrix\n\nMatrix is a two dimensional data structure in R programming.\nMatrix is similar to vector but additionally contains the dimension attributes.\nAll attributes of an object can be checked by attributes() function.\nDimension can be checked by directly with the dim()function. We can check if a variable is a matrix or not with the class() function."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creatinig-matrix",
    "href": "slides/Day02/00-data-structures.html#creatinig-matrix",
    "title": "",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\nMatrix can be created using the matrix() function. Here‚Äôs the general syntax:\n\n\nmatrix(data, nrow, ncol, byrow, dimnames)\n\n\ndata: The data elements used to fill the matrix. It can be a vector or a combination of vectors.\nnrow: The number of rows in the matrix.\nncol: The number of columns in the matrix.\nbyrow: A logical value specifying whether the matrix should be filled by row (TRUE) or by column (FALSE) (default).\ndimnames: Optional names for the rows and columns of the matrix."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creatinig-matrix-1",
    "href": "slides/Day02/00-data-structures.html#creatinig-matrix-1",
    "title": "",
    "section": "Creatinig Matrix",
    "text": "Creatinig Matrix\n\n# Create a matrix using matrix function \nmat1 &lt;- matrix(1:9, nrow = 3, ncol = 3) \n\n# Create a matrix using matrix function: only one dimension  \nmat2 &lt;- matrix(1:9, nrow = 3)\n\n# Create a matrix using matrix function: filling by row-wise \nmat3 &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\n# Create a matrix using matrix function: dimension names \nmat4 &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#matrix-properties",
    "href": "slides/Day02/00-data-structures.html#matrix-properties",
    "title": "",
    "section": "Matrix Properties",
    "text": "Matrix Properties\n\n# Create a matrix using matrix function \nmat &lt;- matrix(1:9, nrow = 3, dimnames = list(c(\"X\", \"Y\", \"Z\"), \n                                             c(\"A\",\"B\",\"C\")))\n# Column Names \ncolnames(mat) \n\n[1] \"A\" \"B\" \"C\"\n\n# Row Names \nrownames(mat)\n\n[1] \"X\" \"Y\" \"Z\"\n\n# Dimension \ndim(mat)\n\n[1] 3 3"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#list",
    "href": "slides/Day02/00-data-structures.html#list",
    "title": "",
    "section": "List",
    "text": "List\n\nList is a data structure having components of mixed data types.\nA vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\nWe can check if it‚Äôs a list with typeof() function and find its length using length() function."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-list",
    "href": "slides/Day02/00-data-structures.html#creating-list",
    "title": "",
    "section": "Creating List",
    "text": "Creating List\nList can be created using the list() function. Here‚Äôs the general syntax:\n\nlist(..., recursive = FALSE)\n\n\n...: The elements to be included in the list, separated by commas.\nrecursive: A logical value specifying whether the list should allow nested lists (TRUE) or not (FALSE) (default)."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-list-1",
    "href": "slides/Day02/00-data-structures.html#creating-list-1",
    "title": "",
    "section": "Creating List",
    "text": "Creating List\n\n# Create a list \nL = list(1, \"a\", TRUE, 1+3i)\n\n# Create a list with different elements\nmy_list &lt;- list(\n  name = \"John Doe\",  # Character value\n  age = 30,  # Numeric value\n  is_student = TRUE,  # Logical value\n  scores = c(90, 85, 92),  # Numeric vector\n  matrix_data = matrix(1:6, nrow = 2),  # Matrix\n  sub_list = list(\"a\", \"b\", \"c\")  # Nested list\n)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#factors",
    "href": "slides/Day02/00-data-structures.html#factors",
    "title": "",
    "section": "Factors",
    "text": "Factors\n\nIn R, factors are used to represent categorical or discrete data with predefined levels or categories.\nFactors are useful when working with data that has distinct categories or when performing statistical analysis.\nFactors are used to represent categorical data and can be ordered and unordered."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-factors",
    "href": "slides/Day02/00-data-structures.html#creating-factors",
    "title": "",
    "section": "Creating Factors",
    "text": "Creating Factors\nFactors are created using the factor() function in R. Here‚Äôs the general syntax:\n\nfactor(x, levels, labels, ordered = FALSE)\n\n\nx: A vector or column of data that represents the categorical variable.\nlevels: An optional argument specifying the unique levels or categories of the factor. If not provided, the distinct values in x are used as levels.\nlabels: An optional argument specifying the labels for the levels. If not provided, the levels themselves are used as labels.\nordered: A logical value indicating whether the factor should be treated as ordered (TRUE) or unordered (FALSE) (default)."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#creating-factors-1",
    "href": "slides/Day02/00-data-structures.html#creating-factors-1",
    "title": "",
    "section": "Creating Factors",
    "text": "Creating Factors\n\n# Create a factor using factor() function \nf &lt;- factor(c(\"yes\", \"no\", \"yes\", \"no\"))\n\n# Check levels \nlevels(f)\n\n[1] \"no\"  \"yes\""
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#data-frame",
    "href": "slides/Day02/00-data-structures.html#data-frame",
    "title": "",
    "section": "Data Frame",
    "text": "Data Frame\n\nIn R, a data frame is a two-dimensional tabular data structure similar to a table in a relational database.\nIt consists of rows and columns, where each column can have a different data type.\nData frames are commonly used for storing and manipulating structured data, and they provide a convenient way to work with datasets.\nData frames can be created using the data.frame() function or by importing data from external sources."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#create-data-frame",
    "href": "slides/Day02/00-data-structures.html#create-data-frame",
    "title": "",
    "section": "Create Data Frame",
    "text": "Create Data Frame\nData frames can be created using the data.frame() function or by importing data from external sources. Here‚Äôs an example of creating a data frame in R:\n\n# Create a data frame\ndf &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\"),\n  age = c(25, 30, 35),\n  city = c(\"New York\", \"London\", \"Paris\"),\n  stringsAsFactors = FALSE\n)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#data-conversion-functions-in-r",
    "href": "slides/Day02/00-data-structures.html#data-conversion-functions-in-r",
    "title": "",
    "section": "Data Conversion Functions in R",
    "text": "Data Conversion Functions in R\n\nConversion functions in R help transform data between different types and formats.\nas.character(), as.numeric(), as.integer(), as.logical(), and as.factor() are commonly used conversion functions.\nThese functions are essential for data preprocessing, ensuring data compatibility, and performing operations on different data types."
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#as.character",
    "href": "slides/Day02/00-data-structures.html#as.character",
    "title": "",
    "section": "as.character()",
    "text": "as.character()\n\nas.character() function converts an object to a character string representation.\nSyntax: as.character(x)\nx: The object to be converted.\n\n\n# Convert numeric values to character strings\nnumbers &lt;- c(1, 2, 3)\ncharacter_numbers &lt;- as.character(numbers)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#as.numeric",
    "href": "slides/Day02/00-data-structures.html#as.numeric",
    "title": "",
    "section": "as.numeric()",
    "text": "as.numeric()\n\nas.numeric() function converts an object to numeric (floating-point) values.\nSyntax: as.numeric(x)\nx: The object to be converted.\n\n\n# Convert character strings to numeric values\ncharacter_numbers &lt;- c(\"1\", \"2\", \"3\")\nnumeric_numbers &lt;- as.numeric(character_numbers)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#as.integer",
    "href": "slides/Day02/00-data-structures.html#as.integer",
    "title": "",
    "section": "as.integer()",
    "text": "as.integer()\n\nas.integer() function converts an object to integer values.\nSyntax: as.integer(x)\nx: The object to be converted.\n\n\n# Convert numeric values to integer values\nnumbers &lt;- c(1.5, 2.7, 3.9)\ninteger_numbers &lt;- as.integer(numbers)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#as.logical",
    "href": "slides/Day02/00-data-structures.html#as.logical",
    "title": "",
    "section": "as.logical()",
    "text": "as.logical()\n\nas.logical() function converts an object to logical (boolean) values.\nSyntax: as.logical(x)\nx: The object to be converted.\n\n\n# Convert numeric values to logical values\nnumbers &lt;- c(0, 1, 2)\nlogical_values &lt;- as.logical(numbers)"
  },
  {
    "objectID": "slides/Day02/00-data-structures.html#as.factor",
    "href": "slides/Day02/00-data-structures.html#as.factor",
    "title": "",
    "section": "as.factor()",
    "text": "as.factor()\n\nas.factor() function converts an object to a factor, which represents categorical data.\nSyntax: as.factor(x)\nx: The object to be converted."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html",
    "href": "slides/Day02/02-control-flow.html",
    "title": "Control Flow in R",
    "section": "",
    "text": "Control flow refers to the order in which instructions are executed in a program.\nIn R, control flow is managed through various constructs that allow for conditional execution, loop iterations, and branching.\nConditionals - if, if..else, if..else..elif\nLoops - for, while, repeat\n\n\n\n\nThe if statement allows for conditional execution of code blocks.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}\n\n\n\n\n\n# example \nx &lt;- 5\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n}\n\n[1] \"x is positive.\"\n\n\n\nThe variable x is assigned a value of 5.\nThe if statement checks if x is greater than 0.\nSince the condition is TRUE (5 is greater than 0), the code block inside the curly braces is executed.\nResult: The message \"x is positive.\" is printed.\n\n\n\n\nThe if-else statement allows you to execute different code blocks based on a condition.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}\n\n\n\n\n\n# example \nx &lt;- -2\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n\n[1] \"x is negative.\"\n\n\n\nThe variable x is assigned a value of -2.\nThe if statement checks if x is greater than 0.\nSince the condition is FALSE (-2 is not greater than 0), the code block inside the else clause is executed.\nResult: The message \"x is negative.\" is printed.\n\n\n\n\nThe if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}\n\n\n\n\n\n# example \nx &lt;- 0\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else if (x &lt; 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n\n[1] \"x is zero.\"\n\n\n\nThe variable x is assigned a value of0.\nThe if statement checks if x is greater than 0, then if it is less than 0.\nSince none of the conditions are TRUE, the code block inside the else clause is executed.\nResult: The message \"x is zero.\" is printed.\n\n\n\n\n\nThe ifelse() function in R is a vectorized version of the if-else statement.\nIt allows you to perform conditional operations on elements of a vector or data frame based on a specified condition.\n\n\n# Syntax \nifelse(condition, true_value, false_value)\n\n\n\n\n\n# example \nx &lt;- c(1, 2, 3, 4, 5)\nresult &lt;- ifelse(x &gt; 3, \"Greater\", \"Less or equal\")\nresult\n\n[1] \"Less or equal\" \"Less or equal\" \"Less or equal\" \"Greater\"      \n[5] \"Greater\"      \n\n\n\nThe vector x contains numeric values.\nThe ifelse function checks if each element of x is greater than 3.\nFor elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value ‚ÄúGreater‚Äù. Otherwise, it is assigned the value ‚ÄúLess or equal‚Äù.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù).\n\n\n\n\nThe ifelse function can handle missing values (NA) in the input vectors.\n\nx &lt;- c(1, 2, NA, 4, 5)\n\nresult &lt;- ifelse(is.na(x), \"Missing\", ifelse(x &gt; 3, \"Greater\", \"Less or equal\"))\nresult\n\n[1] \"Less or equal\" \"Less or equal\" \"Missing\"       \"Greater\"      \n[5] \"Greater\"      \n\n\n\nThe vector x contains numeric values, including a missing value (NA).\nThe first ifelse checks if each element of x is missing (NA).\nIf TRUE, the element is assigned the value ‚ÄúMissing‚Äù.\nIf FALSE, the second ifelse checks if the element is greater than 3, assigning ‚ÄúGreater‚Äù or ‚ÄúLess or equal‚Äù accordingly.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúMissing‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù).\n\n\n\n\nThe ifelse() function can be applied to specific columns of a data frame.\n\ndf &lt;- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category &lt;- ifelse(df$Age &gt;= 30, \"Senior\", \"Junior\")\n\n\nThe data frame df contains columns for names and ages.\nThe ifelse function is applied to the Age column.\nIf the age is greater than or equal to 30, the Category column is assigned the value ‚ÄúSenior‚Äù. Otherwise, it is assigned ‚ÄúJunior‚Äù.\nResult: The df data frame will have an additional column Category with values c(‚ÄúJunior‚Äù, ‚ÄúJunior‚Äù, ‚ÄúSenior‚Äù).\n\n\n\n\nThe for loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}\n\n\n\n\n\n# Example \nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nThe for loop iterates over the sequence 1:5.\nIn each iteration, the loop variable i takes the value of the current element in the sequence.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\nResult: The numbers 1 to 5 are printed.\n\n\n\n\nThe for loop can be used to iterate over elements of a vector.\n\nfruits &lt;- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"orange\"\n\n\n\nThe vector fruits contains strings representing different fruits.\nThe for loop iterates over each element of the fruits vector.\nIn each iteration, the loop variable fruit takes the value of the current element.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\nResult: The strings ‚Äúapple‚Äù, ‚Äúbanana‚Äù, and ‚Äúorange‚Äù are printed.\n\n\n\n\nYou can control the behavior of a for loop using conditional statements.\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n\n\n\n\n\n\nThe for loop iterates over the sequence 1:10.\nIn each iteration, the loop variable i takes the value of the current element.\nThe if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n\n\n\nThe while loop in R allows for executing a block of code repeatedly as long as a specified condition is TRUE.\n\nwhile (condition) {\n  # Code block to be executed\n}\n\n\n\n\n\ni &lt;- 1\n\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 5.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nAfter printing, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 1 to 5 are printed.\n\n\n\n\nYou can use conditional statements within a while loop to control its behavior.\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i &lt;- i + 1\n}\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\"\n\n\n\n\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nAfter executing the code block, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification.\n\n\n\n\nYou can control the behavior of a while loop by modifying external conditions within the loop.\n\nx &lt;- 10\n\nwhile (x &gt; 0) {\n  print(x)\n  x &lt;- x - 2\n}\n\n[1] 10\n[1] 8\n[1] 6\n[1] 4\n[1] 2\n\n\n\n\n\n\nThe variable x is initially set to 10.\nThe while loop continues executing as long as x is greater than 0.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\nAfter printing, x is decremented by 2 using the assignment statement x &lt;- x - 2.\nThe loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 10, 8, 6, 4, and 2 are printed.\n\n\n\n\n\nThe break statement in R is used to exit a loop prematurely.\nIt is typically used within conditional statements to terminate the loop based on a specific condition.\n\n\n\n\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nThe if statement checks if i is equal to 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\nAfter the break statement, the remaining code within the loop is not executed.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5.\n\n\n\n\n\nThe next statement in R is used to skip the current iteration of a loop and move to the next iteration.\nIt is typically used within conditional statements to control the flow of the loop based on a specific condition.\n\n\n\n\n\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n\n\n\nThe for loop iterates over the values 1 to 5.\nIn each iteration, the code block inside the curly braces is executed.\nThe if statement checks if i is equal to 3.\nIf the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\nIf the condition is FALSE, the code block continues executing, and the value of i is printed.\nResult: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped.\n\n\n\n\n\nThe repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\nIt provides a way to create an infinite loop that can be terminated using control flow statements.\n\n\n\n\n\ni &lt;- 1\n\nrepeat {\n  print(i)\n  i &lt;- i + 1\n  if (i &gt; 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\n\n\nThe variable i is initially set to 1.\nThe repeat loop continues executing the code block inside the curly braces indefinitely.\nIn each iteration, the value of i is printed.\nThe variable i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe if statement checks if i is greater than 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate.\nAfter the break statement, the program flow continues with the next statement after the loop.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#control-flow-structure",
    "href": "slides/Day02/02-control-flow.html#control-flow-structure",
    "title": "Control Flow in R",
    "section": "",
    "text": "Control flow refers to the order in which instructions are executed in a program.\nIn R, control flow is managed through various constructs that allow for conditional execution, loop iterations, and branching.\nConditionals - if, if..else, if..else..elif\nLoops - for, while, repeat"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if-statement",
    "href": "slides/Day02/02-control-flow.html#if-statement",
    "title": "Control Flow in R",
    "section": "",
    "text": "The if statement allows for conditional execution of code blocks.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n}"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if-statement-1",
    "href": "slides/Day02/02-control-flow.html#if-statement-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "# example \nx &lt;- 5\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n}\n\n[1] \"x is positive.\"\n\n\n\nThe variable x is assigned a value of 5.\nThe if statement checks if x is greater than 0.\nSince the condition is TRUE (5 is greater than 0), the code block inside the curly braces is executed.\nResult: The message \"x is positive.\" is printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if..else-statement",
    "href": "slides/Day02/02-control-flow.html#if..else-statement",
    "title": "Control Flow in R",
    "section": "",
    "text": "The if-else statement allows you to execute different code blocks based on a condition.\n\n# Syntax \nif (condition) {\n  # Code block executed when condition is TRUE\n} else {\n  # Code block executed when condition is FALSE\n}"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if..else-statement-1",
    "href": "slides/Day02/02-control-flow.html#if..else-statement-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "# example \nx &lt;- -2\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else {\n  print(\"x is negative.\")\n}\n\n[1] \"x is negative.\"\n\n\n\nThe variable x is assigned a value of -2.\nThe if statement checks if x is greater than 0.\nSince the condition is FALSE (-2 is not greater than 0), the code block inside the else clause is executed.\nResult: The message \"x is negative.\" is printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if..else-if..else-statement",
    "href": "slides/Day02/02-control-flow.html#if..else-if..else-statement",
    "title": "Control Flow in R",
    "section": "",
    "text": "The if-else if-else statement allows you to specify multiple conditions and execute different code blocks accordingly.\n\n# Syntax \nif (condition1) {\n  # Code block executed when condition1 is TRUE\n} else if (condition2) {\n  # Code block executed when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code block executed when all previous conditions are FALSE\n}"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#if..else-if..else-statement-1",
    "href": "slides/Day02/02-control-flow.html#if..else-if..else-statement-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "# example \nx &lt;- 0\n\nif (x &gt; 0) {\n  print(\"x is positive.\")\n} else if (x &lt; 0) {\n  print(\"x is negative.\")\n} else {\n  print(\"x is zero.\")\n}\n\n[1] \"x is zero.\"\n\n\n\nThe variable x is assigned a value of0.\nThe if statement checks if x is greater than 0, then if it is less than 0.\nSince none of the conditions are TRUE, the code block inside the else clause is executed.\nResult: The message \"x is zero.\" is printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#ifelse-function",
    "href": "slides/Day02/02-control-flow.html#ifelse-function",
    "title": "Control Flow in R",
    "section": "",
    "text": "The ifelse() function in R is a vectorized version of the if-else statement.\nIt allows you to perform conditional operations on elements of a vector or data frame based on a specified condition.\n\n\n# Syntax \nifelse(condition, true_value, false_value)"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#ifelse-function-1",
    "href": "slides/Day02/02-control-flow.html#ifelse-function-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "# example \nx &lt;- c(1, 2, 3, 4, 5)\nresult &lt;- ifelse(x &gt; 3, \"Greater\", \"Less or equal\")\nresult\n\n[1] \"Less or equal\" \"Less or equal\" \"Less or equal\" \"Greater\"      \n[5] \"Greater\"      \n\n\n\nThe vector x contains numeric values.\nThe ifelse function checks if each element of x is greater than 3.\nFor elements that satisfy the condition (TRUE), the corresponding element in the result is assigned the value ‚ÄúGreater‚Äù. Otherwise, it is assigned the value ‚ÄúLess or equal‚Äù.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#handling-missing-values-with-ifelse",
    "href": "slides/Day02/02-control-flow.html#handling-missing-values-with-ifelse",
    "title": "Control Flow in R",
    "section": "",
    "text": "The ifelse function can handle missing values (NA) in the input vectors.\n\nx &lt;- c(1, 2, NA, 4, 5)\n\nresult &lt;- ifelse(is.na(x), \"Missing\", ifelse(x &gt; 3, \"Greater\", \"Less or equal\"))\nresult\n\n[1] \"Less or equal\" \"Less or equal\" \"Missing\"       \"Greater\"      \n[5] \"Greater\"      \n\n\n\nThe vector x contains numeric values, including a missing value (NA).\nThe first ifelse checks if each element of x is missing (NA).\nIf TRUE, the element is assigned the value ‚ÄúMissing‚Äù.\nIf FALSE, the second ifelse checks if the element is greater than 3, assigning ‚ÄúGreater‚Äù or ‚ÄúLess or equal‚Äù accordingly.\nResult: The result vector will be c(‚ÄúLess or equal‚Äù, ‚ÄúLess or equal‚Äù, ‚ÄúMissing‚Äù, ‚ÄúGreater‚Äù, ‚ÄúGreater‚Äù)."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#ifelse-with-data-frames",
    "href": "slides/Day02/02-control-flow.html#ifelse-with-data-frames",
    "title": "Control Flow in R",
    "section": "",
    "text": "The ifelse() function can be applied to specific columns of a data frame.\n\ndf &lt;- data.frame(Name = c(\"John\", \"Alice\", \"Emily\"), Age = c(25, 30, 35))\n\ndf$Category &lt;- ifelse(df$Age &gt;= 30, \"Senior\", \"Junior\")\n\n\nThe data frame df contains columns for names and ages.\nThe ifelse function is applied to the Age column.\nIf the age is greater than or equal to 30, the Category column is assigned the value ‚ÄúSenior‚Äù. Otherwise, it is assigned ‚ÄúJunior‚Äù.\nResult: The df data frame will have an additional column Category with values c(‚ÄúJunior‚Äù, ‚ÄúJunior‚Äù, ‚ÄúSenior‚Äù)."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#for-loop",
    "href": "slides/Day02/02-control-flow.html#for-loop",
    "title": "Control Flow in R",
    "section": "",
    "text": "The for loop in R allows for executing a block of code repeatedly for a specified number of iterations.\n\n# Syntax \nfor (variable in sequence) {\n  # Code block to be executed in each iteration\n}"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#for-loop-example",
    "href": "slides/Day02/02-control-flow.html#for-loop-example",
    "title": "Control Flow in R",
    "section": "",
    "text": "# Example \nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nThe for loop iterates over the sequence 1:5.\nIn each iteration, the loop variable i takes the value of the current element in the sequence.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of i.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#using-for-loop-with-vector",
    "href": "slides/Day02/02-control-flow.html#using-for-loop-with-vector",
    "title": "Control Flow in R",
    "section": "",
    "text": "The for loop can be used to iterate over elements of a vector.\n\nfruits &lt;- c(\"apple\", \"banana\", \"orange\")\n\nfor (fruit in fruits) {\n  print(fruit)\n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"orange\"\n\n\n\nThe vector fruits contains strings representing different fruits.\nThe for loop iterates over each element of the fruits vector.\nIn each iteration, the loop variable fruit takes the value of the current element.\nThe code block inside the curly braces is executed for each iteration, which in this case, is printing the value of fruit.\nResult: The strings ‚Äúapple‚Äù, ‚Äúbanana‚Äù, and ‚Äúorange‚Äù are printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#controlling-for-loop-with-conditions",
    "href": "slides/Day02/02-control-flow.html#controlling-for-loop-with-conditions",
    "title": "Control Flow in R",
    "section": "",
    "text": "You can control the behavior of a for loop using conditional statements.\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n}\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\""
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#controlling-for-loop-with-conditions-1",
    "href": "slides/Day02/02-control-flow.html#controlling-for-loop-with-conditions-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "The for loop iterates over the sequence 1:10.\nIn each iteration, the loop variable i takes the value of the current element.\nThe if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#while-loop",
    "href": "slides/Day02/02-control-flow.html#while-loop",
    "title": "Control Flow in R",
    "section": "",
    "text": "The while loop in R allows for executing a block of code repeatedly as long as a specified condition is TRUE.\n\nwhile (condition) {\n  # Code block to be executed\n}"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#while-loop-example",
    "href": "slides/Day02/02-control-flow.html#while-loop-example",
    "title": "Control Flow in R",
    "section": "",
    "text": "i &lt;- 1\n\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nThe variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 5.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nAfter printing, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe loop continues until i becomes greater than 5, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 1 to 5 are printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#using-while-loop-with-conditional-statements",
    "href": "slides/Day02/02-control-flow.html#using-while-loop-with-conditional-statements",
    "title": "Control Flow in R",
    "section": "",
    "text": "You can use conditional statements within a while loop to control its behavior.\n\ni &lt;- 1\n\nwhile (i &lt;= 10) {\n  if (i %% 2 == 0) {\n    print(paste(i, \"is even\"))\n  } else {\n    print(paste(i, \"is odd\"))\n  }\n  i &lt;- i + 1\n}\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n[1] \"7 is odd\"\n[1] \"8 is even\"\n[1] \"9 is odd\"\n[1] \"10 is even\""
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#using-while-loop-with-conditional-statements-1",
    "href": "slides/Day02/02-control-flow.html#using-while-loop-with-conditional-statements-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "The variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the if statement checks if i is even (divisible by 2) using the modulo operator (%%).\nBased on the condition, the code block inside the corresponding branch of the if statement is executed, printing whether the number is even or odd.\nAfter executing the code block, i is incremented by 1 using the assignment statement i &lt;- i + 1.\nResult: The numbers from 1 to 10 are printed along with their even or odd classification."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#controlling-while-loop-with-external-conditions",
    "href": "slides/Day02/02-control-flow.html#controlling-while-loop-with-external-conditions",
    "title": "Control Flow in R",
    "section": "",
    "text": "You can control the behavior of a while loop by modifying external conditions within the loop.\n\nx &lt;- 10\n\nwhile (x &gt; 0) {\n  print(x)\n  x &lt;- x - 2\n}\n\n[1] 10\n[1] 8\n[1] 6\n[1] 4\n[1] 2"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#controlling-while-loop-with-external-conditions-1",
    "href": "slides/Day02/02-control-flow.html#controlling-while-loop-with-external-conditions-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "The variable x is initially set to 10.\nThe while loop continues executing as long as x is greater than 0.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of x.\nAfter printing, x is decremented by 2 using the assignment statement x &lt;- x - 2.\nThe loop continues until x becomes non-positive, at which point the condition becomes FALSE, and the loop terminates.\nResult: The numbers 10, 8, 6, 4, and 2 are printed."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#break-statement",
    "href": "slides/Day02/02-control-flow.html#break-statement",
    "title": "Control Flow in R",
    "section": "",
    "text": "The break statement in R is used to exit a loop prematurely.\nIt is typically used within conditional statements to terminate the loop based on a specific condition."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#break-statement-example",
    "href": "slides/Day02/02-control-flow.html#break-statement-example",
    "title": "Control Flow in R",
    "section": "",
    "text": "i &lt;- 1\n\nwhile (i &lt;= 10) {\n  print(i)\n  if (i == 5) {\n    break\n  }\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#break-statement-example-1",
    "href": "slides/Day02/02-control-flow.html#break-statement-example-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "The variable i is initially set to 1.\nThe while loop continues executing as long as i is less than or equal to 10.\nIn each iteration, the code block inside the curly braces is executed, which in this case, is printing the value of i.\nThe if statement checks if i is equal to 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate immediately.\nAfter the break statement, the remaining code within the loop is not executed.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes 5."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#next-statement",
    "href": "slides/Day02/02-control-flow.html#next-statement",
    "title": "Control Flow in R",
    "section": "",
    "text": "The next statement in R is used to skip the current iteration of a loop and move to the next iteration.\nIt is typically used within conditional statements to control the flow of the loop based on a specific condition."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#next-statement-example",
    "href": "slides/Day02/02-control-flow.html#next-statement-example",
    "title": "Control Flow in R",
    "section": "",
    "text": "for (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n\n\n\nThe for loop iterates over the values 1 to 5.\nIn each iteration, the code block inside the curly braces is executed.\nThe if statement checks if i is equal to 3.\nIf the condition is TRUE, the next statement is encountered, causing the current iteration to be skipped, and the program flow moves to the next iteration.\nIf the condition is FALSE, the code block continues executing, and the value of i is printed.\nResult: The numbers 1, 2, 4, and 5 are printed. The iteration with i equal to 3 is skipped."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#repeat-loop",
    "href": "slides/Day02/02-control-flow.html#repeat-loop",
    "title": "Control Flow in R",
    "section": "",
    "text": "The repeat loop in R allows for executing a block of code repeatedly until a specified condition is met.\nIt provides a way to create an infinite loop that can be terminated using control flow statements."
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#repeat-loop-example",
    "href": "slides/Day02/02-control-flow.html#repeat-loop-example",
    "title": "Control Flow in R",
    "section": "",
    "text": "i &lt;- 1\n\nrepeat {\n  print(i)\n  i &lt;- i + 1\n  if (i &gt; 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "slides/Day02/02-control-flow.html#repeat-loop-example-1",
    "href": "slides/Day02/02-control-flow.html#repeat-loop-example-1",
    "title": "Control Flow in R",
    "section": "",
    "text": "The variable i is initially set to 1.\nThe repeat loop continues executing the code block inside the curly braces indefinitely.\nIn each iteration, the value of i is printed.\nThe variable i is incremented by 1 using the assignment statement i &lt;- i + 1.\nThe if statement checks if i is greater than 5.\nIf the condition is TRUE, the break statement is encountered, causing the loop to terminate.\nAfter the break statement, the program flow continues with the next statement after the loop.\nResult: The numbers 1 to 5 are printed, and the loop terminates when i becomes greater than 5."
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html",
    "href": "slides/Day02/04-dates-and-times.html",
    "title": "Dates and Times",
    "section": "",
    "text": "Dates and times in R can be represented using different classes and functions.\nLet‚Äôs explore some common operations and functions related to dates and times in R.\n\n\n\n\n\nDate class: Represents dates without time information.\nPOSIXct class: Represents dates and times with second-level precision.\nPOSIXlt class: Represents dates and times as a list of components.\n\n\n\n\n\nas.Date(): Converts a character or numeric value to a Date object.\nas.POSIXct() or as.POSIXlt(): Converts a character or numeric value to a POSIXct or POSIXlt object.\n\n\ndate &lt;- as.Date(\"2023-07-05\")\ndatetime &lt;- as.POSIXct(\"2023-07-05 10:30:00\")\n\n\n\n\n\nformat(): Converts a date or time object to a character string with a specified format.\nstrptime(): Parses a character string representing a date or time into a POSIXlt object, based on a specified format.\n\n\nformatted_date &lt;- format(date, format = \"%Y/%m/%d\")\nparsed_datetime &lt;- strptime(\"2023-07-05 10:30:00\", format = \"%Y-%m-%d %H:%M:%S\")\n\n\n\n\nFunctions likeyear(), month(), day(), hour(), minute(), second() can be used to extract specific components from date and time objects.\n\nhour &lt;- parsed_datetime$hour\nminute &lt;- parsed_datetime$min\nsecond &lt;- parsed_datetime$sec\n\n\n\n\n\nDates and times can be manipulated using arithmetic operations.\nArithmetic operations on Date objects return new Date objects.\nArithmetic operations on POSIXct objects return new POSIXct objects, maintaining the time information.\n\n\nnext_day &lt;- date + 1\n\n\n\n\n\nR allows working with dates and times in different time zones.\nTime zones can be specified using the tz parameter when creating or converting date and time objects.\n\n\ndatetime_ny &lt;- as.POSIXct(\"2023-07-05 10:30:00\", tz = \"America/New_York\")\n\n\nDates and times in R are represented using different classes: Date, POSIXct, and POSIXlt.\nFunctions like as.Date(), as.POSIXct(), format(), strptime(), etc., facilitate working with dates and times."
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#working-with-dates-and-times-in-r",
    "href": "slides/Day02/04-dates-and-times.html#working-with-dates-and-times-in-r",
    "title": "Dates and Times",
    "section": "",
    "text": "Dates and times in R can be represented using different classes and functions.\nLet‚Äôs explore some common operations and functions related to dates and times in R."
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#date-and-time-classes",
    "href": "slides/Day02/04-dates-and-times.html#date-and-time-classes",
    "title": "Dates and Times",
    "section": "",
    "text": "Date class: Represents dates without time information.\nPOSIXct class: Represents dates and times with second-level precision.\nPOSIXlt class: Represents dates and times as a list of components."
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#creating-dates-and-times",
    "href": "slides/Day02/04-dates-and-times.html#creating-dates-and-times",
    "title": "Dates and Times",
    "section": "",
    "text": "as.Date(): Converts a character or numeric value to a Date object.\nas.POSIXct() or as.POSIXlt(): Converts a character or numeric value to a POSIXct or POSIXlt object.\n\n\ndate &lt;- as.Date(\"2023-07-05\")\ndatetime &lt;- as.POSIXct(\"2023-07-05 10:30:00\")"
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#formatting-and-parsing-dates-and-times",
    "href": "slides/Day02/04-dates-and-times.html#formatting-and-parsing-dates-and-times",
    "title": "Dates and Times",
    "section": "",
    "text": "format(): Converts a date or time object to a character string with a specified format.\nstrptime(): Parses a character string representing a date or time into a POSIXlt object, based on a specified format.\n\n\nformatted_date &lt;- format(date, format = \"%Y/%m/%d\")\nparsed_datetime &lt;- strptime(\"2023-07-05 10:30:00\", format = \"%Y-%m-%d %H:%M:%S\")"
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#extracting-components",
    "href": "slides/Day02/04-dates-and-times.html#extracting-components",
    "title": "Dates and Times",
    "section": "",
    "text": "Functions likeyear(), month(), day(), hour(), minute(), second() can be used to extract specific components from date and time objects.\n\nhour &lt;- parsed_datetime$hour\nminute &lt;- parsed_datetime$min\nsecond &lt;- parsed_datetime$sec"
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#arithmetic-operations",
    "href": "slides/Day02/04-dates-and-times.html#arithmetic-operations",
    "title": "Dates and Times",
    "section": "",
    "text": "Dates and times can be manipulated using arithmetic operations.\nArithmetic operations on Date objects return new Date objects.\nArithmetic operations on POSIXct objects return new POSIXct objects, maintaining the time information.\n\n\nnext_day &lt;- date + 1"
  },
  {
    "objectID": "slides/Day02/04-dates-and-times.html#time-zones",
    "href": "slides/Day02/04-dates-and-times.html#time-zones",
    "title": "Dates and Times",
    "section": "",
    "text": "R allows working with dates and times in different time zones.\nTime zones can be specified using the tz parameter when creating or converting date and time objects.\n\n\ndatetime_ny &lt;- as.POSIXct(\"2023-07-05 10:30:00\", tz = \"America/New_York\")\n\n\nDates and times in R are represented using different classes: Date, POSIXct, and POSIXlt.\nFunctions like as.Date(), as.POSIXct(), format(), strptime(), etc., facilitate working with dates and times."
  },
  {
    "objectID": "slides/Day02/06-simulations.html",
    "href": "slides/Day02/06-simulations.html",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "Simulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations.\n\n\n\n\n\nrunif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)\n\n\n\n\n\nsample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)\n\n\n\n\n\nsample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)\n\n\n\n\n\nR provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)\n\n\n\n\n\nTo reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "slides/Day02/06-simulations.html#simulations",
    "href": "slides/Day02/06-simulations.html#simulations",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "Simulations play a crucial role in statistical analysis and modeling.\nR provides various functions to generate random numbers and conduct simulations."
  },
  {
    "objectID": "slides/Day02/06-simulations.html#generating-random-numbers",
    "href": "slides/Day02/06-simulations.html#generating-random-numbers",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "runif(): Generates random numbers from a uniform distribution.\nSyntax: runif(n, min = 0, max = 1)\nn: Number of random numbers to generate.\nmin: Minimum value of the range.\nmax: Maximum value of the range.\n\n\n# Generate 5 random numbers between 0 and 1\nrandom_numbers &lt;- runif(5)"
  },
  {
    "objectID": "slides/Day02/06-simulations.html#generating-random-integers",
    "href": "slides/Day02/06-simulations.html#generating-random-integers",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "sample(): Generates random integers from a specified range.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random integers to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate 3 random integers from 1 to 10\nrandom_integers &lt;- sample(1:10, 3)"
  },
  {
    "objectID": "slides/Day02/06-simulations.html#generating-random-samples-from-a-vector",
    "href": "slides/Day02/06-simulations.html#generating-random-samples-from-a-vector",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "sample(): Generates random samples from a vector.\nSyntax: sample(x, size, replace = FALSE)\nx: A vector of values from which to sample.\nsize: Number of random samples to generate.\nreplace: Whether sampling should be done with replacement.\n\n\n# Generate a random sample of 4 elements from a vector\nvector &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrandom_sample &lt;- sample(vector, 4)"
  },
  {
    "objectID": "slides/Day02/06-simulations.html#generating-random-numbers-from-distributions",
    "href": "slides/Day02/06-simulations.html#generating-random-numbers-from-distributions",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "R provides functions to generate random numbers from various probability distributions:\n\nrnorm(): Generates random numbers from a normal distribution.\nrexp(): Generates random numbers from an exponential distribution.\nrgamma(): Generates random numbers from a gamma distribution.\nrbinom(): Generates random numbers from a binomial distribution.\nrpois(): Generates random numbers from a Poisson distribution.\n\n\n\n# Generate 5 random numbers from a normal distribution with mean 0 and standard deviation 1\nrandom_numbers &lt;- rnorm(5, mean = 0, sd = 1)"
  },
  {
    "objectID": "slides/Day02/06-simulations.html#seeding-random-number-generation",
    "href": "slides/Day02/06-simulations.html#seeding-random-number-generation",
    "title": "Simulations - Generating Random Numbers",
    "section": "",
    "text": "To reproduce random results, set a seed value using set.seed().\nSyntax: set.seed(seed)\nseed: A numeric value to initialize the random number generator.\n\n\n# Set a seed value for reproducibility\nset.seed(123)"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Receive the Invitation: Look for the invitation to the Zoom class from your instructor. This invitation may come via email, a calendar invite. Ensure you have the meeting link or Meeting ID and Passcode (if required).\nPrepare Your Device:\nMake sure you have a computer, tablet, or smartphone with a stable internet connection.\nEnsure your device has a working camera and microphone if you plan to use video and audio during the class."
  },
  {
    "objectID": "schedule.html#instructions",
    "href": "schedule.html#instructions",
    "title": "Schedule",
    "section": "",
    "text": "Receive the Invitation: Look for the invitation to the Zoom class from your instructor. This invitation may come via email, a calendar invite. Ensure you have the meeting link or Meeting ID and Passcode (if required).\nPrepare Your Device:\nMake sure you have a computer, tablet, or smartphone with a stable internet connection.\nEnsure your device has a working camera and microphone if you plan to use video and audio during the class."
  },
  {
    "objectID": "about.html#muhibullah-shahjahan-teaching-assistant",
    "href": "about.html#muhibullah-shahjahan-teaching-assistant",
    "title": "About",
    "section": "Muhibullah Shahjahan (Teaching Assistant)",
    "text": "Muhibullah Shahjahan (Teaching Assistant)\n\nMuhibullah is an undergraduate student in the Department of Microbiology at Jagannath University and health data analysis, bioinformatics are some of his research interests. Currently, he is working as a research assistant at CHIRAL Bangladesh."
  },
  {
    "objectID": "about.html#teaching-assistant",
    "href": "about.html#teaching-assistant",
    "title": "About",
    "section": "Teaching Assistant",
    "text": "Teaching Assistant\n\nBio\n\nMuhibullah Shahjahan is an undergraduate student in the Department of Microbiology at Jagannath University and health data analysis, bioinformatics are some of his research interests. Currently, he is working as a research assistant at OMICS Center, CHIRAL Bangladesh.\n\n\nSkills\nProgramming Languages: Python, R; Data Science: scikit-learn, PyCaret, Dask, PySpark; Analytics Softwares: SPSS, PowerBI, Microsoft Excel; Survey Tools: RedCap, KoboToolBox, EpiCollect, Google Forms; Academic Writing Tools: Microsoft Word, LaTeX, Mendeley; Bioinformatics: NGS Data Analysis"
  },
  {
    "objectID": "index.html#boot-camp-overview",
    "href": "index.html#boot-camp-overview",
    "title": "Multi-Omics Boot Camp",
    "section": "Boot Camp Overview",
    "text": "Boot Camp Overview\nThe growing trend in biological and biomedical research is the use of assays that measure various ‚Äúomics‚Äù data types, such as transcriptome, proteome, genomic variants, epigenetic marks, metabolome, and functional assays, at single-cell and/or spatial resolution. Additionally, there is an urgent need for joint statistical and computational modeling, as well as mechanistic and integrated statistical analysis of these data, to discover important underlying patterns, categories, or trends, and to arrive at statistically robust conclusions using explainable models of reasoning. The boot camp aims to provide participants with an overview of the conceptual and statistical foundations that underlie existing and emerging integrative multimodal data strategies as well as practical trade-offs between various methods. Participants will gain hands-on experience with software implementation, quality assessment of inputs and outputs, method performance assessments, tuning, and model fit interpretation, as well as relevant open science practices through practical sessions using real-world examples."
  },
  {
    "objectID": "index.html#audience-and-requirements",
    "href": "index.html#audience-and-requirements",
    "title": "Multi-Omics Boot Camp",
    "section": "Audience and Requirements",
    "text": "Audience and Requirements"
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "Multi-Omics Boot Camp",
    "section": "Instructors",
    "text": "Instructors"
  },
  {
    "objectID": "index.html#locations",
    "href": "index.html#locations",
    "title": "Multi-Omics Boot Camp",
    "section": "Locations",
    "text": "Locations"
  },
  {
    "objectID": "index.html#audience",
    "href": "index.html#audience",
    "title": "Multi-Omics Boot Camp",
    "section": "Audience",
    "text": "Audience\nThe workshop is designed for undergraduates, postgraduates, and researchers from universities. Please engage actively in discussions and hands-on activities to make the most of this opportunity."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Multi-Omics Boot Camp",
    "section": "Requirements",
    "text": "Requirements\n\nUniversity Registration: Interested universities and community organizations are required to register first.\nDate and Time Coordination: Once registered, we will work collaboratively to fix the date and time of the boot camp, accommodating the preferences of the participating institutions."
  },
  {
    "objectID": "index.html#key-features",
    "href": "index.html#key-features",
    "title": "Multi-Omics Boot Camp",
    "section": "Key Features",
    "text": "Key Features\n\nIn-Person Learning Experience: Immerse yourself in a dynamic learning environment with hands-on sessions and interactive workshops. Engage with expert instructors and fellow participants in a collaborative setting.\nTailored for University Communities: This boot camp is specially crafted for university communities and organizations. To participate, universities are required to register, allowing us to coordinate the schedule and location based on the collective preferences of the participants.\nOpen to Undergraduate and Postgraduate Students: Whether you‚Äôre a budding undergraduate researcher or a postgraduate student looking to enhance your analytical skills, this boot camp caters to participants at various academic levels.\nHolistic Approach to Multi-Omics Data: Gain a deep understanding of how to integrate genomics, transcriptomics, proteomics, and other omics datasets. Learn cutting-edge techniques to draw meaningful insights from multi-dimensional biological data.\nExpert Instructors: Benefit from the expertise of seasoned instructors who specialize in multi-omics analysis. Acquire practical skills and theoretical knowledge that can be applied to real-world research scenarios.\nLogistics: Organizers are responsible for covering the travel and meal costs of the instructors, ensuring a seamless and enriching learning experience for everyone involved."
  },
  {
    "objectID": "index.html#technical-requirements",
    "href": "index.html#technical-requirements",
    "title": "Multi-Omics Boot Camp",
    "section": "Technical Requirements",
    "text": "Technical Requirements\n\nPersonal Laptops with Charger: Participants are required to bring their personal laptops along with the respective chargers. Ensure that your laptop is in good working condition for hands-on sessions during the workshop.\nGood Internet Connection (University): Access to a stable and reliable internet connection, preferably from your university network, is crucial for smooth participation in online components of the workshop.Verify and test your internet connection in advance to avoid disruptions during the sessions.\nSoftware Installation: Be prepared to install specific software or tools on your laptop as per the workshop requirements. Details regarding the required software will be shared in advance."
  },
  {
    "objectID": "index.html#cautions",
    "href": "index.html#cautions",
    "title": "Multi-Omics Boot Camp",
    "section": "Cautions",
    "text": "Cautions\n\nData Backup: Prior to the workshop, back up any important data on your laptop to prevent potential loss during software installations or other activities.\nPower Backup: If available, consider bringing a portable power bank to ensure uninterrupted power supply during the workshop.\nPrivacy Settings: Be mindful of your privacy settings, especially during interactive sessions.\nAvoid Multitasking: To make the most of the workshop, minimize multitasking during sessions and allocate dedicated time for learning."
  }
]